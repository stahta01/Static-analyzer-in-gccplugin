../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
<<<<<<< HEAD
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  1298k ( 48%)
 phase parsing                      :   0.03 (100%)   0.01 ( 50%)   0.04 ( 67%)  1190k ( 44%)
 phase opt and generate             :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 17%)   192k (  7%)
 callgraph optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)    16  (  0%)
 callgraph ipa passes               :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 17%)   110k (  4%)
 preprocessing                      :   0.01 ( 33%)   0.00 (  0%)   0.02 ( 33%)   350k ( 13%)
 lexical analysis                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 parser function body               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)    65k (  2%)
 parser inl. func. body             :   0.02 ( 67%)   0.01 ( 50%)   0.00 (  0%)    71k (  3%)
 tree operand scan                  :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)    18k (  1%)
 TOTAL                              :   0.03          0.02          0.06         2691k
=======
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)  1298k ( 50%)
 phase parsing                      :   0.04 ( 80%)   0.01 ( 50%)   0.05 ( 71%)  1109k ( 42%)
 phase opt and generate             :   0.01 ( 20%)   0.01 ( 50%)   0.01 ( 14%)   192k (  7%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 14%)   110k (  4%)
 ipa free lang data                 :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)    11k (  0%)
 preprocessing                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)   325k ( 12%)
 lexical analysis                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)     0  (  0%)
 parser (global)                    :   0.03 ( 60%)   0.01 ( 50%)   0.02 ( 29%)   575k ( 22%)
 parser struct body                 :   0.00 (  0%)   0.00 (  0%)   0.01 ( 14%)    77k (  3%)
 parser inl. func. body             :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)    23k (  1%)
 tree SSA other                     :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)  1544  (  0%)
 plugin execution                   :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.05          0.02          0.07         2609k
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 97%)
 TOTAL                              :   0.00          0.00          0.00         2229k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
<<<<<<< HEAD
 	next_branch :=21
=======
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=6
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=6
=======node_fun:match_refs=========
node:= 2 
 	next_branch :=15
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
node:= 3 
 	next_branch :=4
	next_branch :=7
node:= 4 
 	next_branch :=20
node:= 5 
<<<<<<< HEAD
 	next_branch :=8
	next_branch :=6
=======
 	next_branch :=6
	next_branch :=8
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
node:= 6 
 	next_branch :=7
node:= 7 
 	next_branch :=5
	next_branch :=8
node:= 8 
 	next_branch :=9
	next_branch :=11
node:= 9 
 	next_branch :=10
	next_branch :=18
node:= 10 
 	next_branch :=19
node:= 11 
 	next_branch :=12
<<<<<<< HEAD
	next_branch :=14
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
node:= 12 
 	next_branch :=13
	next_branch :=14
node:= 13 
 	next_branch :=19
node:= 14 
 	next_branch :=16
node:= 15 
 	next_branch :=16
node:= 16 
 	next_branch :=15
	next_branch :=17
node:= 17 
 	next_branch :=18
node:= 18 
 	next_branch :=19
node:= 19 
 	next_branch :=20
node:= 20 
 	next_branch :=21
node:= 21 
 	next_branch :=3
<<<<<<< HEAD
	next_branch :=22
node:= 22 
 	next_branch :=23
	next_branch :=24
node:= 23 
 	next_branch :=26
node:= 24 
 	next_branch :=25
	next_branch :=26
node:= 25 
 	next_branch :=26
node:= 26 
 	next_branch :=28
node:= 27 
 	next_branch :=28
node:= 28 
 	next_branch :=27
	next_branch :=29
node:= 29 
 	next_branch :=31
node:= 30 
 	next_branch :=31
node:= 31 
 	next_branch :=30
	next_branch :=32
=======
	next_branch :=16
=======node_fun:make_linked_ref=========
=======node_fun:tail_link_ref=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:alloc_ref=========
=======node_fun:alloc_ref_with_prefix=========
=======node_fun:find_ref_by_name=========
node:= 2 
 	next_branch :=5
node:= 3 
 	next_branch :=6
	next_branch :=4
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=3
	next_branch :=6
=======node_fun:free_refs=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=======node_fun:free_ref=========
node:= 2 
 	next_branch :=4
	next_branch :=3
node:= 3 
 	next_branch :=4
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 18 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
# VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
# .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
# .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
# .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
# .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
# .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
=============== *this point analyzable =================
_1 = get_local_heads ();
========================================================
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
=============== *this point analyzable =================
free_refs (_7);
========================================================
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
_1 = get_local_heads ();
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
========================================================
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
_37 = strcmp (_36, dst_name_22);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
_37 = strcmp (_36, dst_name_22);
========================================================
<<<<<<< HEAD
=======
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
_37 = strcmp (_36, dst_name_22);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
len_47 = strlen (dst_name_22);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
=============== *this point analyzable =================
hashcpy (_7, _6);
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
========================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
========================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
ref_50 = calloc (1, _49);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
========================================================
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
========================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
memcpy (_53, dst_name_22, len_47);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
hashcpy (_31, _30);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
========================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
hashcpy (_31, _30);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
========================================================
 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
=============== *this point analyzable =================
free_ref (ref_56);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
free_ref (ref_54);
========================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
=============== *this point analyzable =================
free_ref (_1);
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 9 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1050221684
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1500030915 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1836393116
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 858344074 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1500030915 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 858344074 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1050221684
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1220857383 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1836393116
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1086553830 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1220857383 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 1086553830 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1050221684
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 461322795 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 1836393116
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1208769440 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 461322795 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1208769440 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1050221684
=======
dot graph arrowdot graph start relate for1ID : 1836393116
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1804030134 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 919631723 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1050221684
=======
dot graph arrowdot graph start relate for1ID : 1836393116
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 970038687 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 1593426818 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1050221684
=======
dot graph arrowdot graph start relate for1ID : 1836393116
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 744585745 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1091315843 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 988531808
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1731788944 stmt(free) :free (_2);
=======
dot graph start relate form ID : 924098099
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1629942882 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1731788944 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1629942882 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 988531808
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1145728107 stmt(free) :free (_3);
=======
dot graph start relate form ID : 924098099
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 362785233 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1145728107 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 362785233 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 988531808
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1106676640 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 924098099
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1319603328 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1106676640 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1319603328 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 988531808
=======
dot graph arrowdot graph start relate for1ID : 924098099
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1863882929 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1293303193 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 988531808
=======
dot graph arrowdot graph start relate for1ID : 924098099
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 1930593218 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 372965455 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 988531808
=======
dot graph arrowdot graph start relate for1ID : 924098099
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 644427797 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 398683974 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1405079620
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1252006432 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1418516718
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1973138735 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1252006432 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1973138735 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1405079620
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1295380870 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1418516718
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 705721224 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1295380870 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 705721224 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1405079620
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 502447570 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 1418516718
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1862357084 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 502447570 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1862357084 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1405079620
=======
dot graph arrowdot graph start relate for1ID : 1418516718
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 465010459 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 527029341 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1405079620
=======
dot graph arrowdot graph start relate for1ID : 1418516718
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 570887295 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 1554721375 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1405079620
=======
dot graph arrowdot graph start relate for1ID : 1418516718
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1603193248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 939355666 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 2145716117
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1703582844 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1877155993
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 684988114 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1703582844 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 684988114 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 2145716117
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1067782540 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1877155993
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2129506592 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1067782540 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 2129506592 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 2145716117
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1158497342 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 1877155993
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1284613478 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1158497342 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1284613478 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 2145716117
=======
dot graph arrowdot graph start relate for1ID : 1877155993
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1850740188 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 921748908 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 2145716117
=======
dot graph arrowdot graph start relate for1ID : 1877155993
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 1447662138 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 1326618610 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 2145716117
=======
dot graph arrowdot graph start relate for1ID : 1877155993
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 353884020 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 2125484847 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

<<<<<<< HEAD
dot graph arrowsubgraph cluster_1077975176 dot graph subgraph  free_ref (_1);
=======
dot graph arrowsubgraph cluster_207262292 dot graph subgraph  free_ref (_1);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

<<<<<<< HEAD
dot graph arrowsubgraph cluster_272057997 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1050221684
from free_ref basic block 3dot graph end relate end

subgraph cluster_1168351087 dot graph subgraph  start ID : 744585745 stmt(relate) ， Tree ID : 1050221684 : _3 = ref_5(D)->symref;
=======
dot graph arrowsubgraph cluster_1971977533 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1836393116
from free_ref basic block 3dot graph end relate end

subgraph cluster_1730259130 dot graph subgraph  start ID : 1091315843 stmt(relate) ， Tree ID : 1836393116 : _3 = ref_5(D)->symref;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

<<<<<<< HEAD
dot graph start relate for1ID : 988531808
from free_ref basic block 3dot graph end relate end

subgraph cluster_2128196860 dot graph subgraph  start ID : 644427797 stmt(relate) ， Tree ID : 988531808 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1405079620
from free_ref basic block 3dot graph end relate end

subgraph cluster_1772088912 dot graph subgraph  start ID : 1603193248 stmt(relate) ， Tree ID : 1405079620 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2145716117
from free_ref basic block 3dot graph end relate end

subgraph cluster_241724822 dot graph subgraph  start ID : 353884020 stmt(relate) ， Tree ID : 2145716117 : _3 = ref_5(D)->symref;
=======
dot graph start relate for1ID : 924098099
from free_ref basic block 3dot graph end relate end

subgraph cluster_2043655408 dot graph subgraph  start ID : 398683974 stmt(relate) ， Tree ID : 924098099 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1418516718
from free_ref basic block 3dot graph end relate end

subgraph cluster_682837960 dot graph subgraph  start ID : 939355666 stmt(relate) ， Tree ID : 1418516718 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1877155993
from free_ref basic block 3dot graph end relate end

subgraph cluster_669329313 dot graph subgraph  start ID : 2125484847 stmt(relate) ， Tree ID : 1877155993 : _3 = ref_5(D)->symref;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;33m =======POP node_fun stack:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;33m =======POP node_fun stack:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
is Other function 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start local_refs_12 = (struct ref *) _2;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_56 = PHI <local_refs_12(26), next_57(27)>
lto1: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 28: ref_56 = PHI <local_refs_12(26), next_57(27)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph stmt start ref_56 = PHI <local_refs_12(26), next_57(27)>
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start ref_56 = PHI <local_refs_12(26), next_57(27)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---get_local_heads-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 28: if (ref_56 != 0B)
=======
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph stmt start if (ref_56 != 0B)
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start if (ref_56 != 0B)
=======
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 27: free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 27dot graph target basicblock en1

dot graph stmt start free_ref (ref_56);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
=======
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 442036007
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1428635398 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1104941200
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1602469683 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1428635398 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1602469683 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 442036007
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1211763509 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1104941200
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 115272483 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1211763509 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 115272483 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 442036007
from free_ref basic block 3dot graph end relate end
=======
dot graph start relate form ID : 1104941200
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 48773395 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 48773395 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1104941200
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 379084135 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1104941200
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1745215365 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph relate stmt start ID : 1186621753 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

<<<<<<< HEAD
dot graph target color descgreendot graph target color desend
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1104941200
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 411558629 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph relate stmt start ID : 1186621753 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 269683559
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 796068805 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1698687463
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 891034910 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 796068805 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 891034910 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 269683559
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 184866212 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1698687463
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 784524084 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 184866212 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 784524084 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 269683559
from free_ref basic block 3dot graph end relate end
=======
dot graph start relate form ID : 1698687463
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2097371437 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2097371437 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1698687463
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 162067980 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1698687463
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 610179171 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph relate stmt start ID : 1376360199 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

<<<<<<< HEAD
dot graph target color descgreendot graph target color desend
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1698687463
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 655609013 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph relate stmt start ID : 1376360199 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 27: next_57 = ref_56->next;
=======
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 27dot graph target basicblock en1
=======
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_2024425065 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph start relate for1ID : 1104941200
from free_ref basic block 3dot graph end relate end

subgraph cluster_1137208512 dot graph subgraph  start ID : 411558629 stmt(relate) ， Tree ID : 1104941200 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1698687463
from free_ref basic block 3dot graph end relate end

subgraph cluster_62846741 dot graph subgraph  start ID : 655609013 stmt(relate) ， Tree ID : 1698687463 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start next_57 = ref_56->next;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 21: src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 21dot graph target basicblock en1
=======
======================================================================
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start src_21 = PHI <local_refs_12(2), src_34(20)>
_1 = get_local_heads ();
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_816297083 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_866880857 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_747834855 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_798320028 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_4010687 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1669583764 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2124938638 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2129495535 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 20: src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 20dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start src_34 = src_21->next;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start dst_peer_32->peer_ref = src_21;
_1 = get_local_heads ();
dot graph stmt end
=======
======================================================================
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1876846056 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1949432523 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1712271017 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1773017816 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_484786835 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_234116682 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_730475368 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2087256519 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 18: _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 18dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _30 = &src_21->new_sha1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
======================================================================
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_349389165 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_779248764 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_318857006 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2094604530 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1190807393 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2017544469 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_838155793 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start hashcpy (_31, _30);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 3dot graph target basicblock en1
=======
======================================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _23 = src_21->peer_ref;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1975331477 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1967432258 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 3: dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 3dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start dst_name_22 = &src_21->name;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start len_47 = strlen (dst_name_22);
_1 = get_local_heads ();
dot graph stmt end
=======
======================================================================
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph stmt end

<<<<<<< HEAD
this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1000223773 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_438027000 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 14: _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _48 = len_47;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _49 = _48 + 81;
_1 = get_local_heads ();
dot graph stmt end
=======
======================================================================
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ref_50 = calloc (1, _49);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc

======================================================================
[40;31m    collect Stmt in loop [0m
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
_70 = ref_50;
lto1: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _70 = ref_50;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _70 = ref_50;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _70 = ref_50;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _46 = _70;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_71 = _46;
lto1: warning: use location
=======
 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_475557624 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_877165190 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1575235512 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_538404365 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1693462274 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_294632721 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1286239220 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_344298654 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_298643409 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f1f7b695540
    type <array_type 0x7f1f7b685e70
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        QI size <integer_cst 0x7f1f7bb65ca8 8> unit-size <integer_cst 0x7f1f7bb65cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f1f7b685dc8 type <integer_type 0x7f1f7bb7a000 sizetype>
            DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65be8 0> max <integer_cst 0x7f1f7bb65be8 0>>
        pointer_to_this <pointer_type 0x7f1f7b68a348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 321753644 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 280655296 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 537701744 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 123702519 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1992926313 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 608489355 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 79559348 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 893711281 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 548262226 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 428948513 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1672960045 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_867119232 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_376069396 dot graph subgraph  start ID : 1992926313 stmt(relate) ， Tree ID : 808339336 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_716283790 dot graph subgraph  start ID : 428948513 stmt(relate) ， Tree ID : 163235912 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1214225189 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 544131619 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 557128663 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 66965314 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 982158619 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 944130505 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 409910483 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1571090652 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 490109131 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 704543204 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_709846225 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_834407785 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1003186613 dot graph subgraph  start ID : 982158619 stmt(relate) ， Tree ID : 737180053 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1518185561 dot graph subgraph  start ID : 704543204 stmt(relate) ， Tree ID : 1032686287 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2055887306 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1279863948 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1129284575 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 71639570 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1888353303 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 965350851 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 289131881 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1637792436 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 490827248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1156251113 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1208843923
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2013861832 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1207111038 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1893431166 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1080603373 dot graph subgraph  start ID : 1888353303 stmt(relate) ， Tree ID : 1283841909 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1208843923
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1751242657 dot graph subgraph  start ID : 2013861832 stmt(relate) ， Tree ID : 1208843923 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 585917628 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1335762469 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2091699193 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 995828111 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 759369474 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1700371316 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1469215699 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1268732461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 556074281 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 839917612 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 277410242 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1557274190 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 821717118 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 819960841 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1298143846 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2030561041 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1785311692 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1587275727 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1520869829 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_128655293 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_596043193 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1387248014 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 320367739 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 939525341 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 645066893 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1467936427 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1525442969 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1412151972 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 373787433 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 592715189 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1846476648 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2074158749 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2061930888 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 754364852 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1245135703 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 175181925 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1502686123 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 654926246 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_996899043 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_175163316 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1953070092 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_879976436 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1960475008 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1392862171 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_253362618 dot graph subgraph  start ID : 1525442969 stmt(relate) ， Tree ID : 341990711 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2089130301 dot graph subgraph  start ID : 2061930888 stmt(relate) ， Tree ID : 1980829363 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1988905364 dot graph subgraph  start ID : 654926246 stmt(relate) ， Tree ID : 482749382 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1640610632
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1277412985 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1640610632
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 183412428 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1640610632
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1960978371 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1640610632
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 69454678 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1640610632
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 828479321 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281431151
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1594897647 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1281431151
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 661825036 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281431151
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 546099475 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281431151
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1968685080 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281431151
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1254540225 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_245092476 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1895360181 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1640610632
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1168987465 dot graph subgraph  start ID : 828479321 stmt(relate) ， Tree ID : 1640610632 : *tail_6(D) = _3;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1281431151
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1212817937 dot graph subgraph  start ID : 1254540225 stmt(relate) ， Tree ID : 1281431151 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_230625916 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1923352318 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_310469993 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_405807841 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1278554793 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_965396239 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1402706885
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1453718109 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1402706885
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 770982683 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1402706885
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 135199673 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1266709469
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 16361206 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 16361206 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1266709469
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 388562291 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 388562291 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1266709469
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1208356123 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1208356123 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1266709469
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2005266571 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1266709469
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2029172923 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1266709469
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 338285460 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 41195351
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1842667647 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1842667647 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 41195351
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 407740138 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 407740138 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 41195351
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 869674672 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 869674672 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41195351
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 976615150 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41195351
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2002637785 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 41195351
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1531499709 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 1522714625
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1823839218 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1767807101 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1571715751 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1807543752 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 833141391 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1802341667 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 638556286
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1583412422 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 714483567 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2109007623 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1463372746 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 20718028 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 732506658 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1598572419 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1287427497 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_748867864 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1402706885
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1987134711 dot graph subgraph  start ID : 135199673 stmt(relate) ， Tree ID : 1402706885 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1266709469
from free_ref basic block 3dot graph end relate end

subgraph cluster_348299972 dot graph subgraph  start ID : 338285460 stmt(relate) ， Tree ID : 1266709469 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 41195351
from free_ref basic block 3dot graph end relate end

subgraph cluster_606650787 dot graph subgraph  start ID : 1531499709 stmt(relate) ， Tree ID : 41195351 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1522714625
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1868823986 dot graph subgraph  start ID : 1823839218 stmt(relate) ， Tree ID : 1522714625 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 638556286
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_686585432 dot graph subgraph  start ID : 1583412422 stmt(relate) ， Tree ID : 638556286 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_647846138 dot graph subgraph  start ID : 732506658 stmt(relate) ， Tree ID : 60665861 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1564007985
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1094325570 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1564007985
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1517520811 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1564007985
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 393139487 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 949479708
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 901536872 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 901536872 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 949479708
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1915854113 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1915854113 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 949479708
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 625835278 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 625835278 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 949479708
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1540093158 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 949479708
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1536177566 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 949479708
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 50067381 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1200153262
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 221835309 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 221835309 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1200153262
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1852409049 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1852409049 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1200153262
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 636082036 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 636082036 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1200153262
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1365446693 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1200153262
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1913074910 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1200153262
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1350565603 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 1326970668
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1228964008 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2059477326 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 680052779 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 511227481 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 660861543 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 519703842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1371283631
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 859527453 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1546112886 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1915358469 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1805052166 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 492954808 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1285395632 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_50708006 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1442434516 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_39448856 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1564007985
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1966562119 dot graph subgraph  start ID : 393139487 stmt(relate) ， Tree ID : 1564007985 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 949479708
from free_ref basic block 3dot graph end relate end

subgraph cluster_2068269794 dot graph subgraph  start ID : 50067381 stmt(relate) ， Tree ID : 949479708 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1200153262
from free_ref basic block 3dot graph end relate end

subgraph cluster_1579542014 dot graph subgraph  start ID : 1350565603 stmt(relate) ， Tree ID : 1200153262 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1326970668
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1355256037 dot graph subgraph  start ID : 1228964008 stmt(relate) ， Tree ID : 1326970668 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1371283631
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2118337176 dot graph subgraph  start ID : 859527453 stmt(relate) ， Tree ID : 1371283631 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_632211629 dot graph subgraph  start ID : 1285395632 stmt(relate) ， Tree ID : 241044181 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1577091347
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1823262577 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1577091347
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1268293665 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1577091347
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 795054392 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1588853839
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 471375621 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 471375621 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1588853839
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2122025061 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2122025061 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1588853839
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 670334199 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 670334199 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1588853839
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1842659252 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1588853839
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2034018739 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1588853839
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1350386978 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 206403085
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 547396634 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 547396634 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 206403085
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1870090821 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1870090821 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 206403085
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1065930539 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1065930539 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 206403085
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1814908965 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 206403085
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2111135002 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 206403085
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 464559777 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1582783786
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1768703520 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1582783786
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 957514585 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1582783786
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 720695770 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1819411526
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 252465454 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1638489997 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 173251600 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 192202992 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 846262387 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 144105128 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 760144626
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 824414621 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2092708287 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1070924478 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1408737896 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 416600260 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1045465891 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_2079072095 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_111775864 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_932000983 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1577091347
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1281975426 dot graph subgraph  start ID : 795054392 stmt(relate) ， Tree ID : 1577091347 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1588853839
from free_ref basic block 3dot graph end relate end

subgraph cluster_318178950 dot graph subgraph  start ID : 1350386978 stmt(relate) ， Tree ID : 1588853839 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 206403085
from free_ref basic block 3dot graph end relate end

subgraph cluster_1479397617 dot graph subgraph  start ID : 464559777 stmt(relate) ， Tree ID : 206403085 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1582783786
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1004582599 dot graph subgraph  start ID : 720695770 stmt(relate) ， Tree ID : 1582783786 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1819411526
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1384109489 dot graph subgraph  start ID : 252465454 stmt(relate) ， Tree ID : 1819411526 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 760144626
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1146822934 dot graph subgraph  start ID : 824414621 stmt(relate) ， Tree ID : 760144626 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_968233953 dot graph subgraph  start ID : 1045465891 stmt(relate) ， Tree ID : 1967367705 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1848669266
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 582123072 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 589453825
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 658700203 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 589453825
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1302818842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 589453825
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 261381704 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 589453825
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 911165657 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 589453825
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2062963468 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 107682813 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 598650440 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1228522386 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 932097434 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 874520526 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1048406444
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 877322073 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 877322073 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1048406444
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1945445005 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1945445005 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1048406444
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 309660692 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 309660692 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1048406444
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1293922333 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1048406444
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 843427248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1048406444
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 241249140 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1405698198
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1775428231 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1775428231 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1405698198
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1523224566 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1523224566 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1405698198
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1723877148 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1723877148 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1405698198
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1107342201 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1405698198
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 380323517 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1405698198
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 960502989 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 106681487
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1348557470 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 106681487
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 661688607 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 106681487
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 688804560 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1938011295 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1320388810 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1991623402 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1848669266
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_51909351 dot graph subgraph  start ID : 582123072 stmt(relate) ， Tree ID : 1848669266 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 589453825
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_84070820 dot graph subgraph  start ID : 2062963468 stmt(relate) ， Tree ID : 589453825 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1907103223 dot graph subgraph  start ID : 874520526 stmt(relate) ， Tree ID : 1084417258 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1048406444
from free_ref basic block 3dot graph end relate end

subgraph cluster_1951781053 dot graph subgraph  start ID : 241249140 stmt(relate) ， Tree ID : 1048406444 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1405698198
from free_ref basic block 3dot graph end relate end

subgraph cluster_1168488078 dot graph subgraph  start ID : 960502989 stmt(relate) ， Tree ID : 1405698198 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 106681487
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2014786036 dot graph subgraph  start ID : 688804560 stmt(relate) ， Tree ID : 106681487 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 402947845
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 249526816 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1277468372 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1297933260 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1676721896 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1075429729 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1607593953 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 799399822
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 823160581 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 81375131 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1546801561 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1224584011 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1805252279 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 506660114 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1604907528
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 618271620 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 618271620 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1604907528
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 613341601 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 613341601 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1604907528
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 805981350 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 805981350 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1604907528
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1279960227 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1604907528
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1302146161 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1604907528
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 596508997 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 452865390
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1146285916 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1146285916 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 452865390
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 648418349 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 648418349 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 452865390
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 536936210 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 536936210 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 452865390
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 905905491 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 452865390
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 452715754 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 452865390
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1705424288 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 773207879
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 855663599 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 773207879
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1954951104 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 773207879
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1572607701 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 2133131971
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1105400717 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1061078052 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 565511022 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1925006531 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 832451382 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 266870467 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101845949
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2006381662 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1664150294 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 738429409 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 948878358 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 134938266 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1351771010 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1754859708 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1414898494 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_506433524 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 402947845
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_203885057 dot graph subgraph  start ID : 249526816 stmt(relate) ， Tree ID : 402947845 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 799399822
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1867763884 dot graph subgraph  start ID : 823160581 stmt(relate) ， Tree ID : 799399822 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1652719440 dot graph subgraph  start ID : 506660114 stmt(relate) ， Tree ID : 1848843093 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1604907528
from free_ref basic block 3dot graph end relate end

subgraph cluster_852303406 dot graph subgraph  start ID : 596508997 stmt(relate) ， Tree ID : 1604907528 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 452865390
from free_ref basic block 3dot graph end relate end

subgraph cluster_257216446 dot graph subgraph  start ID : 1705424288 stmt(relate) ， Tree ID : 452865390 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 773207879
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_411141283 dot graph subgraph  start ID : 1572607701 stmt(relate) ， Tree ID : 773207879 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 2133131971
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1305019160 dot graph subgraph  start ID : 1105400717 stmt(relate) ， Tree ID : 2133131971 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1101845949
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1962640734 dot graph subgraph  start ID : 2006381662 stmt(relate) ， Tree ID : 1101845949 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1184349162 dot graph subgraph  start ID : 1351771010 stmt(relate) ， Tree ID : 1491454478 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_13199112 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1770108190 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_609473215 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_2146331083 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;33m =======POP node_fun stack:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target line desend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
<<<<<<< HEAD
dot graph target loc en1

dot graph target line desc form basic block 14: _71 = _46;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _71 = _46;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _71 = _46;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend
=======
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start local_refs_12 = (struct ref *) _2;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1711319165
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1059925488 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1059925488 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1711319165
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1293536281 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1293536281 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1711319165
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1488842048 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1488842048 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1892376870
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1560406748 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1560406748 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
dot graph entry main
dot graph target entry end

_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _1 = get_local_heads ();
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1853255936 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d5e8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 999344975
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 2066862936 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1460631996
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 266759821 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 266759821 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1460631996
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 425812812 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 425812812 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1460631996
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1664517054 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1664517054 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460631996
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2134523705 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460631996
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2078532252 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460631996
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 369336812 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 244256503
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 342189887 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 342189887 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 1674355973 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 59413589 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1526539049 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1687555085 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1829521779 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 2136012265 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1686402520 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 244256503
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 410063391 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 1699847782
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 598844360 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1041206182 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 343737582 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1116522773 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 241462596 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 320400099 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1703599672
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2020900351 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1726672640 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2105214280 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 954871314 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1039820988 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 224490453 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1380684126
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 556854394 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1380684126
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 211530510 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1380684126
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1311732731 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_926191207 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 999344975
from free_refs basic block 3dot graph end relate end

subgraph cluster_455787013 dot graph subgraph  start ID : 2066862936 stmt(relate) ， Tree ID : 999344975 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1460631996
from free_ref basic block 3dot graph end relate end

subgraph cluster_1653922618 dot graph subgraph  start ID : 369336812 stmt(relate) ， Tree ID : 1460631996 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 244256503
from match_refs basic block 14dot graph end relate end

subgraph cluster_453063532 dot graph subgraph  start ID : 410063391 stmt(relate) ， Tree ID : 244256503 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 1699847782
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_515200602 dot graph subgraph  start ID : 598844360 stmt(relate) ， Tree ID : 1699847782 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1703599672
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1032978020 dot graph subgraph  start ID : 2020900351 stmt(relate) ， Tree ID : 1703599672 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1035492025
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2140618617 dot graph subgraph  start ID : 224490453 stmt(relate) ， Tree ID : 1035492025 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1380684126
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_197238733 dot graph subgraph  start ID : 1311732731 stmt(relate) ， Tree ID : 1380684126 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d828
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7c40dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f1f7b6956f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1021506637
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1679537489 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1679537489 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 607302124 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 573870771 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 130898202 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 163418149 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1615076953 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 474635784 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1279940922 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1021506637
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 1856539549 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 795035884
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1153357625 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1830527909 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 732546617 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 772655838 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 637915575 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1772367606 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 814925206
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 997146291 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1208676801 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1182848785 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1107929559 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1664463814 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 689287755 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1560993091
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 32180768 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1560993091
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1722265775 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1560993091
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1554128060 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 229419502
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 596288764 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1086181902
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 836721626 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 836721626 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1086181902
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1170159535 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1170159535 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1086181902
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1217080104 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1217080104 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1086181902
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1000139775 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1086181902
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 637752840 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1086181902
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1691715888 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_132597049 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1021506637
from match_refs basic block 14dot graph end relate end

subgraph cluster_346808742 dot graph subgraph  start ID : 1856539549 stmt(relate) ， Tree ID : 1021506637 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 795035884
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_339268124 dot graph subgraph  start ID : 1153357625 stmt(relate) ， Tree ID : 795035884 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 814925206
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1285954675 dot graph subgraph  start ID : 997146291 stmt(relate) ， Tree ID : 814925206 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 181738352
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1161733948 dot graph subgraph  start ID : 689287755 stmt(relate) ， Tree ID : 181738352 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1560993091
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_22312386 dot graph subgraph  start ID : 1554128060 stmt(relate) ， Tree ID : 1560993091 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 229419502
from free_refs basic block 3dot graph end relate end

subgraph cluster_2018501292 dot graph subgraph  start ID : 596288764 stmt(relate) ， Tree ID : 229419502 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1086181902
from free_ref basic block 3dot graph end relate end

subgraph cluster_1934389787 dot graph subgraph  start ID : 1691715888 stmt(relate) ， Tree ID : 1086181902 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d678
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f1f7b695678>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 660227961
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1643385250 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1643385250 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 784052430 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 531344015 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1825123603 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1992729232 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1714192800 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 785569514 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1509709398 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 660227961
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 255996908 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 199078958
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1541890167 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1753207018 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1771309669 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 427067800 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 691905272 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 460547647 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1978262683
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1597227335 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 87496528 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1453217617 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1593284472 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 434305270 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1792485741 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 731755499
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1596039218 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 731755499
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1814798127 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 731755499
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 602773144 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1382945357
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 327542441 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 327542441 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 98674746 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 19514140 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 858886456 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1923798349 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 2012243372 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 425595609 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 561884216 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1382945357
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 1374469122 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 681592517
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 760963174 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 512371552 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 366686544 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 392701662 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 939439352 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1058591817 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 768875641
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 853249310 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 166453085 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 476679568 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 125827514 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1759737557 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 910984838 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f1f7c40db40 remote_tail
    type <pointer_type 0x7f1f7b685738
        type <pointer_type 0x7f1f7b685690 type <record_type 0x7f1f7b6855e8 ref>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b685738>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1918313256
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 344009409 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1918313256
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 359540408 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1918313256
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1585627735 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_946782553 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1742485766 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph start relate for1ID : 660227961
from match_refs basic block 14dot graph end relate end

subgraph cluster_1913170176 dot graph subgraph  start ID : 255996908 stmt(relate) ， Tree ID : 660227961 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 199078958
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1045457299 dot graph subgraph  start ID : 1541890167 stmt(relate) ， Tree ID : 199078958 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1978262683
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1761999906 dot graph subgraph  start ID : 1597227335 stmt(relate) ， Tree ID : 1978262683 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1460687423
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_624572985 dot graph subgraph  start ID : 1792485741 stmt(relate) ， Tree ID : 1460687423 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 731755499
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_821772001 dot graph subgraph  start ID : 602773144 stmt(relate) ， Tree ID : 731755499 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1382945357
from match_refs basic block 14dot graph end relate end

subgraph cluster_1626759630 dot graph subgraph  start ID : 1374469122 stmt(relate) ， Tree ID : 1382945357 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 681592517
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1050168594 dot graph subgraph  start ID : 760963174 stmt(relate) ， Tree ID : 681592517 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 768875641
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1383656217 dot graph subgraph  start ID : 853249310 stmt(relate) ， Tree ID : 768875641 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 820093545
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_853745104 dot graph subgraph  start ID : 910984838 stmt(relate) ， Tree ID : 820093545 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1918313256
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1731761111 dot graph subgraph  start ID : 1585627735 stmt(relate) ， Tree ID : 1918313256 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 2144619391
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1622620746 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1622620746 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 96649015 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 363822287 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 2015322408 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1036088368 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1422414104 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 721088070 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1425271408 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 2144619391
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 95024002 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 887541155
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1901950976 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 499795065 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 665452166 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2139164772 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 843804474 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1024992574 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 220851516
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1577308860 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1342995388 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 688560678 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 234510950 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1967568373 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1510332679 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1861270580
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 870253319 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1861270580
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 746505248 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1861270580
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 567532037 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 454530782
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 743640991 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 42669135
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 551179798 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 551179798 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 42669135
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1107463279 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1107463279 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 42669135
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2057991543 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2057991543 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42669135
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1587268166 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42669135
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 382393735 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 42669135
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 631595966 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_865055926 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 2144619391
from match_refs basic block 14dot graph end relate end

subgraph cluster_477417737 dot graph subgraph  start ID : 95024002 stmt(relate) ， Tree ID : 2144619391 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 887541155
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1519137121 dot graph subgraph  start ID : 1901950976 stmt(relate) ， Tree ID : 887541155 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 220851516
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_619523254 dot graph subgraph  start ID : 1577308860 stmt(relate) ， Tree ID : 220851516 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 619994692
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_698269254 dot graph subgraph  start ID : 1510332679 stmt(relate) ， Tree ID : 619994692 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1861270580
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2018932186 dot graph subgraph  start ID : 567532037 stmt(relate) ， Tree ID : 1861270580 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 454530782
from free_refs basic block 3dot graph end relate end

subgraph cluster_1284975420 dot graph subgraph  start ID : 743640991 stmt(relate) ， Tree ID : 454530782 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 42669135
from free_ref basic block 3dot graph end relate end

subgraph cluster_689950378 dot graph subgraph  start ID : 631595966 stmt(relate) ， Tree ID : 42669135 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d7e0
    type <pointer_type 0x7f1f7b6850a8
        type <pointer_type 0x7f1f7b685000 type <integer_type 0x7f1f7b67dbd0 char>
            unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b6850a8>>
        unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f1f7b6956d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================== pre trace ptable ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :888========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 715253012
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 162484346 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 162484346 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :890========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :890========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :891========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
is Other function match_refs
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1016989989
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1282855704 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1282855704 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_460156158 dot graph subgraph  if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1899912341 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d6c0
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f1f7b68c2d0
    type <array_type 0x7f1f7b68adc8
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        BLK
        size <integer_cst 0x7f1f7b674948 constant 432>
        unit-size <integer_cst 0x7f1f7b674990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f1f7b68ad20 type <integer_type 0x7f1f7bb7a000 sizetype>
            DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65be8 0> max <integer_cst 0x7f1f7b674978 53>>
        pointer_to_this <pointer_type 0x7f1f7b68ae70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d750
    type <pointer_type 0x7f1f7b687348
        type <record_type 0x7f1f7b6872a0 FILE BLK
            size <integer_cst 0x7f1f7b674870 constant 1728>
            unit-size <integer_cst 0x7f1f7b674930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6871f8 fields <field_decl 0x7f1f7b688a18 _flags> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b687348>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68abd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f1f7b6956a8>
 <ssa_name 0x7f1f7bb6d750
    type <pointer_type 0x7f1f7b687348
        type <record_type 0x7f1f7b6872a0 FILE BLK
            size <integer_cst 0x7f1f7b674870 constant 1728>
            unit-size <integer_cst 0x7f1f7b674930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6871f8 fields <field_decl 0x7f1f7b688a18 _flags> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b687348>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68abd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f1f7b6956a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d750
    type <pointer_type 0x7f1f7b687348
        type <record_type 0x7f1f7b6872a0 FILE BLK
            size <integer_cst 0x7f1f7b674870 constant 1728>
            unit-size <integer_cst 0x7f1f7b674930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6871f8 fields <field_decl 0x7f1f7b688a18 _flags> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b687348>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68abd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f1f7b6956a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1340978094 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1011335956 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d750
    type <pointer_type 0x7f1f7b687348
        type <record_type 0x7f1f7b6872a0 FILE BLK
            size <integer_cst 0x7f1f7b674870 constant 1728>
            unit-size <integer_cst 0x7f1f7b674930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6871f8 fields <field_decl 0x7f1f7b688a18 _flags> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b687348>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b68abd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f1f7b6956a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
dot graph entry main
dot graph target entry end

free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (_7);
free_refs (_7);
dot graph stmt end

dot graph stmt start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 859891972
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1251485989 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 451120474
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1242285708 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1242285708 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 451120474
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1883081955 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1883081955 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 451120474
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1316176400 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1316176400 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 451120474
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1719703445 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 451120474
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1254735429 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 451120474
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1935699654 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
dot graph entry main
dot graph target entry end

_7 = remote_refs;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _7 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _3 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
free_refs (_7);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 270489051
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1126183967 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1126183967 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 1073191426 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 960439430 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1841436980 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1235675773 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1080215020 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 52309723 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 2018154812 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 270489051
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 395502351 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1099226793
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 887661153 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1508992895 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1618438075 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1683983432 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 517780597 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 769263386 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1678358056
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2144139590 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1007991899 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1130101263 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1214243822 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1459112373 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 224903323 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 949842129
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 627805126 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 949842129
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1944606768 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 949842129
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 57093910 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :free_refs
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph entry main
dot graph target entry end

_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _5 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start if (_5 == 0B)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_416021132 dot graph subgraph  free_refs (_7);
_7 = remote_refs;
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_67612172 dot graph subgraph  _7 = remote_refs;
_7 = remote_refs;
dot graph subgrapend

dot graph start relate for1ID : 859891972
from free_refs basic block 3dot graph end relate end

subgraph cluster_1183277878 dot graph subgraph  start ID : 1251485989 stmt(relate) ， Tree ID : 859891972 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 451120474
from free_ref basic block 3dot graph end relate end

subgraph cluster_1489212559 dot graph subgraph  start ID : 1935699654 stmt(relate) ， Tree ID : 451120474 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 270489051
from match_refs basic block 14dot graph end relate end

subgraph cluster_1028051602 dot graph subgraph  start ID : 395502351 stmt(relate) ， Tree ID : 270489051 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 1099226793
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_877231210 dot graph subgraph  start ID : 887661153 stmt(relate) ， Tree ID : 1099226793 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1678358056
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_577404684 dot graph subgraph  start ID : 2144139590 stmt(relate) ， Tree ID : 1678358056 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2110241480
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2108266622 dot graph subgraph  start ID : 224903323 stmt(relate) ， Tree ID : 2110241480 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 949842129
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_929540933 dot graph subgraph  start ID : 57093910 stmt(relate) ， Tree ID : 949842129 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f1f7b6956c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_19>
_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:match_refs========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;33m =======POP node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_448075848 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_356285326 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2028767727 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1335737001 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2034643382 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1390276974 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_806691429 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1571143166 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1908057571 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1575954815 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1567799108 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_30783213 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1538712648 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_428307359 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1160884476 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_605472822 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1887419733 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1385787799 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1555314951 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_367741211 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1182910920 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1612408862 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_783762343 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1250523092 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_648203092 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_125491254 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_131091046 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1525434302 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_702895938 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_91874020 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_307491587 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1150971786 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_448159346 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_188775666 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_339225140 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_335319080 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f1f7b695540
    type <array_type 0x7f1f7b685e70
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        QI size <integer_cst 0x7f1f7bb65ca8 8> unit-size <integer_cst 0x7f1f7bb65cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f1f7b685dc8 type <integer_type 0x7f1f7bb7a000 sizetype>
            DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65be8 0> max <integer_cst 0x7f1f7bb65be8 0>>
        pointer_to_this <pointer_type 0x7f1f7b68a348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1145916569 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1906462246 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1339626563 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 574387736 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1326777707 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2113100384 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1755085066 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 383810605 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 571089558 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1495021151 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1769598405 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2126404510 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1862762362 dot graph subgraph  start ID : 1992926313 stmt(relate) ， Tree ID : 808339336 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_805025677 dot graph subgraph  start ID : 428948513 stmt(relate) ， Tree ID : 163235912 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1591329724 dot graph subgraph  start ID : 1326777707 stmt(relate) ， Tree ID : 1579052640 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_499041058 dot graph subgraph  start ID : 1495021151 stmt(relate) ， Tree ID : 1370409777 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 92049168 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 624532312 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 39156167 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1617483470 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1327428251 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1924975057 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 330916389 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 579189534 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2113750724 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 670141529 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_914508614 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1545319716 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1816058098 dot graph subgraph  start ID : 982158619 stmt(relate) ， Tree ID : 737180053 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_673487213 dot graph subgraph  start ID : 704543204 stmt(relate) ， Tree ID : 1032686287 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_737462632 dot graph subgraph  start ID : 1327428251 stmt(relate) ， Tree ID : 2055548769 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_242962187 dot graph subgraph  start ID : 670141529 stmt(relate) ， Tree ID : 131030187 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 208578923 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1607866338 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 344199366 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 779668482 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 955403842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 758589344 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 670682556 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 771339800 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 202435420 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1169723614 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2113797771
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 679404921 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_294484588 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1794255927 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_718561088 dot graph subgraph  start ID : 1888353303 stmt(relate) ， Tree ID : 1283841909 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1208843923
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1911968058 dot graph subgraph  start ID : 2013861832 stmt(relate) ， Tree ID : 1208843923 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_974200530 dot graph subgraph  start ID : 955403842 stmt(relate) ， Tree ID : 2107872409 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2113797771
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_849591276 dot graph subgraph  start ID : 679404921 stmt(relate) ， Tree ID : 2113797771 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1428780810 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1655726543 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1975258449 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 195805776 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1053562612 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 869292989 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1791025244 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1886795086 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 722074261 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1751414005 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2095374010 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 727558844 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1137860794 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2061927495 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1486148188 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1808543350 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_685783647 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1688583608 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_830783317 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1365188569 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1983068196 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_477555596 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2083749657 dot graph subgraph  start ID : 1525442969 stmt(relate) ， Tree ID : 341990711 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1747552606 dot graph subgraph  start ID : 2061930888 stmt(relate) ， Tree ID : 1980829363 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1451756126 dot graph subgraph  start ID : 654926246 stmt(relate) ， Tree ID : 482749382 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_785857285 dot graph subgraph  start ID : 1053562612 stmt(relate) ， Tree ID : 1305116919 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1289528425 dot graph subgraph  start ID : 2095374010 stmt(relate) ， Tree ID : 1643832899 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_609389397 dot graph subgraph  start ID : 1808543350 stmt(relate) ， Tree ID : 2095613371 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 437164198 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 262960224 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1851333933 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2080997098 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1132253213 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1820308536 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1854327475 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1098805886 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1768198898 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2036784427 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1494875529
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1046935609 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 961379456 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1834422282 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 688221275 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1647163104 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1375522242 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1519004592 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_864868025 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1211106790 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1996560188 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_801134034 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_811175748 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1300832666 dot graph subgraph  start ID : 1525442969 stmt(relate) ， Tree ID : 341990711 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1586991320 dot graph subgraph  start ID : 2061930888 stmt(relate) ， Tree ID : 1980829363 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2100704174 dot graph subgraph  start ID : 654926246 stmt(relate) ， Tree ID : 482749382 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1910222064 dot graph subgraph  start ID : 1053562612 stmt(relate) ， Tree ID : 1305116919 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1654145767 dot graph subgraph  start ID : 2095374010 stmt(relate) ， Tree ID : 1643832899 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_750991847 dot graph subgraph  start ID : 1808543350 stmt(relate) ， Tree ID : 2095613371 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_199902614 dot graph subgraph  start ID : 1132253213 stmt(relate) ， Tree ID : 797771321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1494875529
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1917105991 dot graph subgraph  start ID : 1046935609 stmt(relate) ， Tree ID : 1494875529 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_454842132 dot graph subgraph  start ID : 1375522242 stmt(relate) ， Tree ID : 1027161573 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 133416064
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 901875557 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 133416064
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1949717661 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 133416064
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1953724601 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 133416064
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 608719384 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 133416064
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 901039899 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574439851
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 498020163 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1574439851
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1947975508 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574439851
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1922713946 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574439851
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1525181736 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574439851
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 761871317 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1609652580 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_65919363 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1640610632
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_261550773 dot graph subgraph  start ID : 828479321 stmt(relate) ， Tree ID : 1640610632 : *tail_6(D) = _3;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1281431151
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_837691175 dot graph subgraph  start ID : 1254540225 stmt(relate) ， Tree ID : 1281431151 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 133416064
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1584923956 dot graph subgraph  start ID : 901039899 stmt(relate) ， Tree ID : 133416064 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1574439851
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1126418798 dot graph subgraph  start ID : 761871317 stmt(relate) ， Tree ID : 1574439851 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2048797965 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1434000496 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1927552832 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_712490066 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_587349515 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1367060504 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:find_ref_by_name========= [0m
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 665710592
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 350087931 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 665710592
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 873722624 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 665710592
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1416702439 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 549990545
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 643344967 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 643344967 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 549990545
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1871544571 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1871544571 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 549990545
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 683406610 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 683406610 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 549990545
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1545220524 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 549990545
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1673778584 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 549990545
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 489647563 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 6456260
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 427334835 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 427334835 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 6456260
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2064087414 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2064087414 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 6456260
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 504476423 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 504476423 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 6456260
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 227826695 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 6456260
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1839317712 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 6456260
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2029658159 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 989698012
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1301486645 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1251248785 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 2139177820 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1533017831 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 230183935 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2040492137 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2095577523
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 819534679 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1406884194 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1377313624 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1271209147 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1756972125 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 103552600 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_540427938 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_159479023 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_746897568 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1402706885
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_264488861 dot graph subgraph  start ID : 135199673 stmt(relate) ， Tree ID : 1402706885 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1266709469
from free_ref basic block 3dot graph end relate end

subgraph cluster_842885633 dot graph subgraph  start ID : 338285460 stmt(relate) ， Tree ID : 1266709469 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 41195351
from free_ref basic block 3dot graph end relate end

subgraph cluster_144634444 dot graph subgraph  start ID : 1531499709 stmt(relate) ， Tree ID : 41195351 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1522714625
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1938267445 dot graph subgraph  start ID : 1823839218 stmt(relate) ， Tree ID : 1522714625 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 638556286
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1332533196 dot graph subgraph  start ID : 1583412422 stmt(relate) ， Tree ID : 638556286 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 60665861
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_151090705 dot graph subgraph  start ID : 732506658 stmt(relate) ， Tree ID : 60665861 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 665710592
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_218118632 dot graph subgraph  start ID : 1416702439 stmt(relate) ， Tree ID : 665710592 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 549990545
from free_ref basic block 3dot graph end relate end

subgraph cluster_1249136962 dot graph subgraph  start ID : 489647563 stmt(relate) ， Tree ID : 549990545 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 6456260
from free_ref basic block 3dot graph end relate end

subgraph cluster_655567128 dot graph subgraph  start ID : 2029658159 stmt(relate) ， Tree ID : 6456260 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 989698012
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_445945328 dot graph subgraph  start ID : 1301486645 stmt(relate) ， Tree ID : 989698012 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 2095577523
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_940971027 dot graph subgraph  start ID : 819534679 stmt(relate) ， Tree ID : 2095577523 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 605498555
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_537741640 dot graph subgraph  start ID : 103552600 stmt(relate) ， Tree ID : 605498555 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6de58
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68f400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f1f7b6957c8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1435643340
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 94974024 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1435643340
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 485835515 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1435643340
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 539408478 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 86668196
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2018853346 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2018853346 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 86668196
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 769592413 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 769592413 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 86668196
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2127160333 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2127160333 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 86668196
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 690904377 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 86668196
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 779845533 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 86668196
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 585175241 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2097788572
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 9675510 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 9675510 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2097788572
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1856384388 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1856384388 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2097788572
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1707277049 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1707277049 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2097788572
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 113228110 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2097788572
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 249328679 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2097788572
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1866756072 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 860125678
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 513817540 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1004760123 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 304601338 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1894691253 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1155850828 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 522719970 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 562158057
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 996344568 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
dot graph arrowdot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1937315595 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 201675948 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 256824991 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2032289619 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 687511463 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_796233469 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2118957815 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_558881161 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1564007985
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1565825882 dot graph subgraph  start ID : 393139487 stmt(relate) ， Tree ID : 1564007985 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 949479708
from free_ref basic block 3dot graph end relate end

subgraph cluster_2098634500 dot graph subgraph  start ID : 50067381 stmt(relate) ， Tree ID : 949479708 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1200153262
from free_ref basic block 3dot graph end relate end

subgraph cluster_1249785539 dot graph subgraph  start ID : 1350565603 stmt(relate) ， Tree ID : 1200153262 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1326970668
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_198187768 dot graph subgraph  start ID : 1228964008 stmt(relate) ， Tree ID : 1326970668 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1371283631
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_536326093 dot graph subgraph  start ID : 859527453 stmt(relate) ， Tree ID : 1371283631 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 241044181
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1200090463 dot graph subgraph  start ID : 1285395632 stmt(relate) ， Tree ID : 241044181 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1435643340
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_207863278 dot graph subgraph  start ID : 539408478 stmt(relate) ， Tree ID : 1435643340 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 86668196
from free_ref basic block 3dot graph end relate end

subgraph cluster_245226834 dot graph subgraph  start ID : 585175241 stmt(relate) ， Tree ID : 86668196 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 2097788572
from free_ref basic block 3dot graph end relate end

subgraph cluster_759883864 dot graph subgraph  start ID : 1866756072 stmt(relate) ， Tree ID : 2097788572 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 860125678
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_321091388 dot graph subgraph  start ID : 513817540 stmt(relate) ， Tree ID : 860125678 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 562158057
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_494555513 dot graph subgraph  start ID : 996344568 stmt(relate) ， Tree ID : 562158057 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 968665298
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_479156289 dot graph subgraph  start ID : 687511463 stmt(relate) ， Tree ID : 968665298 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6de10
    type <pointer_type 0x7f1f7b685000
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f1f7b6850a8>>
    var <var_decl 0x7f1f7b699000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f1f7b6957b0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1181217067
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1008373053 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1181217067
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1041314346 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1181217067
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 38493542 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---find_ref_by_name-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1312974391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 788521952 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 788521952 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1312974391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1194344370 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1194344370 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1312974391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1835694362 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1835694362 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312974391
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1784866520 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312974391
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 858278678 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312974391
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 656876012 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1574698467
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1059954627 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1059954627 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1574698467
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 913701003 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 913701003 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1574698467
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1459504438 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1459504438 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574698467
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1747466090 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574698467
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1709934472 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1574698467
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1430978605 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 158863604
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1128276707 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 158863604
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1382129457 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 158863604
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1408649143 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1326464475
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1918455551 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1534327753 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 16198737 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1221139822 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1855419141 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 510754250 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 461255958
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1700296111 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 594126810 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 927646102 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 684618047 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1382648762 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2121990472 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_372828761 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1020031634 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_832785503 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1577091347
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1029704773 dot graph subgraph  start ID : 795054392 stmt(relate) ， Tree ID : 1577091347 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1588853839
from free_ref basic block 3dot graph end relate end

subgraph cluster_447246453 dot graph subgraph  start ID : 1350386978 stmt(relate) ， Tree ID : 1588853839 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 206403085
from free_ref basic block 3dot graph end relate end

subgraph cluster_1892740130 dot graph subgraph  start ID : 464559777 stmt(relate) ， Tree ID : 206403085 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1582783786
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1943405777 dot graph subgraph  start ID : 720695770 stmt(relate) ， Tree ID : 1582783786 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1819411526
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1906750891 dot graph subgraph  start ID : 252465454 stmt(relate) ， Tree ID : 1819411526 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 760144626
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1492722572 dot graph subgraph  start ID : 824414621 stmt(relate) ， Tree ID : 760144626 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1967367705
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1505856601 dot graph subgraph  start ID : 1045465891 stmt(relate) ， Tree ID : 1967367705 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1181217067
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1190245848 dot graph subgraph  start ID : 38493542 stmt(relate) ， Tree ID : 1181217067 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1312974391
from free_ref basic block 3dot graph end relate end

subgraph cluster_1651586176 dot graph subgraph  start ID : 656876012 stmt(relate) ， Tree ID : 1312974391 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1574698467
from free_ref basic block 3dot graph end relate end

subgraph cluster_486649660 dot graph subgraph  start ID : 1430978605 stmt(relate) ， Tree ID : 1574698467 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 158863604
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_424891657 dot graph subgraph  start ID : 1408649143 stmt(relate) ， Tree ID : 158863604 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1326464475
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_912751671 dot graph subgraph  start ID : 1918455551 stmt(relate) ， Tree ID : 1326464475 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 461255958
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1813114135 dot graph subgraph  start ID : 1700296111 stmt(relate) ， Tree ID : 461255958 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1519127303
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_195863560 dot graph subgraph  start ID : 2121990472 stmt(relate) ， Tree ID : 1519127303 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f1f7b6957e0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1374007629
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1199958240 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 212062297
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 447663804 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 212062297
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 907893734 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 212062297
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 722816547 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 212062297
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 476267 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 212062297
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1797046294 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 577208749 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 779078250 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1977251839 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 551715573 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1151907011 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 849799825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1384501076 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1384501076 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 849799825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 34128136 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 34128136 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 849799825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1297046278 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1297046278 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 849799825
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1129757558 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 849799825
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1977533913 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 849799825
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1056313521 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 474996483
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1335906867 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1335906867 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 474996483
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 99075721 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 99075721 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 474996483
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2126582659 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2126582659 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 474996483
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1822556527 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 474996483
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 523967379 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 474996483
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 891850683 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1488187015
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 719830939 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1488187015
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 118374664 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1488187015
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 540661607 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_931893237 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_566038468 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1448555341 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1848669266
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1654709784 dot graph subgraph  start ID : 582123072 stmt(relate) ， Tree ID : 1848669266 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 589453825
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_566514736 dot graph subgraph  start ID : 2062963468 stmt(relate) ， Tree ID : 589453825 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1084417258
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1098117988 dot graph subgraph  start ID : 874520526 stmt(relate) ， Tree ID : 1084417258 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1048406444
from free_ref basic block 3dot graph end relate end

subgraph cluster_1749169987 dot graph subgraph  start ID : 241249140 stmt(relate) ， Tree ID : 1048406444 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1405698198
from free_ref basic block 3dot graph end relate end

subgraph cluster_1161117813 dot graph subgraph  start ID : 960502989 stmt(relate) ， Tree ID : 1405698198 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 106681487
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1675326737 dot graph subgraph  start ID : 688804560 stmt(relate) ， Tree ID : 106681487 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1374007629
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_380764589 dot graph subgraph  start ID : 1199958240 stmt(relate) ， Tree ID : 1374007629 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 212062297
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_990886005 dot graph subgraph  start ID : 1797046294 stmt(relate) ， Tree ID : 212062297 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 594603077
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_79558662 dot graph subgraph  start ID : 1151907011 stmt(relate) ， Tree ID : 594603077 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 849799825
from free_ref basic block 3dot graph end relate end

subgraph cluster_1532671600 dot graph subgraph  start ID : 1056313521 stmt(relate) ， Tree ID : 849799825 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 474996483
from free_ref basic block 3dot graph end relate end

subgraph cluster_1840685830 dot graph subgraph  start ID : 891850683 stmt(relate) ， Tree ID : 474996483 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1488187015
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1464059739 dot graph subgraph  start ID : 540661607 stmt(relate) ， Tree ID : 1488187015 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dee8
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f1f7b6957f8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1566799737
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 990248461 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1396850002 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 2046561982 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 921330132 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 585273221 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2145637704 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 446333649
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 900429144 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1792279827 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1748533116 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1241952374 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1910654491 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 141711075 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---make_linked_ref-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 26361963
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 329209312 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 329209312 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 26361963
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1590266417 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1590266417 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 26361963
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1681071748 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1681071748 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 26361963
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 895724048 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 26361963
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 540900757 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 26361963
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1282758087 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2056841861
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 68743846 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 68743846 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2056841861
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1663522677 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1663522677 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2056841861
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 900244218 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 900244218 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2056841861
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 148302508 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2056841861
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1048710629 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2056841861
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 593446401 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1612362247
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 468026718 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1612362247
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1583694862 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1612362247
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 2058695897 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1864876721
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1482773196 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 302666294 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1480927252 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1732971525 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ret_40 = _71;
_1 = get_local_heads ();
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 563012395 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


<<<<<<< HEAD
======================================================================
[40;31m    collect Stmt in loop [0m
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2003048687 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 832542381
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1377767704 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 16: ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1
=======
 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1140938548 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 305772939 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1123879377 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
_1 = get_local_heads ();
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1470147860 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

this stmt have mutiple branch ---calloc-----

<<<<<<< HEAD
======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1896039356 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_657467477 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_218388260 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_289456465 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 402947845
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1940225565 dot graph subgraph  start ID : 249526816 stmt(relate) ， Tree ID : 402947845 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 799399822
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_127746473 dot graph subgraph  start ID : 823160581 stmt(relate) ， Tree ID : 799399822 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1848843093
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_358200311 dot graph subgraph  start ID : 506660114 stmt(relate) ， Tree ID : 1848843093 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1604907528
from free_ref basic block 3dot graph end relate end

subgraph cluster_1456264594 dot graph subgraph  start ID : 596508997 stmt(relate) ， Tree ID : 1604907528 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 452865390
from free_ref basic block 3dot graph end relate end

subgraph cluster_1027990692 dot graph subgraph  start ID : 1705424288 stmt(relate) ， Tree ID : 452865390 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 773207879
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_506502819 dot graph subgraph  start ID : 1572607701 stmt(relate) ， Tree ID : 773207879 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 2133131971
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_357491575 dot graph subgraph  start ID : 1105400717 stmt(relate) ， Tree ID : 2133131971 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1101845949
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1621437093 dot graph subgraph  start ID : 2006381662 stmt(relate) ， Tree ID : 1101845949 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1491454478
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2118865067 dot graph subgraph  start ID : 1351771010 stmt(relate) ， Tree ID : 1491454478 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1566799737
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_825518294 dot graph subgraph  start ID : 990248461 stmt(relate) ， Tree ID : 1566799737 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 446333649
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1057648307 dot graph subgraph  start ID : 900429144 stmt(relate) ， Tree ID : 446333649 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 522121435
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2030077316 dot graph subgraph  start ID : 141711075 stmt(relate) ， Tree ID : 522121435 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 26361963
from free_ref basic block 3dot graph end relate end

subgraph cluster_542911367 dot graph subgraph  start ID : 1282758087 stmt(relate) ， Tree ID : 26361963 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
<<<<<<< HEAD
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _45 = &ref_42->next;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start remote_tail = _45;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph stmt end

=======
dot graph subgrapend

dot graph start relate for1ID : 2056841861
from free_ref basic block 3dot graph end relate end

subgraph cluster_392937855 dot graph subgraph  start ID : 593446401 stmt(relate) ， Tree ID : 2056841861 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1612362247
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_715136049 dot graph subgraph  start ID : 2058695897 stmt(relate) ， Tree ID : 1612362247 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1864876721
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_845577661 dot graph subgraph  start ID : 1482773196 stmt(relate) ， Tree ID : 1864876721 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 832542381
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1873865108 dot graph subgraph  start ID : 1377767704 stmt(relate) ， Tree ID : 832542381 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1097517414
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_300623927 dot graph subgraph  start ID : 1896039356 stmt(relate) ， Tree ID : 1097517414 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6df30
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f1f7b695810>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _41 = remote_tail;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

*_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *_41 = ret_40;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph stmt end

=======
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1
=======
============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _44 = ref_42->next;
_1 = get_local_heads ();
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph stmt end
=======
======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 15: ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1
=======
======================================================================
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
is Other function 
 
 Start check Pointer Collect  
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ref_43 = ref_42->next;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_74 = ret_40;
lto1: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _74 = ret_40;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _74 = ret_40;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _74 = ret_40;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start dst_peer_29 = _74;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

=======
======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _31 = &dst_peer_29->new_sha1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = &ref_50->name;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

=======
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1408590057 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1729430147 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dc60
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f1f7b695750>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _53 = _52;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

=======
 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph START

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:6 
=======
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>
is Other function 
 
 Start check Pointer Collect  

======================================================================
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

_51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = &ref_50->name;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _37 = strcmp (_36, dst_name_22);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 
=======
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start if (_37 == 0)
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

=======
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 19: free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start free (dst_name_22);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
dot graph entry main
dot graph target entry end

_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _1 = get_local_heads ();
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:7 
dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph arrowsubgraph cluster_512468086 dot graph subgraph  ref_56 = PHI <local_refs_12(26), next_57(27)>
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph arrowsubgraph cluster_2115459430 dot graph subgraph  if (ref_56 != 0B)
ref_56 = PHI <local_refs_12(26), next_57(27)>
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f89e075e5e8
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_56 = PHI <local_refs_12(26), next_57(27)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_56 = PHI <local_refs_12(26), next_57(27)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
=======
dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1678391631 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1572651920 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7bb6dc18
    type <pointer_type 0x7f1f7b68a5e8
        type <array_type 0x7f1f7b685540 type <integer_type 0x7f1f7bb7a348 unsigned char>
            BLK
            size <integer_cst 0x7f1f7b674840 constant 160>
            unit-size <integer_cst 0x7f1f7b674828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b685498>
            pointer_to_this <pointer_type 0x7f1f7b68a5e8>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f1f7b695738>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:match_refs========= [0m
[40;44m =======node_fun:make_linked_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
=======
dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

<<<<<<< HEAD
============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_63>
next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
=======
dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_63>
next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: free in this location
   73 |                 free_ref(ref);
      |                 ^

===== possiable asias =====
src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======
dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

<<<<<<< HEAD
============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location
=======
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_21 = PHI <local_refs_12(2), src_34(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
=======
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_679463913 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
=======
dot graph arrowsubgraph cluster_671846531 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_1878424859 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
============================================================
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: free in this location
   73 |                 free_ref(ref);
      |                 ^

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
=======
dot graph arrowsubgraph cluster_1803343291 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_2141994391 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
=======
dot graph arrowsubgraph cluster_1626980567 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_313327120 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
=======
dot graph arrowsubgraph cluster_212899003 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
<<<<<<< HEAD
[40;31m  	possible double free [rigorous]:7 [0m
=======
[40;31m    no free stmt possible memory leak [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================

======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e678
    type <pointer_type 0x7f89e0278c78
        type <array_type 0x7f89e0278bd0 type <integer_type 0x7f89e0276b28 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026ee70>
            pointer_to_this <pointer_type 0x7f89e0278c78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _36 = &list_35->name;
    version:36
    ptr-info 0x7f89e02878b8>
 <ssa_name 0x7f89e028e678
    type <pointer_type 0x7f89e0278c78
        type <array_type 0x7f89e0278bd0 type <integer_type 0x7f89e0276b28 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026ee70>
            pointer_to_this <pointer_type 0x7f89e0278c78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _36 = &list_35->name;
    version:36
    ptr-info 0x7f89e02878b8>
=======
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e678
    type <pointer_type 0x7f89e0278c78
        type <array_type 0x7f89e0278bd0 type <integer_type 0x7f89e0276b28 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026ee70>
            pointer_to_this <pointer_type 0x7f89e0278c78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _36 = &list_35->name;
    version:36
    ptr-info 0x7f89e02878b8>
is Other function 
=======
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

<<<<<<< HEAD
======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _37 = strcmp (_36, dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start if (_37 == 0)
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start len_47 = strlen (dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _48 = len_47;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _49 = _48 + 81;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

=======
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ref_50 = calloc (1, _49);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
=======
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_70 = ref_50;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _70 = ref_50;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _70 = ref_50;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _70 = ref_50;
lto1: warning: use location
dot graph stmt end

=======
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _46 = _70;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_71 = _46;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _71 = _46;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _71 = _46;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _71 = _46;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ret_40 = _71;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

=======
dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 16: ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----
=======
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _45 = &ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start remote_tail = _45;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _41 = remote_tail;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

*_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *_41 = ret_40;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph stmt end

=======
dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1916437032 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_106069037 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_340645477 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_127153695 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1562333631 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1368636169 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_633656515 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1919825207 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

_44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 16: _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================================================================= 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _44 = ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 16: if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start if (_44 != 0B)
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 15: ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start ref_43 = ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_74 = ret_40;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _74 = ret_40;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _74 = ret_40;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _74 = ret_40;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start dst_peer_29 = _74;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end

=======
dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_842589614 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_605037934 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_597859853 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1900237921 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end

=======
dot graph arrowsubgraph cluster_487631602 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1140771220 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end

=======
dot graph arrowsubgraph cluster_145692128 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->peer_ref = src_21;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end

=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 20: src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start src_34 = src_21->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end

=======
 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

_30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _30 = &src_21->new_sha1;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end

=======
[40;31m    no free stmt possible memory leak [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _23 = src_21->peer_ref;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end

=======
 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_1202767651 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_22 = &src_21->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end

=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_1986348881 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
=======

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>

 ================================================================= 

 ================== Start Use after free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph END
 
 Finish check Pointer Collect  

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 19: free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start free (dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m
=======
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

_31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _31 = &dst_peer_29->new_sha1;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = &ref_50->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

=======

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowsubgraph cluster_2019557236 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1503391578 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = &ref_50->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph arrowsubgraph cluster_2020787997 dot graph subgraph  src_34 = src_21->next;
src_21 = PHI <local_refs_12(2), src_34(20)>
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f89e028e678
    type <pointer_type 0x7f89e0278c78
        type <array_type 0x7f89e0278bd0 type <integer_type 0x7f89e0276b28 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026ee70>
            pointer_to_this <pointer_type 0x7f89e0278c78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _36 = &list_35->name;
    version:36
    ptr-info 0x7f89e02878b8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
=======

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


======================================================================

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
=======
 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

<<<<<<< HEAD
============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
=======
 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
=======
dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m
=======
dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

<<<<<<< HEAD
======================================================================
 <ssa_name 0x7f89e028e090
    type <pointer_type 0x7f89e026ec78
        type <integer_type 0x7f89e026ebd0 char public QI
            size <integer_cst 0x7f89e0756ca8 constant 8>
            unit-size <integer_cst 0x7f89e0756cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b3f0 precision:8 min <integer_cst 0x7f89e0265720 -128> max <integer_cst 0x7f89e0265708 127>
            pointer_to_this <pointer_type 0x7f89e026ec78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f89e026ed20>>
    var <var_decl 0x7f89e028a7e0 dst_name>
    def_stmt dst_name_22 = &src_21->name;
    version:22
    ptr-info 0x7f89e02877c8>
 <ssa_name 0x7f89e028e090
    type <pointer_type 0x7f89e026ec78
        type <integer_type 0x7f89e026ebd0 char public QI
            size <integer_cst 0x7f89e0756ca8 constant 8>
            unit-size <integer_cst 0x7f89e0756cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b3f0 precision:8 min <integer_cst 0x7f89e0265720 -128> max <integer_cst 0x7f89e0265708 127>
            pointer_to_this <pointer_type 0x7f89e026ec78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f89e026ed20>>
    var <var_decl 0x7f89e028a7e0 dst_name>
    def_stmt dst_name_22 = &src_21->name;
    version:22
    ptr-info 0x7f89e02877c8>
=======
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

<<<<<<< HEAD
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f89e028e090
    type <pointer_type 0x7f89e026ec78
        type <integer_type 0x7f89e026ebd0 char public QI
            size <integer_cst 0x7f89e0756ca8 constant 8>
            unit-size <integer_cst 0x7f89e0756cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b3f0 precision:8 min <integer_cst 0x7f89e0265720 -128> max <integer_cst 0x7f89e0265708 127>
            pointer_to_this <pointer_type 0x7f89e026ec78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f89e026ed20>>
    var <var_decl 0x7f89e028a7e0 dst_name>
    def_stmt dst_name_22 = &src_21->name;
    version:22
    ptr-info 0x7f89e02877c8>
is Other function 
 
 Start check Pointer Collect  
=======
dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start len_47 = strlen (dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 
=======
_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1247455290 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1601503736 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1034299562 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_672623563 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_133484001 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1706146093 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_403564774 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 

 ================== Start Use after free Check ================== 

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _48 = len_47;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

=======
dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _49 = _48 + 81;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

=======
dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ref_50 = calloc (1, _49);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_70 = ref_50;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _70 = ref_50;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _70 = ref_50;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _70 = ref_50;
lto1: warning: use location
dot graph stmt end

=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1936827292 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1700656837 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f1f7b695540
    type <array_type 0x7f1f7b685e70
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        QI size <integer_cst 0x7f1f7bb65ca8 8> unit-size <integer_cst 0x7f1f7bb65cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f1f7b685dc8 type <integer_type 0x7f1f7bb7a000 sizetype>
            DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65be8 0> max <integer_cst 0x7f1f7bb65be8 0>>
        pointer_to_this <pointer_type 0x7f1f7b68a348>>
    readonly constant static "\000">

dot graph START

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

_46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end
=======
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 102670765 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1913555840 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1799498726 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _46 = _70;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_71 = _46;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _71 = _46;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _71 = _46;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _71 = _46;
lto1: warning: use location
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 208739802 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ret_40 = _71;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 16: ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _45 = &ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start remote_tail = _45;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _41 = remote_tail;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 106717669 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1771073434 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1475353838 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 412825289 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1543414993 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 170459804 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1017863223 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2141274846 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2070697725 dot graph subgraph  start ID : 1992926313 stmt(relate) ， Tree ID : 808339336 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1505494825 dot graph subgraph  start ID : 428948513 stmt(relate) ， Tree ID : 163235912 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1134562418 dot graph subgraph  start ID : 1326777707 stmt(relate) ， Tree ID : 1579052640 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_68906206 dot graph subgraph  start ID : 1495021151 stmt(relate) ， Tree ID : 1370409777 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_560778828 dot graph subgraph  start ID : 106717669 stmt(relate) ， Tree ID : 2030545342 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_973427651 dot graph subgraph  start ID : 170459804 stmt(relate) ， Tree ID : 1926652422 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>

 ================================================================= 

 ================== Start Use after free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph stmt end

<<<<<<< HEAD
=======
======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end
=======
[40;31m    no free stmt possible memory leak [0m

======================================================================
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

*_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *_41 = ret_40;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m
=======
======================================================================
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2064170407 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 73399294 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1542483530 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
_44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 16: _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 950986321 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _44 = ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 746022857 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


<<<<<<< HEAD
======================================================================
[40;31m    collect Stmt in loop [0m
=======
 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 509648766 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1149587631 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1465311176 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 62821955 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 16: if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1032649325 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start if (_44 != 0B)
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph stmt end

=======
 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1567981941 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 15: ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start ref_43 = ref_42->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph stmt end

=======
dot graph arrowsubgraph cluster_1976377796 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_684664404 dot graph subgraph  start ID : 982158619 stmt(relate) ， Tree ID : 737180053 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1776721744 dot graph subgraph  start ID : 704543204 stmt(relate) ， Tree ID : 1032686287 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2083095465 dot graph subgraph  start ID : 1327428251 stmt(relate) ， Tree ID : 2055548769 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_74 = ret_40;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _74 = ret_40;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _74 = ret_40;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _74 = ret_40;
lto1: warning: use location
dot graph stmt end

=======
subgraph cluster_463833178 dot graph subgraph  start ID : 670141529 stmt(relate) ， Tree ID : 131030187 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1400311530 dot graph subgraph  start ID : 746022857 stmt(relate) ， Tree ID : 2088463442 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1410965656 dot graph subgraph  start ID : 1032649325 stmt(relate) ， Tree ID : 1675967532 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start dst_peer_29 = _74;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

=======
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend
=======
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1581425460 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1894521690 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 790034073 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end

=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1504639538 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

_33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 18: _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1252532867 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end

=======
 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->peer_ref = src_21;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end

=======
dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end
=======
dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1573545744 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 20: src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1813311695 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start src_34 = src_21->next;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 750540494 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1514525538 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _30 = &src_21->new_sha1;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1729998454 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1924596491
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 823939788 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end
=======
 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_909525421 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_533501127 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1283841909
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1569962645 dot graph subgraph  start ID : 1888353303 stmt(relate) ， Tree ID : 1283841909 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1208843923
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_438009305 dot graph subgraph  start ID : 2013861832 stmt(relate) ， Tree ID : 1208843923 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2107872409
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1043149894 dot graph subgraph  start ID : 955403842 stmt(relate) ， Tree ID : 2107872409 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2113797771
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_572066629 dot graph subgraph  start ID : 679404921 stmt(relate) ， Tree ID : 2113797771 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 796242875
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1903320481 dot graph subgraph  start ID : 1252532867 stmt(relate) ， Tree ID : 796242875 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1924596491
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1105971849 dot graph subgraph  start ID : 823939788 stmt(relate) ， Tree ID : 1924596491 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f1f7b69d2d0
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 934865997 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 141896710 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 953056871 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 870477815 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 605729888 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start hashcpy (_31, _30);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

<<<<<<< HEAD
 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _23 = src_21->peer_ref;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_22 = &src_21->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 17: _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _31 = &dst_peer_29->new_sha1;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = &ref_50->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _53 = _52;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _53 = _52;
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 14: _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = &ref_50->name;
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 133959823 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1482388355 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1002127628 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1715385283 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1229426397 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 205884753
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1792161701 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

<<<<<<< HEAD
======================================================================
# VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _37 = strcmp (_36, dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 
=======
dot graph relate stmt start ID : 1569274544 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph arrowdot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 498603269 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start if (_37 == 0)
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 19: free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start free (dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph arrowsubgraph cluster_1917547706 dot graph subgraph  src_34 = src_21->next;
src_21 = PHI <local_refs_12(2), src_34(20)>
dot graph subgrapend

=======
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 303664 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 172331390 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2013128808 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1730302118 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_996271179 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_775170581 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_116319598 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_418750176 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

subgraph cluster_1213179886 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

<<<<<<< HEAD
 ================== warring ================== 
 <ssa_name 0x7f89e028e090
    type <pointer_type 0x7f89e026ec78
        type <integer_type 0x7f89e026ebd0 char public QI
            size <integer_cst 0x7f89e0756ca8 constant 8>
            unit-size <integer_cst 0x7f89e0756cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b3f0 precision:8 min <integer_cst 0x7f89e0265720 -128> max <integer_cst 0x7f89e0265708 127>
            pointer_to_this <pointer_type 0x7f89e026ec78>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f89e026ed20>>
    var <var_decl 0x7f89e028a7e0 dst_name>
    def_stmt dst_name_22 = &src_21->name;
    version:22
    ptr-info 0x7f89e02877c8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
=======
subgraph cluster_1159469492 dot graph subgraph  start ID : 1525442969 stmt(relate) ， Tree ID : 341990711 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

subgraph cluster_990816805 dot graph subgraph  start ID : 2061930888 stmt(relate) ， Tree ID : 1980829363 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

<<<<<<< HEAD
============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
=======
dot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_969016719 dot graph subgraph  start ID : 654926246 stmt(relate) ， Tree ID : 482749382 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_117957693 dot graph subgraph  start ID : 1053562612 stmt(relate) ， Tree ID : 1305116919 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_448049112 dot graph subgraph  start ID : 2095374010 stmt(relate) ， Tree ID : 1643832899 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_145351846 dot graph subgraph  start ID : 1808543350 stmt(relate) ， Tree ID : 2095613371 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1052823691 dot graph subgraph  start ID : 1132253213 stmt(relate) ， Tree ID : 797771321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1494875529
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_589945822 dot graph subgraph  start ID : 1046935609 stmt(relate) ， Tree ID : 1494875529 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1098408717 dot graph subgraph  start ID : 1375522242 stmt(relate) ， Tree ID : 1027161573 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1923301506 dot graph subgraph  start ID : 605729888 stmt(relate) ， Tree ID : 1323818775 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 205884753
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1195675711 dot graph subgraph  start ID : 1792161701 stmt(relate) ， Tree ID : 205884753 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1304293470 dot graph subgraph  start ID : 2013128808 stmt(relate) ， Tree ID : 334475616 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
<<<<<<< HEAD
[40;35m    Use after free error! [0m
=======
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e6c0
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _37 = strcmp (_36, dst_name_22);
    version:37>
 <ssa_name 0x7f89e028e6c0
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _37 = strcmp (_36, dst_name_22);
    version:37>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f89e028e6c0
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _37 = strcmp (_36, dst_name_22);
    version:37>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start if (_37 == 0)
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _37 = strcmp (_36, dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1219982214 dot graph subgraph  if (_37 == 0)
_37 = strcmp (_36, dst_name_22);
dot graph subgrapend

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1168685219 dot graph subgraph  _37 = strcmp (_36, dst_name_22);
_37 = strcmp (_36, dst_name_22);
dot graph subgrapend

=======
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 158937450 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1625162964 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1760006816 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1951099151 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 550220490 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1372890047 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1048823759 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2094786096 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1545221438 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 914468919 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2094482432
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1677604567 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e6c0
    type <integer_type 0x7f89e076b5e8 int public SI
        size <integer_cst 0x7f89e0756df8 constant 32>
        unit-size <integer_cst 0x7f89e0756e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b5e8 precision:32 min <integer_cst 0x7f89e0756db0 -2147483648> max <integer_cst 0x7f89e0756dc8 2147483647>
        pointer_to_this <pointer_type 0x7f89e07729d8>>
   
    def_stmt _37 = strcmp (_36, dst_name_22);
    version:37>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
=======
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

<<<<<<< HEAD
======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m
=======
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1793924165 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

<<<<<<< HEAD
======================================================================
 <ssa_name 0x7f89e028e000
    type <integer_type 0x7f89e026e888 size_t public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b738 precision:64 min <integer_cst 0x7f89e0756e88 0> max <integer_cst 0x7f89e0757500 18446744073709551615> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f89e0294cf0 len>
    def_stmt len_47 = strlen (dst_name_22);
    version:47
    ptr-info 0x7f89e0292780>
 <ssa_name 0x7f89e028e000
    type <integer_type 0x7f89e026e888 size_t public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b738 precision:64 min <integer_cst 0x7f89e0756e88 0> max <integer_cst 0x7f89e0757500 18446744073709551615> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f89e0294cf0 len>
    def_stmt len_47 = strlen (dst_name_22);
    version:47
    ptr-info 0x7f89e0292780>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f89e028e000
    type <integer_type 0x7f89e026e888 size_t public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b738 precision:64 min <integer_cst 0x7f89e0756e88 0> max <integer_cst 0x7f89e0757500 18446744073709551615> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f89e0294cf0 len>
    def_stmt len_47 = strlen (dst_name_22);
    version:47
    ptr-info 0x7f89e0292780>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _48 = len_47;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _49 = _48 + 81;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ref_50 = calloc (1, _49);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_70 = ref_50;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _70 = ref_50;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _70 = ref_50;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _70 = ref_50;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _46 = _70;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_71 = _46;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _71 = _46;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _71 = _46;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _71 = _46;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ret_40 = _71;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _45 = &ref_42->next;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start remote_tail = _45;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _41 = remote_tail;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

*_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
=======
dot graph arrowdot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 812759145 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 755335738 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 805910009 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1803575951 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1724352458 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_923867702 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_104141415 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1147568688
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1869704304 dot graph subgraph  start ID : 759369474 stmt(relate) ， Tree ID : 1147568688 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 434324676
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1976691393 dot graph subgraph  start ID : 277410242 stmt(relate) ， Tree ID : 434324676 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 748321270
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_694087237 dot graph subgraph  start ID : 2030561041 stmt(relate) ， Tree ID : 748321270 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 341990711
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_820629374 dot graph subgraph  start ID : 1525442969 stmt(relate) ， Tree ID : 341990711 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1980829363
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1752509251 dot graph subgraph  start ID : 2061930888 stmt(relate) ， Tree ID : 1980829363 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 482749382
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1889762948 dot graph subgraph  start ID : 654926246 stmt(relate) ， Tree ID : 482749382 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1305116919
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2124922844 dot graph subgraph  start ID : 1053562612 stmt(relate) ， Tree ID : 1305116919 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1643832899
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1662286932 dot graph subgraph  start ID : 2095374010 stmt(relate) ， Tree ID : 1643832899 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2095613371
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_272859719 dot graph subgraph  start ID : 1808543350 stmt(relate) ， Tree ID : 2095613371 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 797771321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_136376647 dot graph subgraph  start ID : 1132253213 stmt(relate) ， Tree ID : 797771321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1494875529
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1139966249 dot graph subgraph  start ID : 1046935609 stmt(relate) ， Tree ID : 1494875529 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1027161573
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2032866535 dot graph subgraph  start ID : 1375522242 stmt(relate) ， Tree ID : 1027161573 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1323818775
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2087475798 dot graph subgraph  start ID : 605729888 stmt(relate) ， Tree ID : 1323818775 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 205884753
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1690186739 dot graph subgraph  start ID : 1792161701 stmt(relate) ， Tree ID : 205884753 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 334475616
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1979865319 dot graph subgraph  start ID : 2013128808 stmt(relate) ， Tree ID : 334475616 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 530580418
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1312882198 dot graph subgraph  start ID : 550220490 stmt(relate) ， Tree ID : 530580418 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2094482432
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_591526850 dot graph subgraph  start ID : 1677604567 stmt(relate) ， Tree ID : 2094482432 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1689639500
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1927167768 dot graph subgraph  start ID : 1803575951 stmt(relate) ， Tree ID : 1689639500 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 14: *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d318
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b6993f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f1f7b695858>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start *_41 = ret_40;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _44 = ref_42->next;
len_47 = strlen (dst_name_22);
dot graph stmt end
=======
======================================================================
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start if (_44 != 0B)
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 15: ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target line desend
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 710619988
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1505995770 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 710619988
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1457288687 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 710619988
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1104628957 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 15dot graph target basicblock en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 710619988
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1048151622 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ref_43 = ref_42->next;
len_47 = strlen (dst_name_22);
dot graph stmt end

<<<<<<< HEAD
dot graph stmt start ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 710619988
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1103729204 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

_74 = ret_40;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 17: _74 = ret_40;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end
=======
 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1917388102
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1803487361 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _74 = ret_40;
len_47 = strlen (dst_name_22);
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1917388102
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1909639213 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1917388102
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1573480405 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _74 = ret_40;
lto1: warning: use location
dot graph stmt end

<<<<<<< HEAD
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1917388102
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1380356171 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1917388102
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 686023267 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
=======
 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1677621820 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1102576827 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1640610632
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_515231013 dot graph subgraph  start ID : 828479321 stmt(relate) ， Tree ID : 1640610632 : *tail_6(D) = _3;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1281431151
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_224225410 dot graph subgraph  start ID : 1254540225 stmt(relate) ， Tree ID : 1281431151 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 133416064
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1923206201 dot graph subgraph  start ID : 901039899 stmt(relate) ， Tree ID : 133416064 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1574439851
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_120256616 dot graph subgraph  start ID : 761871317 stmt(relate) ， Tree ID : 1574439851 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 710619988
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2113988358 dot graph subgraph  start ID : 1103729204 stmt(relate) ， Tree ID : 710619988 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1917388102
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1900645398 dot graph subgraph  start ID : 686023267 stmt(relate) ， Tree ID : 1917388102 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d360
    type <pointer_type 0x7f1f7b68a3f0
        type <pointer_type 0x7f1f7b685738 type <pointer_type 0x7f1f7b685690>
            public unsigned DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7b68a3f0>>
        public unsigned DI size <integer_cst 0x7f1f7bb65bb8 64> unit-size <integer_cst 0x7f1f7bb65bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f1f7b68f780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f1f7b695870>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start dst_peer_29 = _74;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end
=======
======================================================================
[40;33m =======POP node_fun stack:make_linked_ref========= [0m
[40;44m =======node_fun:tail_link_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;33m =======POP node_fun stack:tail_link_ref========= [0m
[40;44m =======node_fun:alloc_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
<<<<<<< HEAD
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
=======
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->peer_ref = src_21;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 20: src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start src_34 = src_21->next;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _30 = &src_21->new_sha1;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end
=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1782543549 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_239364429 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2037022045 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_775026150 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_124747316 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1977014195 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_317729241 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2104612636 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

<<<<<<< HEAD
 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _23 = src_21->peer_ref;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_22 = &src_21->name;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
dot graph entry main
dot graph target entry end

len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start len_47 = strlen (dst_name_22);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
=======
======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1142412745 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_909256091 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1884296756 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1853032733 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_267768213 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1194101795 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_810178042 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1315919836 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 5dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _37 = strcmp (_36, dst_name_22);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start if (_37 == 0)
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
=======
======================================================================
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
=======
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end
<<<<<<< HEAD

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 19: free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start free (dst_name_22);
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1
=======

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_150347351 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_580082497 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_971923549 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2059986564 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_6079254 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_204796072 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_598526183 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _31 = &dst_peer_29->new_sha1;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = &ref_50->name;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_61>
len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = &ref_50->name;
len_47 = strlen (dst_name_22);
dot graph stmt end

dot graph stmt start _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph arrowsubgraph cluster_272511628 dot graph subgraph  src_34 = src_21->next;
src_21 = PHI <local_refs_12(2), src_34(20)>
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f89e028e000
    type <integer_type 0x7f89e026e888 size_t public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b738 precision:64 min <integer_cst 0x7f89e0756e88 0> max <integer_cst 0x7f89e0757500 18446744073709551615> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f89e0294cf0 len>
    def_stmt len_47 = strlen (dst_name_22);
    version:47
    ptr-info 0x7f89e0292780>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
=======
dot graph START

======================================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1683701075 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1307372899 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
<<<<<<< HEAD
=======
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299090
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e0294d80 ref>
    def_stmt ref_50 = calloc (1, _49);
    version:50
    ptr-info 0x7f89e02879a8>
 <ssa_name 0x7f89e0299090
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e0294d80 ref>
    def_stmt ref_50 = calloc (1, _49);
    version:50
    ptr-info 0x7f89e02879a8>
=======
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
is Reserved word function :calloc
=======
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
is Other function 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
 
 Start check Pointer Collect  

======================================================================
<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_70 = ref_50;
lto1: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1113757196 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1907926485 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 14: _70 = ref_50;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _70 = ref_50;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _70 = ref_50;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _46 = _70;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _46 = _70;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_71 = _46;
lto1: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 14: _71 = _46;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _71 = _46;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _71 = _46;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
======================================================================
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1083095453 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1234013813 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1874431195 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_836257203 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_869073714 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2113795625 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_725795600 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 14: ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start ret_40 = _71;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start ret_40 = _71;
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 16: ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
======================================================================
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1644099864 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_91059293 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start _45 = &ref_42->next;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _45 = &ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 17: remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end
=======
======================================================================
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f1f7b695540
    type <array_type 0x7f1f7b685e70
        type <integer_type 0x7f1f7b67dbd0 char public QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b685000>>
        QI size <integer_cst 0x7f1f7bb65ca8 8> unit-size <integer_cst 0x7f1f7bb65cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f1f7b685dc8 type <integer_type 0x7f1f7bb7a000 sizetype>
            DI
            size <integer_cst 0x7f1f7bb65bb8 constant 64>
            unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65be8 0> max <integer_cst 0x7f1f7bb65be8 0>>
        pointer_to_this <pointer_type 0x7f1f7b68a348>>
    readonly constant static "\000">
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start remote_tail = _45;
ref_50 = calloc (1, _49);
dot graph stmt end
=======
======================================================================
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start remote_tail = _45;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph stmt end

<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 14: _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _41 = remote_tail;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _41 = remote_tail;
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

*_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 14: *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *_41 = ret_40;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start *_41 = ret_40;
./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 16: _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _44 = ref_42->next;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _44 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 16: if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start if (_44 != 0B)
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start if (_44 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:137:16: warning: use location
  137 |         while (ref->next)
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 15: ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start ref_43 = ref_42->next;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start ref_43 = ref_42->next;
./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_74 = ret_40;
lto1: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 17: _74 = ret_40;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _74 = ret_40;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _74 = ret_40;
lto1: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1961829105 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 48188281 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1697738893 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 723601548 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1932485037 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 991369762 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 979103184 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 65982373 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 159805950 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1129450535 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_646064870 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1131729499 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 808339336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1041953451 dot graph subgraph  start ID : 1992926313 stmt(relate) ， Tree ID : 808339336 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 163235912
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_652144124 dot graph subgraph  start ID : 428948513 stmt(relate) ， Tree ID : 163235912 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579052640
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1336525571 dot graph subgraph  start ID : 1326777707 stmt(relate) ， Tree ID : 1579052640 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1370409777
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1640479635 dot graph subgraph  start ID : 1495021151 stmt(relate) ， Tree ID : 1370409777 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2030545342
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_188361551 dot graph subgraph  start ID : 106717669 stmt(relate) ， Tree ID : 2030545342 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1926652422
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_496414822 dot graph subgraph  start ID : 170459804 stmt(relate) ， Tree ID : 1926652422 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 555326147
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_606753183 dot graph subgraph  start ID : 1932485037 stmt(relate) ， Tree ID : 555326147 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1403287978
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2096288036 dot graph subgraph  start ID : 1129450535 stmt(relate) ， Tree ID : 1403287978 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 17: dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d750
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f1f7b695930>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start dst_peer_29 = _74;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start dst_peer_29 = _74;
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---calloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->force = _33;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 18: dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend
=======
======================================================================
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1840766996 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1823235584 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 268283830 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start dst_peer_32->force = _33;
ref_50 = calloc (1, _49);
dot graph stmt end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 562357062 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start dst_peer_32->force = _33;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end

<<<<<<< HEAD
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1789547561 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
_33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 58973278 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1880606854 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1549405578 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 18: _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2020802383 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

<<<<<<< HEAD
dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _33 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1928795136 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1099660823 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_596920284 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 737180053
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1713796525 dot graph subgraph  start ID : 982158619 stmt(relate) ， Tree ID : 737180053 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1032686287
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_355465153 dot graph subgraph  start ID : 704543204 stmt(relate) ， Tree ID : 1032686287 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2055548769
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1588290046 dot graph subgraph  start ID : 1327428251 stmt(relate) ， Tree ID : 2055548769 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 131030187
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_545416062 dot graph subgraph  start ID : 670141529 stmt(relate) ， Tree ID : 131030187 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2088463442
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_421447526 dot graph subgraph  start ID : 746022857 stmt(relate) ， Tree ID : 2088463442 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1675967532
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1748095996 dot graph subgraph  start ID : 1032649325 stmt(relate) ， Tree ID : 1675967532 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579510275
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1674866597 dot graph subgraph  start ID : 1789547561 stmt(relate) ， Tree ID : 1579510275 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 994079430
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1067512396 dot graph subgraph  start ID : 1928795136 stmt(relate) ， Tree ID : 994079430 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 18: dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d798
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f1f7b695948>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start dst_peer_32->peer_ref = src_21;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start dst_peer_32->peer_ref = src_21;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 20: src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start src_34 = src_21->next;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end
=======
======================================================================
[40;33m =======POP node_fun stack:alloc_ref========= [0m
[40;44m =======node_fun:alloc_ref_with_prefix========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231


======================================================================
<<<<<<< HEAD
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 17: _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _30 = &src_21->new_sha1;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _30 = &src_21->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 
=======
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_732341847 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_569336401 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1719656521 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2068867418 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_62332388 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1908018072 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_417798592 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_669085571 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
_23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d9d8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b6959a8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 3: _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _23 = src_21->peer_ref;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _23 = src_21->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_22 = &src_21->name;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start dst_name_22 = &src_21->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 14: len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start len_47 = strlen (dst_name_22);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start len_47 = strlen (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _48 = len_47;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _48 = len_47;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _49 = _48 + 81;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _49 = _48 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
dot graph entry main
dot graph target entry end

ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start ref_50 = calloc (1, _49);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
=======
======================================================================
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m
=======
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1856822461 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1997308868 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_362368920 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1532574397 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_118109050 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_924725982 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1174638310 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1112188481 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
dot graph entry main
dot graph target entry end

_37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 5: _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target line desend
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69da20
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f1f7b6997e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _37 = strcmp (_36, dst_name_22);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _37 = strcmp (_36, dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 5: if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 5dot graph target basicblock en1
=======
======================================================================
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start if (_37 == 0)
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start if (_37 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
<<<<<<< HEAD
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_983699261 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_907761516 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_514110411 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_857017996 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_689073004 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1613771234 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1453938280 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 19: free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 19dot graph target basicblock en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69dab0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <var_decl 0x7f1f7b699750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f1f7b6959c0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph stmt start free (dst_name_22);
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 17: _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend
=======
======================================================================
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _31 = &dst_peer_29->new_sha1;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _31 = &dst_peer_29->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_255385882 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1969236387 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

<<<<<<< HEAD
_52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1
=======
 ================== warring ================== 
 <ssa_name 0x7f1f7b69d900
    type <pointer_type 0x7f1f7b68a000
        type <array_type 0x7f1f7b6852a0 type <integer_type 0x7f1f7b67dbd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b68a000>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f1f7b695960>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 14: _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = &ref_50->name;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _52 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

<<<<<<< HEAD
dot graph target line desc form basic block 14: _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend
=======
======================================================================
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_68 = VDEF <.MEM_61>
ref_50 = calloc (1, _49);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = &ref_50->name;
ref_50 = calloc (1, _49);
dot graph stmt end

dot graph stmt start _51 = &ref_50->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph arrowsubgraph cluster_1684992674 dot graph subgraph  src_34 = src_21->next;
src_21 = PHI <local_refs_12(2), src_34(20)>
dot graph subgrapend

=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_894744678 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_800801944 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299090
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e0294d80 ref>
    def_stmt ref_50 = calloc (1, _49);
    version:50
    ptr-info 0x7f89e02879a8>
=======
 <ssa_name 0x7f1f7b69daf8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68f980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f1f7b6959d8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
ref_42 = PHI <ret_40(14), ref_43(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

<<<<<<< HEAD
 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======
======================================================================
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
=======
 ================== pre trace ptable finish================== 
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_243200266 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_495357026 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_328184893 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1310712662 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1227698873 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_897521294 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_882885535 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
<<<<<<< HEAD
=======
 <ssa_name 0x7f1f7b69da68
    type <integer_type 0x7f1f7b67d348 size_t public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a738 precision:64 min <integer_cst 0x7f1f7bb65e88 0> max <integer_cst 0x7f1f7bb66500 18446744073709551615> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f1f7b68fa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_60>
src_34 = src_21->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================
<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
memcpy (_53, dst_name_22, len_47);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
=======
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
<<<<<<< HEAD

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
dot graph entry main
dot graph target entry end

memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 14: memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_69 = VDEF <.MEM_68>
memcpy (_53, dst_name_22, len_47);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start memcpy (_53, dst_name_22, len_47);
memcpy (_53, dst_name_22, len_47);
dot graph stmt end

dot graph stmt start memcpy (_53, dst_name_22, len_47);
=======
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
<<<<<<< HEAD
dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph arrowsubgraph cluster_1739572514 dot graph subgraph  memcpy (_53, dst_name_22, len_47);
_53 = _52;
dot graph subgrapend

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph arrowsubgraph cluster_1875704877 dot graph subgraph  memcpy (_53, dst_name_22, len_47);
_53 = _52;
=======
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1149082643 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_959853682 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299168
    type <pointer_type 0x7f89e0772000
        type <void_type 0x7f89e076bf18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f89e0772000>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e07779d8>>
   
    def_stmt _53 = _52;
    version:53
    ptr-info 0x7f89e02879f0>
=======
 <ssa_name 0x7f1f7b69d990
    type <pointer_type 0x7f1f7bb81000
        type <void_type 0x7f1f7bb7af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f1f7bb81000>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7bb869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f1f7b695990>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
<<<<<<< HEAD
=======
[40;33m =======POP node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======node_fun:find_ref_by_name========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
# .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
hashcpy (_31, _30);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 
=======
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
# .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
hashcpy (_31, _30);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph arrowsubgraph cluster_1683225143 dot graph subgraph  hashcpy (_31, _30);
_31 = &dst_peer_29->new_sha1;
dot graph subgrapend

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph arrowsubgraph cluster_1295671710 dot graph subgraph  hashcpy (_31, _30);
_31 = &dst_peer_29->new_sha1;
=======
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_643419960 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1566881236 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e318
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _31 = &dst_peer_29->new_sha1;
    version:31
    ptr-info 0x7f89e0287858>
=======
 <ssa_name 0x7f1f7b69dc60
    type <pointer_type 0x7f1f7b687c78
        type <array_type 0x7f1f7b687bd0 type <integer_type 0x7f1f7b67dc78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f1f7b6851f8>
            pointer_to_this <pointer_type 0x7f1f7b687c78>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f1f7b6959f0>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e028e2d0
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _30 = &src_21->new_sha1;
    version:30
    ptr-info 0x7f89e0287840>
 <ssa_name 0x7f89e028e2d0
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _30 = &src_21->new_sha1;
    version:30
    ptr-info 0x7f89e0287840>
=======
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e2d0
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _30 = &src_21->new_sha1;
    version:30
    ptr-info 0x7f89e0287840>
=======
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
# .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
hashcpy (_31, _30);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 
=======
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
# .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
dot graph entry main
dot graph target entry end

hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_75 = VDEF <.MEM_73>
hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start hashcpy (_31, _30);
hashcpy (_31, _30);
dot graph stmt end

dot graph stmt start hashcpy (_31, _30);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph arrowsubgraph cluster_796003769 dot graph subgraph  hashcpy (_31, _30);
_30 = &src_21->new_sha1;
dot graph subgrapend

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph arrowsubgraph cluster_694238837 dot graph subgraph  hashcpy (_31, _30);
_30 = &src_21->new_sha1;
=======
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1628939254 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_352758773 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e028e2d0
    type <pointer_type 0x7f89e027b5e8
        type <array_type 0x7f89e026e5e8 type <integer_type 0x7f89e076b348 unsigned char>
            BLK
            size <integer_cst 0x7f89e0265810 constant 160>
            unit-size <integer_cst 0x7f89e02657f8 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f89e026e540>
            pointer_to_this <pointer_type 0x7f89e027b5e8>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _30 = &src_21->new_sha1;
    version:30
    ptr-info 0x7f89e0287840>
=======
 <ssa_name 0x7f1f7b69ddc8
    type <pointer_type 0x7f1f7b67dd20
        type <integer_type 0x7f1f7b67dc78 char readonly QI
            size <integer_cst 0x7f1f7bb65ca8 constant 8>
            unit-size <integer_cst 0x7f1f7bb65cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a3f0 precision:8 min <integer_cst 0x7f1f7b674738 -128> max <integer_cst 0x7f1f7b674720 127>
            pointer_to_this <pointer_type 0x7f1f7b67dd20>>
        unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b67d888>>
    var <parm_decl 0x7f1f7b68fc00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f1f7b695a50>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f89e027d2d0
    type <array_type 0x7f89e027bdc8
        type <integer_type 0x7f89e026ebd0 char public QI
            size <integer_cst 0x7f89e0756ca8 constant 8>
            unit-size <integer_cst 0x7f89e0756cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b3f0 precision:8 min <integer_cst 0x7f89e0265720 -128> max <integer_cst 0x7f89e0265708 127>
            pointer_to_this <pointer_type 0x7f89e026ec78>>
        BLK
        size <integer_cst 0x7f89e0265918 constant 432>
        unit-size <integer_cst 0x7f89e0265990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f89e027bd20 type <integer_type 0x7f89e076b000 sizetype>
            DI
            size <integer_cst 0x7f89e0756bb8 constant 64>
            unit-size <integer_cst 0x7f89e0756bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e076b738 precision:64 min <integer_cst 0x7f89e0756be8 0> max <integer_cst 0x7f89e0265978 53>>
        pointer_to_this <pointer_type 0x7f89e027be70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e075e750
    type <pointer_type 0x7f89e0276a80
        type <record_type 0x7f89e02769d8 FILE BLK
            size <integer_cst 0x7f89e0265840 constant 1728>
            unit-size <integer_cst 0x7f89e0265900 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e0276930 fields <field_decl 0x7f89e0277a18 _flags> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e0276a80>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e027bbd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f89e0287750>
 <ssa_name 0x7f89e075e750
    type <pointer_type 0x7f89e0276a80
        type <record_type 0x7f89e02769d8 FILE BLK
            size <integer_cst 0x7f89e0265840 constant 1728>
            unit-size <integer_cst 0x7f89e0265900 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e0276930 fields <field_decl 0x7f89e0277a18 _flags> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e0276a80>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e027bbd0>>
=======
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f89e0287750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e075e750
    type <pointer_type 0x7f89e0276a80
        type <record_type 0x7f89e02769d8 FILE BLK
            size <integer_cst 0x7f89e0265840 constant 1728>
            unit-size <integer_cst 0x7f89e0265900 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e0276930 fields <field_decl 0x7f89e0277a18 _flags> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e0276a80>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e027bbd0>>
=======
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f89e0287750>
is Other function 
 
 Start check Pointer Collect  

======================================================================
<<<<<<< HEAD
# .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 25: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend
=======

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target loc start # .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

<<<<<<< HEAD
dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 25: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph arrowsubgraph cluster_998928250 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph arrowsubgraph cluster_96182260 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
=======
======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1416706456 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1991308174 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e075e750
    type <pointer_type 0x7f89e0276a80
        type <record_type 0x7f89e02769d8 FILE BLK
            size <integer_cst 0x7f89e0265840 constant 1728>
            unit-size <integer_cst 0x7f89e0265900 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e0276930 fields <field_decl 0x7f89e0277a18 _flags> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e0276a80>>
        unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e027bbd0>>
=======
 <ssa_name 0x7f1f7b69dca8
    type <integer_type 0x7f1f7bb7a5e8 int public SI
        size <integer_cst 0x7f1f7bb65df8 constant 32>
        unit-size <integer_cst 0x7f1f7bb65e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7bb7a5e8 precision:32 min <integer_cst 0x7f1f7bb65db0 -2147483648> max <integer_cst 0x7f1f7bb65dc8 2147483647>
        pointer_to_this <pointer_type 0x7f1f7bb819d8>>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f89e0287750>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_61>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================
<<<<<<< HEAD
=======
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1885333170
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1534815506 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1534815506 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1885333170
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 768550508 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 768550508 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1885333170
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 912487832 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 912487832 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1885333170
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 499520339 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

======================================================================
[40;31m    collect Stmt in loop [0m

<<<<<<< HEAD
======================================================================
dot graph entry main
dot graph target entry end

if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 28: if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph stmt start if (ref_56 != 0B)
free_ref (ref_56);
dot graph stmt end

dot graph stmt start if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
dot graph entry main
dot graph target entry end

free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1885333170
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1752249769 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target line desc form basic block 27: free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

<<<<<<< HEAD
dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end
=======
 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1885333170
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1820249348 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph target basicblock start from main basic block 27dot graph target basicblock en1

dot graph stmt start free_ref (ref_56);
free_ref (ref_56);
dot graph stmt end

dot graph stmt start free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1048122858
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2076903426 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1013630750
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 461784118 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 2076903426 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 461784118 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1048122858
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 368240257 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1013630750
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 361838705 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 368240257 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 361838705 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1048122858
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 68990297 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 1013630750
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 479918336 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 68990297 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
=======
dot graph relate stmt start ID : 479918336 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1048122858
=======
dot graph arrowdot graph start relate for1ID : 1013630750
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 2057616638 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1915722398 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1048122858
=======
dot graph arrowdot graph start relate for1ID : 1013630750
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 2140329170 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 617224587 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1048122858
=======
dot graph arrowdot graph start relate for1ID : 1013630750
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 310715119 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 301671076 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
<<<<<<< HEAD
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
=======
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 352168998
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1421480920 stmt(free) :free (_2);
=======
dot graph start relate form ID : 662983429
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1418026531 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1421480920 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1418026531 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 352168998
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1522478628 stmt(free) :free (_3);
=======
dot graph start relate form ID : 662983429
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 544871342 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1522478628 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 544871342 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 352168998
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1538790751 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 662983429
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1158340455 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1538790751 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>
=======
dot graph relate stmt start ID : 1158340455 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 352168998
=======
dot graph arrowdot graph start relate for1ID : 662983429
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1691164479 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1746211424 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 352168998
=======
dot graph arrowdot graph start relate for1ID : 662983429
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 171063786 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 1855584004 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 352168998
=======
dot graph arrowdot graph start relate for1ID : 662983429
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1723656963 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 238555681 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
<<<<<<< HEAD
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

next_57 = ref_56->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 27: next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 27dot graph target basicblock en1

dot graph stmt start next_57 = ref_56->next;
free_ref (ref_56);
dot graph stmt end

dot graph stmt start next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph arrowsubgraph cluster_920041031 dot graph subgraph  if (ref_56 != 0B)
ref_56 = PHI <local_refs_12(26), next_57(27)>
dot graph subgrapend

dot graph start relate for1ID : 1048122858
from free_ref basic block 3dot graph end relate end

subgraph cluster_683531872 dot graph subgraph  start ID : 310715119 stmt(relate) ， Tree ID : 1048122858 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 352168998
from free_ref basic block 3dot graph end relate end

subgraph cluster_1691632745 dot graph subgraph  start ID : 1723656963 stmt(relate) ， Tree ID : 352168998 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 
=======
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 496249071
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 590985892 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 590985892 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 496249071
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1387638324 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1387638324 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 496249071
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1456102753 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1456102753 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 496249071
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1234405852 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299360
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a2d0 ref>
    def_stmt ref_56 = PHI <local_refs_12(26), next_57(27)>
    version:56
    ptr-info 0x7f89e0287a38>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (ref_56 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
=======
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 496249071
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 807035912 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
<<<<<<< HEAD

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_66 = VDEF <.MEM_63>
free_ref (ref_56);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
=======
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 496249071
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 937558359 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

<<<<<<< HEAD
============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^
=======
 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1587164625 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_76258720 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1836393116
from free_ref basic block 3dot graph end relate end

subgraph cluster_781382885 dot graph subgraph  start ID : 1091315843 stmt(relate) ， Tree ID : 1836393116 : _3 = ref_5(D)->symref;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 924098099
from free_ref basic block 3dot graph end relate end

subgraph cluster_1325014147 dot graph subgraph  start ID : 398683974 stmt(relate) ， Tree ID : 924098099 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1418516718
from free_ref basic block 3dot graph end relate end

subgraph cluster_1611074227 dot graph subgraph  start ID : 939355666 stmt(relate) ， Tree ID : 1418516718 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1877155993
from free_ref basic block 3dot graph end relate end

subgraph cluster_1549933394 dot graph subgraph  start ID : 2125484847 stmt(relate) ， Tree ID : 1877155993 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1885333170
from free_ref basic block 3dot graph end relate end

subgraph cluster_90018331 dot graph subgraph  start ID : 1820249348 stmt(relate) ， Tree ID : 1885333170 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1013630750
from free_ref basic block 3dot graph end relate end

subgraph cluster_2110594566 dot graph subgraph  start ID : 301671076 stmt(relate) ， Tree ID : 1013630750 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 662983429
from free_ref basic block 3dot graph end relate end

subgraph cluster_1154699515 dot graph subgraph  start ID : 238555681 stmt(relate) ， Tree ID : 662983429 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 496249071
from free_ref basic block 3dot graph end relate end

subgraph cluster_1910267679 dot graph subgraph  start ID : 937558359 stmt(relate) ， Tree ID : 496249071 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

===== possiable asias =====
# VUSE <.MEM_63>
next_57 = ref_56->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
<<<<<<< HEAD
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

if (ref_54 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 31: if (ref_54 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start if (ref_54 != 0B)
free_ref (ref_54);
dot graph stmt end

dot graph stmt start if (ref_54 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
=======
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
# .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
dot graph entry main
dot graph target entry end

free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 30: free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

dot graph stmt start free_ref (ref_54);
free_ref (ref_54);
dot graph stmt end

dot graph stmt start free_ref (ref_54);
=======
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 793345380
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 453595931 stmt(free) :free (_2);
=======
dot graph start relate form ID : 976741669
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1616483633 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 453595931 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1616483633 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 793345380
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 764131311 stmt(free) :free (_3);
=======
dot graph start relate form ID : 976741669
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 124622736 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 764131311 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 124622736 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 793345380
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1962030599 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 976741669
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1456660005 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1962030599 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
dot graph relate stmt start ID : 1456660005 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 793345380
=======
dot graph arrowdot graph start relate for1ID : 976741669
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 726107559 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1384722384 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 793345380
=======
dot graph arrowdot graph start relate for1ID : 976741669
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 301640337 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 741847323 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 793345380
=======
dot graph arrowdot graph start relate for1ID : 976741669
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1554119465 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1758331081 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 454328788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1984865481 stmt(free) :free (_2);
=======
dot graph start relate form ID : 2047705813
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 12390206 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1984865481 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 12390206 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 454328788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 702307528 stmt(free) :free (_3);
=======
dot graph start relate form ID : 2047705813
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 155718775 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 702307528 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 155718775 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 454328788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1250332558 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 2047705813
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1058562620 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1250332558 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
dot graph relate stmt start ID : 1058562620 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 454328788
=======
dot graph arrowdot graph start relate for1ID : 2047705813
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 531620670 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1758601631 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 454328788
=======
dot graph arrowdot graph start relate for1ID : 2047705813
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 1701235778 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 2011302780 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 454328788
=======
dot graph arrowdot graph start relate for1ID : 2047705813
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1346514818 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1297118301 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
<<<<<<< HEAD
dot graph entry main
dot graph target entry end

next_55 = ref_54->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 30: next_55 = ref_54->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

dot graph stmt start next_55 = ref_54->next;
free_ref (ref_54);
dot graph stmt end

dot graph stmt start next_55 = ref_54->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph arrowsubgraph cluster_1579743528 dot graph subgraph  if (ref_54 != 0B)
ref_54 = PHI <_7(29), next_55(30)>
dot graph subgrapend

dot graph start relate for1ID : 793345380
from free_ref basic block 3dot graph end relate end

subgraph cluster_1630655557 dot graph subgraph  start ID : 1554119465 stmt(relate) ， Tree ID : 793345380 : _3 = ref_5(D)->symref;
=======
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_107367054 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph start relate for1ID : 1104941200
from free_ref basic block 3dot graph end relate end

subgraph cluster_454805024 dot graph subgraph  start ID : 411558629 stmt(relate) ， Tree ID : 1104941200 : _3 = ref_5(D)->symref;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

<<<<<<< HEAD
dot graph start relate for1ID : 454328788
from free_ref basic block 3dot graph end relate end

subgraph cluster_1714755075 dot graph subgraph  start ID : 1346514818 stmt(relate) ， Tree ID : 454328788 : _3 = ref_5(D)->symref;
=======
dot graph start relate for1ID : 1698687463
from free_ref basic block 3dot graph end relate end

subgraph cluster_537272978 dot graph subgraph  start ID : 655609013 stmt(relate) ， Tree ID : 1698687463 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 976741669
from free_ref basic block 3dot graph end relate end

subgraph cluster_1563469807 dot graph subgraph  start ID : 1758331081 stmt(relate) ， Tree ID : 976741669 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2047705813
from free_ref basic block 3dot graph end relate end

subgraph cluster_1689210876 dot graph subgraph  start ID : 1297118301 stmt(relate) ， Tree ID : 2047705813 : _3 = ref_5(D)->symref;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e0299288
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
    var <var_decl 0x7f89e029a120 ref>
    def_stmt ref_54 = PHI <_7(29), next_55(30)>
    version:54
    ptr-info 0x7f89e0287a08>
=======
 <ssa_name 0x7f1f7b69dea0
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
    var <parm_decl 0x7f1f7b68fc80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f1f7b695a80>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (ref_54 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_65 = VDEF <.MEM_62>
free_ref (ref_54);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_78 = VDEF <.MEM_59>
free (dst_name_22);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_62>
next_55 = ref_54->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:free_ref========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

<<<<<<< HEAD
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
=======
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
<<<<<<< HEAD
=======
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1648733825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1540788547 stmt(free) :free (_2);
=======
dot graph start relate form ID : 1344308890
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 353544519 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1540788547 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 353544519 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1648733825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1707600597 stmt(free) :free (_3);
=======
dot graph start relate form ID : 1344308890
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1128891853 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1707600597 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 1128891853 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1648733825
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1959448944 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 1344308890
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1420567611 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1959448944 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1420567611 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1648733825
=======
dot graph arrowdot graph start relate for1ID : 1344308890
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1892957545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 1134927404 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1648733825
=======
dot graph arrowdot graph start relate for1ID : 1344308890
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 981597870 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 306422352 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1648733825
=======
dot graph arrowdot graph start relate for1ID : 1344308890
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1334443925 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 884158190 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1284264648
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 525278701 stmt(free) :free (_2);
=======
dot graph start relate form ID : 537377150
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 396440683 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 525278701 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 396440683 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1284264648
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1505507711 stmt(free) :free (_3);
=======
dot graph start relate form ID : 537377150
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 847269108 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1505507711 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 847269108 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1284264648
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 860437963 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 537377150
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1692076666 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 860437963 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1692076666 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1284264648
=======
dot graph arrowdot graph start relate for1ID : 537377150
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1445319732 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 159224714 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1284264648
=======
dot graph arrowdot graph start relate for1ID : 537377150
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 41555935 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 1824010777 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1284264648
=======
dot graph arrowdot graph start relate for1ID : 537377150
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 404587060 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1161076651 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 91181464
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 495151866 stmt(free) :free (_2);
=======
dot graph start relate form ID : 283847451
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1133187135 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 495151866 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1133187135 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 91181464
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1168718372 stmt(free) :free (_3);
=======
dot graph start relate form ID : 283847451
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 398315387 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1168718372 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 398315387 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 91181464
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2053212063 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 283847451
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1025694774 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 2053212063 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 1025694774 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 91181464
=======
dot graph arrowdot graph start relate for1ID : 283847451
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1221259426 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 744034568 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 91181464
=======
dot graph arrowdot graph start relate for1ID : 283847451
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 1470358709 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 298537552 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 91181464
=======
dot graph arrowdot graph start relate for1ID : 283847451
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1459847881 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1038084981 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1675588214
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1307740542 stmt(free) :free (_2);
=======
dot graph start relate form ID : 899753344
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1357100173 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 1307740542 stmt(free) :free (_2);
=======
dot graph relate stmt start ID : 1357100173 stmt(free) :free (_2);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1675588214
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 14671761 stmt(free) :free (_3);
=======
dot graph start relate form ID : 899753344
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 649202964 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 14671761 stmt(free) :free (_3);
=======
dot graph relate stmt start ID : 649202964 stmt(free) :free (_3);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
<<<<<<< HEAD
dot graph start relate form ID : 1675588214
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 778437124 stmt(free) :free (ref_5(D));
=======
dot graph start relate form ID : 899753344
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 763572476 stmt(free) :free (ref_5(D));
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

<<<<<<< HEAD
dot graph relate stmt start ID : 778437124 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
dot graph relate stmt start ID : 763572476 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1675588214
=======
dot graph arrowdot graph start relate for1ID : 899753344
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
<<<<<<< HEAD
dot graph relate stmt start ID : 1839361213 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
=======
dot graph relate stmt start ID : 506734826 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1675588214
=======
dot graph arrowdot graph start relate for1ID : 899753344
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
<<<<<<< HEAD
dot graph relate stmt start ID : 1715907539 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
=======
dot graph relate stmt start ID : 756570018 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
<<<<<<< HEAD
dot graph arrowdot graph start relate for1ID : 1675588214
=======
dot graph arrowdot graph start relate for1ID : 899753344
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
<<<<<<< HEAD
dot graph relate stmt start ID : 2124951942 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
=======
dot graph relate stmt start ID : 1218377500 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

<<<<<<< HEAD
dot graph arrowsubgraph cluster_1271621093 dot graph subgraph  free_ref (_1);
=======
dot graph arrowsubgraph cluster_1044007804 dot graph subgraph  free_ref (_1);
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

<<<<<<< HEAD
dot graph arrowsubgraph cluster_1199079448 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1050221684
from free_ref basic block 3dot graph end relate end

subgraph cluster_1692223370 dot graph subgraph  start ID : 744585745 stmt(relate) ， Tree ID : 1050221684 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 988531808
from free_ref basic block 3dot graph end relate end

subgraph cluster_772871271 dot graph subgraph  start ID : 644427797 stmt(relate) ， Tree ID : 988531808 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1405079620
from free_ref basic block 3dot graph end relate end

subgraph cluster_592384348 dot graph subgraph  start ID : 1603193248 stmt(relate) ， Tree ID : 1405079620 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2145716117
from free_ref basic block 3dot graph end relate end

subgraph cluster_1252340319 dot graph subgraph  start ID : 353884020 stmt(relate) ， Tree ID : 2145716117 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1648733825
from free_ref basic block 3dot graph end relate end

subgraph cluster_584836567 dot graph subgraph  start ID : 1334443925 stmt(relate) ， Tree ID : 1648733825 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1284264648
from free_ref basic block 3dot graph end relate end

subgraph cluster_337858245 dot graph subgraph  start ID : 404587060 stmt(relate) ， Tree ID : 1284264648 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 91181464
from free_ref basic block 3dot graph end relate end

subgraph cluster_86454541 dot graph subgraph  start ID : 1459847881 stmt(relate) ， Tree ID : 91181464 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1675588214
from free_ref basic block 3dot graph end relate end

subgraph cluster_1919280492 dot graph subgraph  start ID : 2124951942 stmt(relate) ， Tree ID : 1675588214 : _3 = ref_5(D)->symref;
=======
dot graph arrowsubgraph cluster_172556177 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1836393116
from free_ref basic block 3dot graph end relate end

subgraph cluster_760104728 dot graph subgraph  start ID : 1091315843 stmt(relate) ， Tree ID : 1836393116 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 924098099
from free_ref basic block 3dot graph end relate end

subgraph cluster_240833047 dot graph subgraph  start ID : 398683974 stmt(relate) ， Tree ID : 924098099 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1418516718
from free_ref basic block 3dot graph end relate end

subgraph cluster_526100696 dot graph subgraph  start ID : 939355666 stmt(relate) ， Tree ID : 1418516718 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1877155993
from free_ref basic block 3dot graph end relate end

subgraph cluster_1888996581 dot graph subgraph  start ID : 2125484847 stmt(relate) ， Tree ID : 1877155993 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1885333170
from free_ref basic block 3dot graph end relate end

subgraph cluster_1661400658 dot graph subgraph  start ID : 1820249348 stmt(relate) ， Tree ID : 1885333170 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1013630750
from free_ref basic block 3dot graph end relate end

subgraph cluster_1661028101 dot graph subgraph  start ID : 301671076 stmt(relate) ， Tree ID : 1013630750 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 662983429
from free_ref basic block 3dot graph end relate end

subgraph cluster_47935285 dot graph subgraph  start ID : 238555681 stmt(relate) ， Tree ID : 662983429 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 496249071
from free_ref basic block 3dot graph end relate end

subgraph cluster_398075200 dot graph subgraph  start ID : 937558359 stmt(relate) ， Tree ID : 496249071 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1344308890
from free_ref basic block 3dot graph end relate end

subgraph cluster_50921603 dot graph subgraph  start ID : 884158190 stmt(relate) ， Tree ID : 1344308890 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 537377150
from free_ref basic block 3dot graph end relate end

subgraph cluster_444375968 dot graph subgraph  start ID : 1161076651 stmt(relate) ， Tree ID : 537377150 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 283847451
from free_ref basic block 3dot graph end relate end

subgraph cluster_1245344308 dot graph subgraph  start ID : 1038084981 stmt(relate) ， Tree ID : 283847451 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 899753344
from free_ref basic block 3dot graph end relate end

subgraph cluster_1742998269 dot graph subgraph  start ID : 1218377500 stmt(relate) ， Tree ID : 899753344 : _3 = ref_5(D)->symref;
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
<<<<<<< HEAD
 <ssa_name 0x7f89e02999d8
    type <pointer_type 0x7f89e026e738
        type <record_type 0x7f89e026e690 ref BLK
            size <integer_cst 0x7f89e082b0a8 constant 640>
            unit-size <integer_cst 0x7f89e0265738 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f89e026e690 fields <field_decl 0x7f89e0271850 next> context <translation_unit_decl 0x7f89e0761168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f89e026e738>>
        public unsigned DI
        size <integer_cst 0x7f89e0756bb8 constant 64>
        unit-size <integer_cst 0x7f89e0756bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f89e026e7e0>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f89e0287ac8>
=======
 <ssa_name 0x7f1f7b6a7090
    type <pointer_type 0x7f1f7b685690
        type <record_type 0x7f1f7b6855e8 ref BLK
            size <integer_cst 0x7f1f7bc3a0a8 constant 640>
            unit-size <integer_cst 0x7f1f7b674768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f1f7b6855e8 fields <field_decl 0x7f1f7b680850 next> context <translation_unit_decl 0x7f1f7bb70168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f1f7b685690>>
        public unsigned DI
        size <integer_cst 0x7f1f7bb65bb8 constant 64>
        unit-size <integer_cst 0x7f1f7bb65bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f1f7b685738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f1f7b695ac8>
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:free_ref========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 47322052]:
_1 = get_local_heads ();
_2 = (long int) _1;
local_refs_12 = (struct ref *) _2;
remote_tail = &remote_refs;
_3 = remote_refs;
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 382878437]:
dst_name_22 = &src_21->name;
_23 = src_21->peer_ref;
if (_23 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 7>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 268014907]:
// predicted unlikely by continue predictor.
goto <bb 20>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1014686025]:
_36 = &list_35->name;
_37 = strcmp (_36, dst_name_22);
if (_37 == 0)
  goto <bb 8>; [5.50%]
else
  goto <bb 6>; [94.50%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 958878293]:
list_38 = list_35->next;

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 1073741824]:
# list_35 = PHI <_3(3), list_38(6)>
if (list_35 != 0B)
  goto <bb 5>; [94.50%]
else
  goto <bb 8>; [5.50%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 114863531]:
# _39 = PHI <list_35(5), 0B(7)>
_67 = _39;
dst_peer_24 = _67;
if (dst_peer_24 != 0B)
  goto <bb 9>; [70.00%]
else
  goto <bb 11>; [30.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 80404472]:
_25 = dst_peer_24->peer_ref;
if (_25 != 0B)
  goto <bb 10>; [54.59%]
else
  goto <bb 18>; [45.41%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 43892802]:
// predicted unlikely by goto predictor.
goto <bb 19>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 34459059]:
_26 = BIT_FIELD_REF <MEM[(const struct refspec *)0B], 8, 0>;
_27 = _26 & 4;
if (_27 != 0)
  goto <bb 12>; [67.00%]
else
  goto <bb 14>; [33.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 23087570]:
_28 = 1;
if (_28 == 0)
  goto <bb 13>; [34.00%]
else
  goto <bb 14>; [66.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 7849774]:
// predicted unlikely by goto predictor.
goto <bb 19>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 26609285]:
len_47 = strlen (dst_name_22);
_48 = len_47;
_49 = _48 + 81;
ref_50 = calloc (1, _49);
_51 = &ref_50->name;
GIMPLE_NOP
_52 = &ref_50->name;
_53 = _52;
memcpy (_53, dst_name_22, len_47);
_70 = ref_50;
_46 = _70;
_71 = _46;
ret_40 = _71;
_41 = remote_tail;
*_41 = ret_40;
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 215293310]:
ref_43 = ref_42->next;

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 241902595]:
# ref_42 = PHI <ret_40(14), ref_43(15)>
_44 = ref_42->next;
if (_44 != 0B)
  goto <bb 15>; [89.00%]
else
  goto <bb 17>; [11.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 26609285]:
_45 = &ref_42->next;
remote_tail = _45;
_74 = ret_40;
dst_peer_29 = _74;
_30 = &src_21->new_sha1;
_31 = &dst_peer_29->new_sha1;
hashcpy (_31, _30);

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 63120956]:
# dst_peer_32 = PHI <dst_peer_24(9), dst_peer_29(17)>
dst_peer_32->peer_ref = src_21;
_33 = MEM[(const struct refspec *)0B].force;
dst_peer_32->force = _33;

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 114863531]:
free_name:
free (dst_name_22);

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 382878439]:
src_34 = src_21->next;

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 430200491]:
# src_21 = PHI <local_refs_12(2), src_34(20)>
if (src_21 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 22>; [11.00%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 47322054]:
_64 = 0;
_4 = _64;
if (_4 != 0)
  goto <bb 23>; [34.00%]
else
  goto <bb 24>; [66.00%]

=======is loop:0=========

 bb index 23 
<bb 23> [local count: 16089498]:
// predicted unlikely by goto predictor.
goto <bb 26>; [100.00%]

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 31232555]:
_5 = remote_refs;
if (_5 == 0B)
  goto <bb 25>; [9.81%]
else
  goto <bb 26>; [90.19%]

=======is loop:0=========

 bb index 25 
<bb 25> [local count: 3063914]:
_6 = stderr;
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
// predicted unlikely by goto predictor.

=======is loop:0=========

 bb index 26 
<bb 26> [local count: 47322054]:
cleanup:
goto <bb 28>; [100.00%]

=======is loop:1=========

 bb index 27 
<bb 27> [local count: 382878438]:
next_57 = ref_56->next;
free_ref (ref_56);

=======is loop:1=========

 bb index 28 
<bb 28> [local count: 430200491]:
# ref_56 = PHI <local_refs_12(26), next_57(27)>
if (ref_56 != 0B)
  goto <bb 27>; [89.00%]
else
  goto <bb 29>; [11.00%]

=======is loop:0=========

 bb index 29 
<bb 29> [local count: 47322054]:
_7 = remote_refs;
goto <bb 31>; [100.00%]

=======is loop:1=========

 bb index 30 
<bb 30> [local count: 382878438]:
next_55 = ref_54->next;
free_ref (ref_54);

=======is loop:1=========

 bb index 31 
<bb 31> [local count: 430200491]:
# ref_54 = PHI <_7(29), next_55(30)>
if (ref_54 != 0B)
  goto <bb 30>; [89.00%]
else
  goto <bb 32>; [11.00%]

=======is loop:0=========

 bb index 32 
<bb 32> [local count: 47322054]:
return 0;

=======Mapping node_fun:free_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (ref_5(D) == 0B)
  goto <bb 4>; [30.95%]
else
  goto <bb 3>; [69.05%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 741418729]:
_1 = ref_5(D)->peer_ref;
free_ref (_1);
_2 = ref_5(D)->remote_status;
free (_2);
_3 = ref_5(D)->symref;
free (_3);
free (ref_5(D));

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
<<<<<<< HEAD
[40;34m    all ptable point : 19 [0m
[40;34m    analyzable ptable point : 14 [0m
[40;34m    used_stmt array stack totalsize of : 0.003824 mb[0m
[40;34m    collect time: : 0.006184 s [0m
[40;34m    algorithm time: 0.080671 s [0m
[40;34m    gimple stmt count : : 85 [0m
[40;34m    this report analysis in Sun Feb 20 09:53:00 2022
=======
[40;34m    all ptable point : 40 [0m
[40;34m    analyzable ptable point : 34 [0m
[40;34m    used_stmt array stack totalsize of : 0.003056 mb[0m
[40;34m    collect time: : 0.007627 s [0m
[40;34m    algorithm time: 0.368507 s [0m
[40;34m    gimple stmt count : : 87 [0m
[40;34m    this report analysis in Sun Feb 20 09:38:32 2022
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
<<<<<<< HEAD
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 82%)
 phase opt and generate             :   0.05 (100%)   0.05 (100%)   0.10 (100%)   413k ( 16%)
 callgraph functions expansion      :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 10%)   262k ( 10%)
 tree CFG cleanup                   :   0.00 (  0%)   0.00 (  0%)   0.02 ( 20%)   864  (  0%)
 integrated RA                      :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)    51k (  2%)
 plugin execution                   :   0.04 ( 80%)   0.05 (100%)   0.08 ( 80%)  1512  (  0%)
 TOTAL                              :   0.05          0.05          0.10         2633k
/usr/bin/ld: /tmp/ccRsYfF8.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x43): undefined reference to `get_local_heads'
/usr/bin/ld: <artificial>:(.text+0x133): undefined reference to `hashcpy'
=======
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 76%)
 phase opt and generate             :   0.15 (100%)   0.25 (100%)   0.40 (100%)   626k ( 22%)
 callgraph functions expansion      :   0.02 ( 13%)   0.00 (  0%)   0.02 (  5%)   521k ( 18%)
 ipa lto gimple in                  :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)    78k (  3%)
 ipa points-to                      :   0.01 (  7%)   0.00 (  0%)   0.00 (  0%)  5056  (  0%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)   220k (  8%)
 LRA non-specific                   :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  1464  (  0%)
 shorten branches                   :   0.01 (  7%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 plugin execution                   :   0.13 ( 87%)   0.25 (100%)   0.37 ( 92%)  1728  (  0%)
 TOTAL                              :   0.15          0.25          0.40         2845k
/usr/bin/ld: /tmp/ccYftbK2.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/ccYftbK2.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
>>>>>>> 61f47d3d719cad4c799c698d533850009e50b231
collect2: error: ld returned 1 exit status
