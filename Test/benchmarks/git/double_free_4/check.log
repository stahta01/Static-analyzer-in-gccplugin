../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_4/git_df_4.c:10:
./benchmarks/git/double_free_4/../git.h: At top level:
./benchmarks/git/double_free_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
   81 |         if (!strcmp(list->name, name))
      |              ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strcmp’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/double_free_4/git_df_4.c: In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   89 |         size_t len = strlen(name);
      |                      ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_4/git_df_4.c:89:22: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:91:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_4/git_df_4.c: In function ‘copy_ref’:
./benchmarks/git/double_free_4/git_df_4.c:107:15: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
  107 |         len = strlen(ref->name);
      |               ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:107:15: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/double_free_4/git_df_4.c:109:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  109 |         memcpy(cpy, ref, sizeof(struct ref) + len + 1);
      |         ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:109:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
In file included from ./benchmarks/git/double_free_4/git_df_4.c:9:
./benchmarks/git/double_free_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_4/git_df_4.c:111:37: note: in expansion of macro ‘xstrdup’
  111 |         cpy->symref = ref->symref ? xstrdup(ref->symref) : NULL;
      |                                     ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘try_explicit_object_name’:
./benchmarks/git/double_free_4/git_df_4.c:124:17: warning: implicit declaration of function ‘hashclr’ [-Wimplicit-function-declaration]
  124 |                 hashclr(ref->new_sha1);
      |                 ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:127:13: warning: implicit declaration of function ‘get_sha1’ [-Wimplicit-function-declaration]
  127 |         if (get_sha1(name, sha1))
      |             ^~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:130:9: warning: implicit declaration of function ‘hashcpy’ [-Wimplicit-function-declaration]
  130 |         hashcpy(ref->new_sha1, sha1);
      |         ^~~~~~~
./benchmarks/git/double_free_4/git_df_4.c: In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: implicit declaration of function ‘get_local_heads’ [-Wimplicit-function-declaration]
  215 |         local_refs = get_local_heads();
      |                      ^~~~~~~~~~~~~~~
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: assignment to ‘struct ref *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  215 |         local_refs = get_local_heads();
      |                    ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 50%)
 phase parsing                      :   0.02 ( 67%)   0.02 (100%)   0.04 ( 80%)  1109k ( 42%)
 phase opt and generate             :   0.01 ( 33%)   0.00 (  0%)   0.01 ( 20%)   192k (  7%)
 callgraph optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    16  (  0%)
 callgraph ipa passes               :   0.01 ( 33%)   0.00 (  0%)   0.01 ( 20%)   110k (  4%)
 preprocessing                      :   0.01 ( 33%)   0.01 ( 50%)   0.01 ( 20%)   325k ( 12%)
 lexical analysis                   :   0.00 (  0%)   0.00 (  0%)   0.02 ( 40%)     0  (  0%)
 parser struct body                 :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    77k (  3%)
 parser function body               :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)    97k (  4%)
 branch prediction                  :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  5928  (  0%)
 symout                             :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.03          0.02          0.05         2609k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 97%)
 phase opt and generate             :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     0  (  0%)
 ipa dead code removal              :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     0  (  0%)
 TOTAL                              :   0.00          0.00          0.01         2228k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=6
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=6
=======node_fun:match_refs=========
node:= 2 
 	next_branch :=15
node:= 3 
 	next_branch :=4
	next_branch :=5
node:= 4 
 	next_branch :=14
node:= 5 
 	next_branch :=6
	next_branch :=8
node:= 6 
 	next_branch :=7
	next_branch :=12
node:= 7 
 	next_branch :=13
node:= 8 
 	next_branch :=9
	next_branch :=11
node:= 9 
 	next_branch :=10
	next_branch :=11
node:= 10 
 	next_branch :=13
node:= 11 
 	next_branch :=12
node:= 12 
 	next_branch :=13
node:= 13 
 	next_branch :=14
node:= 14 
 	next_branch :=15
node:= 15 
 	next_branch :=3
	next_branch :=16
=======node_fun:make_linked_ref=========
=======node_fun:tail_link_ref=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:alloc_ref=========
=======node_fun:alloc_ref_with_prefix=========
=======node_fun:find_ref_by_name=========
node:= 2 
 	next_branch :=5
node:= 3 
 	next_branch :=6
	next_branch :=4
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=3
	next_branch :=6
=======node_fun:free_refs=========
node:= 2 
 	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:free_ref=========
node:= 2 
 	next_branch :=4
	next_branch :=3
node:= 3 
 	next_branch :=4
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 39 
===============The second stage : Mapping stmt=================
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
===============The second stage : Program slicing=================
GIMPLE ASSIGN
 <ssa_name 0x7f452746d630
    type <integer_type 0x7f452747a738 long int DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e40 -9223372036854775808> max <integer_cst 0x7f4527465e58 9223372036854775807>
        pointer_to_this <pointer_type 0x7f4527486738>>
   
    def_stmt _2 = (long int) _1;
    version:2>
GIMPLE ASSIGN
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
=============== *this point analyzable =================
_1 = get_local_heads ();
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
========================================================
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
=============== *this point analyzable =================
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
========================================================
=============== *this point analyzable =================
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
========================================================
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
=============== *this point analyzable =================
free_refs (_7);
=============== program slcing stmt count:4=================
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
========================================================
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746df78
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a380 src>
    def_stmt src_28 = src_9->next;
    version:28
    ptr-info 0x7f4526f90828>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = src_9->peer_ref;
    version:1
    ptr-info 0x7f4526f90708>
GIMPLE ASSIGN
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:13=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
========================================================
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746df78
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a380 src>
    def_stmt src_28 = src_9->next;
    version:28
    ptr-info 0x7f4526f90828>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = src_9->peer_ref;
    version:1
    ptr-info 0x7f4526f90708>
GIMPLE ASSIGN
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:12=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746df78
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a380 src>
    def_stmt src_28 = src_9->next;
    version:28
    ptr-info 0x7f4526f90828>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = src_9->peer_ref;
    version:1
    ptr-info 0x7f4526f90708>
GIMPLE ASSIGN
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
=============== program slcing stmt count:13=================
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
========================================================
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746df78
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a380 src>
    def_stmt src_28 = src_9->next;
    version:28
    ptr-info 0x7f4526f90828>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = src_9->peer_ref;
    version:1
    ptr-info 0x7f4526f90708>
GIMPLE ASSIGN
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
=============== program slcing stmt count:13=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
========================================================
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463f00
    type <integer_type 0x7f4526f803f0 public unsigned QI
        size <integer_cst 0x7f4527465ca8 constant 8>
        unit-size <integer_cst 0x7f4527465cc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f803f0 precision:1 min <integer_cst 0x7f4526f6f7e0 0> max <integer_cst 0x7f4526f6f7c8 1>>
   
    arg:0 <mem_ref 0x7f4526f965c8
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
    arg:1 <field_decl 0x7f4526f7b5f0 force type <integer_type 0x7f4526f803f0>
        unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:34:15
        size <integer_cst 0x7f4527465fa8 constant 1> unit-size <integer_cst 0x7f4527465cc0 1>
        align:1 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f4526f6f798 constant 48>
        bit-offset <integer_cst 0x7f4527465bb8 constant 64>
        bit_field_type <integer_type 0x7f452747a690 unsigned int public unsigned SI
            size <integer_cst 0x7f4527465df8 constant 32>
            unit-size <integer_cst 0x7f4527465e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a690 precision:32 min <integer_cst 0x7f4527465e28 0> max <integer_cst 0x7f4527465de0 4294967295>
            pointer_to_this <pointer_type 0x7f4527486690>> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b558 merge type <integer_type 0x7f4526f803f0>
            unsigned external bit-field nonaddressable QI ./benchmarks/git/double_free_4/git_df_4.c:35:3 size <integer_cst 0x7f4527465fa8 1> unit-size <integer_cst 0x7f4527465cc0 1>
            align:1 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f798 48>
            bit-offset <integer_cst 0x7f4526f6f810 constant 65> bit_field_type <integer_type 0x7f452747a690 unsigned int> context <record_type 0x7f4526f805e8 ref> chain <field_decl 0x7f4526f7b4c0 nonfastforward>>>
    ./benchmarks/git/double_free_4/git_df_4.c:190:11 start: ./benchmarks/git/double_free_4/git_df_4.c:190:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:190:11>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746df78
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a380 src>
    def_stmt src_28 = src_9->next;
    version:28
    ptr-info 0x7f4526f90828>
GIMPLE ASSIGN
 <component_ref 0x7f4527463ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    arg:0 <mem_ref 0x7f4526f96578 type <record_type 0x7f4526f805e8 ref>
       
        arg:0 <ssa_name 0x7f452746dd38 type <pointer_type 0x7f4526f80690>
            var <var_decl 0x7f4526f94090 dst_peer>
            def_stmt dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
            version:10
            ptr-info 0x7f4526f90780>
        arg:1 <integer_cst 0x7f4526f90468 constant 0>
        ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
    arg:1 <field_decl 0x7f4526f7b1c8 peer_ref
        type <pointer_type 0x7f4526f78a80 type <record_type 0x7f4526f789d8 ref>
            unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f785e8>>
        unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:48:14 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 offset_align 128
        offset <integer_cst 0x7f452753a090 constant 64> bit-offset <integer_cst 0x7f4527465bb8 64> context <record_type 0x7f4526f805e8 ref>
        chain <field_decl 0x7f4526f7b130 name type <array_type 0x7f4526f802a0>
            BLK ./benchmarks/git/double_free_4/git_df_4.c:49:7
            align:8 warn_if_not_align:0 offset_align 128 offset <integer_cst 0x7f4526f6f768 80>
            bit-offset <integer_cst 0x7f4527465c30 constant 0> context <record_type 0x7f4526f805e8 ref>>>
    ./benchmarks/git/double_free_4/git_df_4.c:189:11 start: ./benchmarks/git/double_free_4/git_df_4.c:189:11 finish: ./benchmarks/git/double_free_4/git_df_4.c:189:11>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = src_9->peer_ref;
    version:1
    ptr-info 0x7f4526f90708>
GIMPLE ASSIGN
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
GIMPLE ASSIGN
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
=============== program slcing stmt count:13=================
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
========================================================
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
========================================================
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
=============== *this point analyzable =================
hashcpy (_7, _6);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
========================================================
=============== *this point analyzable =================
ret_4 = alloc_ref (name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
========================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
=============== *this point analyzable =================
tail_link_ref (ret_4, tail_5(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
=============== *this point analyzable =================
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
========================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98870
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _1 = len_8 + prefixlen_9(D);
    version:1>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f988b8
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98948
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &ref_11->name;
    version:4
    ptr-info 0x7f4526f90978>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
========================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98870
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _1 = len_8 + prefixlen_9(D);
    version:1>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f988b8
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98948
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &ref_11->name;
    version:4
    ptr-info 0x7f4526f90978>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
len_8 = strlen (name_7(D));
=============== program slcing stmt count:5=================
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
========================================================
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98948
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &ref_11->name;
    version:4
    ptr-info 0x7f4526f90978>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
ref_11 = calloc (1, _2);
=============== program slcing stmt count:3=================
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
========================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
========================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98870
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _1 = len_8 + prefixlen_9(D);
    version:1>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f988b8
    type <integer_type 0x7f452747a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f45274867e0>>
   
    def_stmt _2 = _1 + 81;
    version:2>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98948
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &ref_11->name;
    version:4
    ptr-info 0x7f4526f90978>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
=============== *this point analyzable =================
memcpy (_3, prefix_12(D), prefixlen_9(D));
=============== program slcing stmt count:6=================
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
========================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
=============== *this point analyzable =================
memcpy (_5, name_7(D), len_8);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
=============== *this point analyzable =================
_2 = strcmp (_1, name_7(D));
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
========================================================
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
GIMPLE ASSIGN
 <ssa_name 0x7f4526f98f30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94b40 next>
    def_stmt next_5 = ref_1->next;
    version:5
    ptr-info 0x7f4526f90ab0>
=============== *this point analyzable =================
free_ref (ref_1);
=============== program slcing stmt count:1=================
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
========================================================
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
=============== *this point analyzable =================
free_ref (_1);
=============== program slcing stmt count:0=================
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_refs========= [0m
[40;44m =======print_function_path free_refs  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 78954043
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1717071666 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1717071666 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 78954043
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 814477608 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 814477608 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 78954043
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 92934809 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 92934809 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 786776864 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 795395713 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1948507834 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 70614627
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1933488034 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1933488034 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 70614627
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1083213905 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1083213905 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 70614627
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1504333209 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1504333209 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 900881584 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 590815498 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 486047268 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 441818598
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 379408884 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 379408884 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 441818598
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 104029133 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 104029133 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 441818598
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 3538491 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 3538491 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 103441442 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 861527697 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 301889336 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1930062124
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 613283929 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 613283929 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1930062124
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 70164986 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 70164986 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1930062124
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 481477481 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 481477481 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1580532377 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 757041982 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1172907320 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_225530899 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1636076954 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

subgraph cluster_1706525647 dot graph subgraph  start ID : 1948507834 stmt(relate) ， Tree ID : 78954043 : _3 = ref_5(D)->symref;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

subgraph cluster_304484942 dot graph subgraph  start ID : 486047268 stmt(relate) ， Tree ID : 70614627 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

subgraph cluster_1205664972 dot graph subgraph  start ID : 301889336 stmt(relate) ， Tree ID : 441818598 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

subgraph cluster_373519607 dot graph subgraph  start ID : 1172907320 stmt(relate) ， Tree ID : 1930062124 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (ref_1 != 0B)
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 397419751
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1992441837 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1992441837 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 397419751
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1168915321 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1168915321 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 397419751
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 198443937 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 198443937 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 397419751
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2063056464 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 397419751
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 954919707 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 397419751
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1281657842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1419906025
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1855801291 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1855801291 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1419906025
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1872473340 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1872473340 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1419906025
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1905953293 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1905953293 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1419906025
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 150136241 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1419906025
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 104398577 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1419906025
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2009982427 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
In function ‘free_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

ref_1 = PHI <ref_3(D)(2), next_5(3)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start ref_1 = PHI <ref_3(D)(2), next_5(3)>
free_ref (ref_1);
dot graph stmt end

dot graph stmt start ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------
dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_153674732 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_207840019 dot graph subgraph  ref_1 = PHI <ref_3(D)(2), next_5(3)>
next_5 = ref_1->next;
dot graph subgrapend

dot graph start relate for1ID : 397419751
from free_ref basic block 3dot graph end relate end

subgraph cluster_724026476 dot graph subgraph  start ID : 1281657842 stmt(relate) ， Tree ID : 397419751 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1419906025
from free_ref basic block 3dot graph end relate end

subgraph cluster_455564068 dot graph subgraph  start ID : 2009982427 stmt(relate) ， Tree ID : 1419906025 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;42m =======pre add _ fucntion:__builtin_fwrite========= [0m
[40;42m =======pre add _ fucntion:match_refs========= [0m
[40;44m =======print_function_path match_refs  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2137902143 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1337310406 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_525729054 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_471895976 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_770359135 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1282771036 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1644803296 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_995890034 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_771364342 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1203845295 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1300374976 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1977029315 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1577364903 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1697794727 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1821987504 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_598796576 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1896238664 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1737560320 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1553716283 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1030412859 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1009982697 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1262033926 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_755402551 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_768452342 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1412170167 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_859801128 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_630951121 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1565844899 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1067641147 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1354977598 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2021408967 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1058059642 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_544804356 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_399654374 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1529955618 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1315163491 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f4526f90540
    type <array_type 0x7f4526f80e70
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        QI size <integer_cst 0x7f4527465ca8 8> unit-size <integer_cst 0x7f4527465cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f4526f80dc8 type <integer_type 0x7f452747a000 sizetype>
            DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465be8 0> max <integer_cst 0x7f4527465be8 0>>
        pointer_to_this <pointer_type 0x7f4526f85348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1027275267 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 163569878 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 306306105 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 83636914 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1463944854 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1661001817 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1014255934 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1957839276 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 112314745 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 763010950 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1547915948 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1666031028 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1793423809 dot graph subgraph  start ID : 1463944854 stmt(relate) ， Tree ID : 1682425410 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_410414997 dot graph subgraph  start ID : 763010950 stmt(relate) ， Tree ID : 135851772 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 401342713 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1178867339 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 45267825 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1261143841 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1809818461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 181301341 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1017312411 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1485038044 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1239360983 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1562116767 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1884692418 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_621832954 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_729796610 dot graph subgraph  start ID : 1809818461 stmt(relate) ， Tree ID : 780581306 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1419634180 dot graph subgraph  start ID : 1562116767 stmt(relate) ， Tree ID : 1611112724 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1725940285 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1732745135 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 209827695 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1861792057 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1246263305 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1672147685 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1358578050 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1987094579 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1072579985 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 877125431 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1224083629
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1633034741 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1482994982 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1657706737 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2034377454 dot graph subgraph  start ID : 1246263305 stmt(relate) ， Tree ID : 893366488 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1224083629
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_514378674 dot graph subgraph  start ID : 1633034741 stmt(relate) ， Tree ID : 1224083629 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 176713487 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1166603639 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1329338988 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1194025898 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 504158035 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 608659017 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 241366805 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1043049278 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1338455627 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1661000986 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 544673851 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 129935338 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 294166163 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 953766033 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1376198643 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1518249792 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_478430070 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_587293046 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1357860723 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1551010056 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1464418477 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_843411816 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 730305622 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1400900064 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 530132481 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1878343270 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1577613551 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1060198610 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 624155801 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 53410508 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1481414934 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1232814818 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 294777314 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1955778300 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 921654415 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 508125266 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1047752275 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1051589754 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_802291429 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2001518308 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_280304749 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_173057573 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_332464731 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_867597795 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1530918296 dot graph subgraph  start ID : 1577613551 stmt(relate) ， Tree ID : 974641566 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1883474787 dot graph subgraph  start ID : 294777314 stmt(relate) ， Tree ID : 1696736121 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_184532624 dot graph subgraph  start ID : 1051589754 stmt(relate) ， Tree ID : 423786798 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 226846465
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 622512529 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 226846465
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1159174191 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 226846465
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 957152087 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 226846465
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2023412594 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 226846465
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1689306672 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 688011709
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1453542497 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 688011709
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1238559145 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 688011709
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1748210320 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 688011709
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2077698299 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 688011709
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1291969654 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1082141606 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1163029469 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 226846465
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1586746968 dot graph subgraph  start ID : 1689306672 stmt(relate) ， Tree ID : 226846465 : *tail_6(D) = _3;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 688011709
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1459122171 dot graph subgraph  start ID : 1291969654 stmt(relate) ， Tree ID : 688011709 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1586816267 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1395041620 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_233292938 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2094941533 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_295310247 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1284882692 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 749749314
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 149344908 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 749749314
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1565187442 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 749749314
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 922806887 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘match_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 481809639
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 285301589 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 285301589 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 481809639
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 306241536 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 306241536 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 481809639
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 217800778 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 217800778 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 481809639
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 469834214 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 481809639
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 533088001 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 481809639
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 840313307 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1629008405
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1490240088 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1490240088 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1629008405
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 716242253 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 716242253 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1629008405
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1170831429 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1170831429 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1629008405
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 30768150 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1629008405
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 22301103 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1629008405
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 261906927 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 1778978470
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 2099999402 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 713636428 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1115545223 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 993139901 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 25274951 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 554877843 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1553876581
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 240697873 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 536008120 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1543450582 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1252085043 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 685353028 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 961154376 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_27408282 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1167162667 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1246455966 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_333649818 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 749749314
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1384963445 dot graph subgraph  start ID : 922806887 stmt(relate) ， Tree ID : 749749314 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 481809639
from free_ref basic block 3dot graph end relate end

subgraph cluster_1716290180 dot graph subgraph  start ID : 840313307 stmt(relate) ， Tree ID : 481809639 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1629008405
from free_ref basic block 3dot graph end relate end

subgraph cluster_866737819 dot graph subgraph  start ID : 261906927 stmt(relate) ， Tree ID : 1629008405 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1778978470
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_77793105 dot graph subgraph  start ID : 2099999402 stmt(relate) ， Tree ID : 1778978470 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1553876581
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1197814937 dot graph subgraph  start ID : 240697873 stmt(relate) ， Tree ID : 1553876581 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_209494260 dot graph subgraph  start ID : 961154376 stmt(relate) ， Tree ID : 502335728 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 794035358
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 221162718 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 794035358
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 240262410 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 794035358
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 816336461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘match_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 483069645
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2019240880 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2019240880 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 483069645
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 768852215 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 768852215 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 483069645
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2036946226 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2036946226 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483069645
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 585393660 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483069645
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1884397439 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 483069645
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 882602479 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 610668612
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 291791634 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 291791634 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 610668612
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1123300352 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1123300352 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 610668612
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 869236502 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 869236502 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 610668612
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 794127362 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 610668612
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1659308473 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 610668612
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 265203436 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 
dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_2046212405 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_197177853 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1226357813 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2073620688 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 794035358
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1364340521 dot graph subgraph  start ID : 816336461 stmt(relate) ， Tree ID : 794035358 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 483069645
from free_ref basic block 3dot graph end relate end

subgraph cluster_325330131 dot graph subgraph  start ID : 882602479 stmt(relate) ， Tree ID : 483069645 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 610668612
from free_ref basic block 3dot graph end relate end

subgraph cluster_259786858 dot graph subgraph  start ID : 265203436 stmt(relate) ， Tree ID : 610668612 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 601820318
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 2041620311 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 601820318
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1126524678 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 601820318
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 679613423 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘match_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1091951600
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1336018938 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1336018938 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1091951600
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1473648782 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1473648782 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1091951600
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1313114318 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1313114318 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1091951600
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1576281348 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1091951600
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 142501595 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1091951600
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1796183964 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1448038580
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 911353811 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 911353811 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1448038580
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1685646542 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1685646542 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1448038580
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2033432240 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2033432240 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1448038580
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 648267602 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1448038580
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 420765374 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1448038580
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 496617204 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 940059236
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1544065726 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 940059236
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1365853706 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 940059236
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1734186598 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1055890551
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1631057143 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1253068405 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 709931308 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1559052396 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 469925278 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1035261439 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1632915356
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1818839254 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 797880284 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1751359020 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2021349702 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2133899222 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1077524154 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1186980372 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1562696922 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1220025749 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_835680688 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 601820318
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_863251854 dot graph subgraph  start ID : 679613423 stmt(relate) ， Tree ID : 601820318 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1091951600
from free_ref basic block 3dot graph end relate end

subgraph cluster_2131379560 dot graph subgraph  start ID : 1796183964 stmt(relate) ， Tree ID : 1091951600 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1448038580
from free_ref basic block 3dot graph end relate end

subgraph cluster_373843583 dot graph subgraph  start ID : 496617204 stmt(relate) ， Tree ID : 1448038580 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 940059236
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_749200447 dot graph subgraph  start ID : 1734186598 stmt(relate) ， Tree ID : 940059236 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1055890551
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_632163514 dot graph subgraph  start ID : 1631057143 stmt(relate) ， Tree ID : 1055890551 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1632915356
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_794608957 dot graph subgraph  start ID : 1818839254 stmt(relate) ， Tree ID : 1632915356 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1245817651 dot graph subgraph  start ID : 1077524154 stmt(relate) ， Tree ID : 929398102 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1572222750
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 191191035 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 464187710
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1158925701 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 464187710
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1247081587 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 464187710
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 2095244853 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 464187710
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 644357409 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 464187710
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 352666344 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 822591622 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1692953952 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1874765411 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1894337218 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 474868406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘match_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 525162048
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1498212590 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1498212590 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 525162048
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 348734460 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 348734460 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 525162048
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 511577622 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 511577622 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 525162048
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 428253096 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 525162048
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1535714832 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 525162048
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2074274545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1648278846
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 223911873 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 223911873 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1648278846
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 790042751 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 790042751 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1648278846
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1632174758 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1632174758 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1648278846
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 597755456 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1648278846
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1539243198 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1648278846
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 116854625 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1392364413
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 637577202 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1392364413
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1689077375 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1392364413
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1583555448 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1101764912 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_700519428 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_683153387 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1049526117 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1572222750
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1344876837 dot graph subgraph  start ID : 191191035 stmt(relate) ， Tree ID : 1572222750 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 464187710
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1035819731 dot graph subgraph  start ID : 352666344 stmt(relate) ， Tree ID : 464187710 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1707218630 dot graph subgraph  start ID : 474868406 stmt(relate) ， Tree ID : 55926157 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 525162048
from free_ref basic block 3dot graph end relate end

subgraph cluster_1400802994 dot graph subgraph  start ID : 2074274545 stmt(relate) ， Tree ID : 525162048 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1648278846
from free_ref basic block 3dot graph end relate end

subgraph cluster_1858411353 dot graph subgraph  start ID : 116854625 stmt(relate) ， Tree ID : 1648278846 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1392364413
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1252688934 dot graph subgraph  start ID : 1583555448 stmt(relate) ， Tree ID : 1392364413 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1128084758
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1605264924 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1653246806 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 955993866 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2076291800 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 17340780 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1384246963 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1727557340
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1464522984 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1688434857 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 734174429 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 369733271 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 138706665 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 125933979 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘match_refs’:
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
In function ‘main’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 486587896
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1531071078 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1531071078 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 486587896
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 763511181 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 763511181 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 486587896
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 28181624 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 28181624 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 486587896
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 967142879 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 486587896
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1865276093 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 486587896
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 728701052 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1650296266
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 767318562 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 767318562 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1650296266
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2073577890 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2073577890 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1650296266
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 538632350 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 538632350 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1650296266
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 327053544 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1650296266
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1326897236 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1650296266
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 249560055 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1579742478
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 307498346 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1579742478
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1854824979 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1579742478
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1159816170 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1960745152
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 663335198 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1978085933 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 2047582161 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 405663659 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1922217610 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 785140674 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088624322
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2094098516 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 85321534 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 634842371 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1641461842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1616392612 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1398353552 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1669643466 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_436051843 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1116145998 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_250860870 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1128084758
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_2086348110 dot graph subgraph  start ID : 1605264924 stmt(relate) ， Tree ID : 1128084758 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1727557340
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1883464560 dot graph subgraph  start ID : 1464522984 stmt(relate) ， Tree ID : 1727557340 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_176955112 dot graph subgraph  start ID : 125933979 stmt(relate) ， Tree ID : 885042161 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 486587896
from free_ref basic block 3dot graph end relate end

subgraph cluster_477496812 dot graph subgraph  start ID : 728701052 stmt(relate) ， Tree ID : 486587896 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1650296266
from free_ref basic block 3dot graph end relate end

subgraph cluster_63034457 dot graph subgraph  start ID : 249560055 stmt(relate) ， Tree ID : 1650296266 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579742478
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1503852349 dot graph subgraph  start ID : 1159816170 stmt(relate) ， Tree ID : 1579742478 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1960745152
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_727056867 dot graph subgraph  start ID : 663335198 stmt(relate) ， Tree ID : 1960745152 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1088624322
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1642776935 dot graph subgraph  start ID : 2094098516 stmt(relate) ， Tree ID : 1088624322 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1811350695 dot graph subgraph  start ID : 1398353552 stmt(relate) ， Tree ID : 1154873945 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_434398199 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_655109458 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1624612200 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1097733397 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;42m =======pre add _ fucntion:get_local_heads========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:get_local_heads 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
is Other function get_local_heads
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start local_refs_12 = (struct ref *) _2;
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start local_refs_12 = (struct ref *) _2;
./benchmarks/git/double_free_4/git_df_4.c:215:20: warning: use location
  215 |         local_refs = get_local_heads();
      |                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1455214485
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 997831910 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 997831910 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1455214485
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1913791 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1913791 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1455214485
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1229948447 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1229948447 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1782972584
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 2096012308 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2096012308 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d5e8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _1 = get_local_heads ();
    version:1>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
dot graph entry main
dot graph target entry end

_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14(D)>
_1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _1 = get_local_heads ();
_1 = get_local_heads ();
dot graph stmt end

dot graph stmt start _1 = get_local_heads ();
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
dot graph stmt end

this stmt call this function :get_local_heads
trace fucntion name:get_local_heads 

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1650242806 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1624569114
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1953984541 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2086294650
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 593231464 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 593231464 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2086294650
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 57361764 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 57361764 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2086294650
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2025159112 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2025159112 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2086294650
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 329212377 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2086294650
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 234316876 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2086294650
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 355172276 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 392246834
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1738169225 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1738169225 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 1082229143 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 2035023769 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1402036273 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1516627342 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 542649579 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 879164825 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 466877091 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 392246834
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 138899712 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 186895662
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1464709001 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1416844109 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1100197937 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 89342163 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1008217300 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1890560819 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 140813503
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 123192357 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
dot graph arrowdot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1773435164 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 711518329 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1981402788 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1712246166 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1304749793 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d828
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4527d0dcf0 local_refs>
    def_stmt local_refs_12 = (struct ref *) _2;
    version:12
    ptr-info 0x7f4526f906f0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with local_refs ========= [0m
[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2038764552
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1589921630 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2038764552
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1633962170 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:local_refs========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 2038764552
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 125597780 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1945093906 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1624569114
from free_refs basic block 3dot graph end relate end

subgraph cluster_2026209004 dot graph subgraph  start ID : 1953984541 stmt(relate) ， Tree ID : 1624569114 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 2086294650
from free_ref basic block 3dot graph end relate end

subgraph cluster_1863767006 dot graph subgraph  start ID : 355172276 stmt(relate) ， Tree ID : 2086294650 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 392246834
from match_refs basic block 14dot graph end relate end

subgraph cluster_879839401 dot graph subgraph  start ID : 138899712 stmt(relate) ， Tree ID : 392246834 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 186895662
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1913749126 dot graph subgraph  start ID : 1464709001 stmt(relate) ， Tree ID : 186895662 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 140813503
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1118319631 dot graph subgraph  start ID : 123192357 stmt(relate) ， Tree ID : 140813503 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 27418246
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_248983096 dot graph subgraph  start ID : 1304749793 stmt(relate) ， Tree ID : 27418246 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2038764552
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_308915057 dot graph subgraph  start ID : 125597780 stmt(relate) ， Tree ID : 2038764552 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1997484456
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 715860187 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 715860187 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 447814769 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 36896470 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 33085541 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 588628273 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1453740579 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 1133283478 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 677970436 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1997484456
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 314474232 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 876360649
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 801162794 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 903778896 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 427114310 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 112941775 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 737698036 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2139360476 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1548907094
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1417691569 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 904170091 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 754576720 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1379408716 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 782895448 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 470860078 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 111764469
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 549160926 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 111764469
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1589179709 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 111764469
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 360747565 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 858075983
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1439180517 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1076607753
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1305890753 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1305890753 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1076607753
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1476076987 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1476076987 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1076607753
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1109693294 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1109693294 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d678
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _3 = remote_refs;
    version:3
    ptr-info 0x7f4526f90678>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1076607753
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1894519026 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1076607753
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 782333919 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1076607753
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 95493124 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_425005814 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1997484456
from match_refs basic block 14dot graph end relate end

subgraph cluster_1096808151 dot graph subgraph  start ID : 314474232 stmt(relate) ， Tree ID : 1997484456 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 876360649
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_971853774 dot graph subgraph  start ID : 801162794 stmt(relate) ， Tree ID : 876360649 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1548907094
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1226168608 dot graph subgraph  start ID : 1417691569 stmt(relate) ， Tree ID : 1548907094 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1581798458
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_498231597 dot graph subgraph  start ID : 470860078 stmt(relate) ， Tree ID : 1581798458 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 111764469
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1875632670 dot graph subgraph  start ID : 360747565 stmt(relate) ， Tree ID : 111764469 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 858075983
from free_refs basic block 3dot graph end relate end

subgraph cluster_1653282918 dot graph subgraph  start ID : 1439180517 stmt(relate) ， Tree ID : 858075983 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1076607753
from free_ref basic block 3dot graph end relate end

subgraph cluster_611173373 dot graph subgraph  start ID : 95493124 stmt(relate) ， Tree ID : 1076607753 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^

dot graph START

======================================================================
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 465847058
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1645159746 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1645159746 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 2028864942 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 1094825998 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1079474556 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 785551385 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1849402718 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 311399624 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1568446833 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 465847058
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 172779149 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 423164094
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 2117607759 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 783911659 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 828200095 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1053655728 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1860519412 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 2134090848 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1761958858
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 382249067 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1164582986 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 918222183 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 158648392 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 113907489 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1890075957 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1384817001
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 612139087 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1384817001
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1618224979 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1384817001
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 890616271 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1223312460
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 2084072037 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2084072037 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 388292370 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 1104693754 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 1031414387 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1467766926 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 1890245139 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 733333457 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1779166551 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1223312460
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 1311208325 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 906112606
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 54846997 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 520587817 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 838758656 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2109532531 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1574243545 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 551794421 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1281332436
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2096139731 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1829782309 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 973591951 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 145262014 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1988430702 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1087499440 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <var_decl 0x7f4527d0db40 remote_tail
    type <pointer_type 0x7f4526f80738
        type <pointer_type 0x7f4526f80690 type <record_type 0x7f4526f805e8 ref>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f80738>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f853f0>>
    addressable static unsigned DI ./benchmarks/git/double_free_4/git_df_4.c:56:35 size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with remote_tail ========= [0m
[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2035337971
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1225764055 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2035337971
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1699638527 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:remote_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 2035337971
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1506079302 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2116380326 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_775467339 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph start relate for1ID : 465847058
from match_refs basic block 14dot graph end relate end

subgraph cluster_1442667691 dot graph subgraph  start ID : 172779149 stmt(relate) ， Tree ID : 465847058 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 423164094
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_357189048 dot graph subgraph  start ID : 2117607759 stmt(relate) ， Tree ID : 423164094 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1761958858
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1880161093 dot graph subgraph  start ID : 382249067 stmt(relate) ， Tree ID : 1761958858 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1881126226
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_326598430 dot graph subgraph  start ID : 1890075957 stmt(relate) ， Tree ID : 1881126226 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1384817001
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1824955975 dot graph subgraph  start ID : 890616271 stmt(relate) ， Tree ID : 1384817001 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1223312460
from match_refs basic block 14dot graph end relate end

subgraph cluster_1622922585 dot graph subgraph  start ID : 1311208325 stmt(relate) ， Tree ID : 1223312460 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 906112606
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1059931888 dot graph subgraph  start ID : 54846997 stmt(relate) ， Tree ID : 906112606 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1281332436
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1456638878 dot graph subgraph  start ID : 2096139731 stmt(relate) ， Tree ID : 1281332436 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1374523479
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_786647262 dot graph subgraph  start ID : 1087499440 stmt(relate) ， Tree ID : 1374523479 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 2035337971
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1966044494 dot graph subgraph  start ID : 1506079302 stmt(relate) ， Tree ID : 2035337971 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);

dot graph START

======================================================================
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1511485875
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 2067979698 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2067979698 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 339148663 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 202760883 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 2030028582 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1913392208 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 754555304 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 1978684665 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 1722401173 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 1511485875
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 2129078784 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 1660983327
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 548509476 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1501930381 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1636008916 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 14711474 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 580210788 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1188163796 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 126857150
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1520790776 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
dot graph arrowdot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 815974820 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 906296515 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1696308581 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1142573250 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 583768842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1171747518
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 55021490 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1171747518
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 2040407720 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1171747518
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1958394780 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (local_refs_12);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 2021065985
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 1404409947 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1878890830
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 212731000 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 212731000 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1878890830
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1607170830 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1607170830 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1878890830
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1761435764 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1761435764 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d7e0
    type <pointer_type 0x7f4526f800a8
        type <pointer_type 0x7f4526f80000 type <integer_type 0x7f4526f78bd0 char>
            unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f800a8>>
        unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a200 argv>
    def_stmt GIMPLE_NOP
    version:9
    ptr-info 0x7f4526f906d8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with argv ========= [0m
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1878890830
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2126123209 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1878890830
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 214242487 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:argv========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1878890830
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1592636782 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1701040734 dot graph subgraph  free_refs (local_refs_12);
local_refs_12 = (struct ref *) _2;
dot graph subgrapend

dot graph start relate for1ID : 1511485875
from match_refs basic block 14dot graph end relate end

subgraph cluster_195837623 dot graph subgraph  start ID : 2129078784 stmt(relate) ， Tree ID : 1511485875 : src_28 = src_9->next;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 1660983327
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1106136461 dot graph subgraph  start ID : 548509476 stmt(relate) ， Tree ID : 1660983327 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 126857150
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_102066562 dot graph subgraph  start ID : 1520790776 stmt(relate) ， Tree ID : 126857150 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1963631135
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_322694773 dot graph subgraph  start ID : 583768842 stmt(relate) ， Tree ID : 1963631135 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1171747518
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_460583194 dot graph subgraph  start ID : 1958394780 stmt(relate) ， Tree ID : 1171747518 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 2021065985
from free_refs basic block 3dot graph end relate end

subgraph cluster_1738075478 dot graph subgraph  start ID : 1404409947 stmt(relate) ， Tree ID : 2021065985 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1878890830
from free_ref basic block 3dot graph end relate end

subgraph cluster_337406247 dot graph subgraph  start ID : 1592636782 stmt(relate) ， Tree ID : 1878890830 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);

dot graph START

======================================================================
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>

 ================== pre trace ptable ================== 
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :888========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 1040793982
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 778755626 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 778755626 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :890========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :890========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :891========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
is Other function match_refs
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end

# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 143728047
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1669261446 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1669261446 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d6c0
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
    version:4>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1597865274 dot graph subgraph  if (_4 != 0)
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_82333528 dot graph subgraph  _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f4526f872d0
    type <array_type 0x7f4526f85dc8
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        BLK
        size <integer_cst 0x7f4526f6f948 constant 432>
        unit-size <integer_cst 0x7f4526f6f990 constant 54>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f4526f85d20 type <integer_type 0x7f452747a000 sizetype>
            DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465be8 0> max <integer_cst 0x7f4526f6f978 53>>
        pointer_to_this <pointer_type 0x7f4526f85e70>>
    readonly constant static "No refs in common and none specified; doing nothing.\012\000">

dot graph START

======================================================================
 <ssa_name 0x7f452746d750
    type <pointer_type 0x7f4526f82348
        type <record_type 0x7f4526f822a0 FILE BLK
            size <integer_cst 0x7f4526f6f870 constant 1728>
            unit-size <integer_cst 0x7f4526f6f930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f821f8 fields <field_decl 0x7f4526f83a18 _flags> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f82348>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f85bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f4526f906a8>
 <ssa_name 0x7f452746d750
    type <pointer_type 0x7f4526f82348
        type <record_type 0x7f4526f822a0 FILE BLK
            size <integer_cst 0x7f4526f6f870 constant 1728>
            unit-size <integer_cst 0x7f4526f6f930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f821f8 fields <field_decl 0x7f4526f83a18 _flags> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f82348>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f85bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f4526f906a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d750
    type <pointer_type 0x7f4526f82348
        type <record_type 0x7f4526f822a0 FILE BLK
            size <integer_cst 0x7f4526f6f870 constant 1728>
            unit-size <integer_cst 0x7f4526f6f930 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f821f8 fields <field_decl 0x7f4526f83a18 _flags> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f82348>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f85bd0>>
   
    def_stmt _6 = stderr;
    version:6
    ptr-info 0x7f4526f906a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================
# .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph entry main
dot graph target entry end

__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
dot graph stmt end

dot graph stmt start __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
dot graph stmt end

this stmt call this function :__builtin_fwrite
trace fucntion name:__builtin_fwrite 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_857793879 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1810596274 dot graph subgraph  __builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
_6 = stderr;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);

dot graph START

======================================================================
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
dot graph entry main
dot graph target entry end

free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free_refs (_7);
free_refs (_7);
dot graph stmt end

dot graph stmt start free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

this stmt call this function :free_refs
trace fucntion name:free_refs 
[40;44m =======trace_function_path free_refs  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:free_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:next========= [0m
dot graph arrowdot graph start relate for1ID : 1689504359
from free_refs basic block 3dot graph end relate end

In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
next_5 = ref_1->next;
dot graph relate stmt start ID : 471745996 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
next_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1789235835
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1903746846 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1903746846 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1789235835
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2064382778 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2064382778 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1789235835
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1342792921 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1342792921 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1789235835
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2099584469 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1789235835
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1023035591 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1789235835
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1444859483 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_19>
_7 = remote_refs;
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 6: _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _7 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _3 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _3 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
free_refs (_7);
dot graph stmt end

dot graph stmt start _4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
dot graph stmt end

this stmt call this function :match_refs
trace fucntion name:match_refs 
[40;44m =======trace_function_path match_refs  function_call count: 4 level :0========  [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
[40;31m  find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph start relate form ID : 274795594
from match_refs basic block 13dot graph end relate end

dot graph relate stmt start ID : 1483618785 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1483618785 stmt(free) :free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
dot graph relate end

 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:match_refs========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:dst_name========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 3dot graph end relate end

In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dst_name_18 = &src_9->name;
dot graph relate stmt start ID : 1035451314 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
dst_name_18
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
_1 = src_9->peer_ref;
dot graph relate stmt start ID : 612201842 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 5dot graph end relate end

dot graph relate stmt start ID : 376929119 stmt(call) :dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dst_19(D)
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 6dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
_2 = dst_peer_20->peer_ref;
dot graph relate stmt start ID : 1814206940 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 11dot graph end relate end

dot graph relate stmt start ID : 322915218 stmt(call) :dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dst_name_18
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
_6 = &src_9->new_sha1;
dot graph relate stmt start ID : 1966830567 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 11dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
_7 = &dst_peer_23->new_sha1;
dot graph relate stmt start ID : 261626406 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:src========= [0m
dot graph arrowdot graph start relate for1ID : 274795594
from match_refs basic block 14dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
src_28 = src_9->next;
dot graph relate stmt start ID : 849603414 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
src_28
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;46m =======add node_fun stack:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;46m =======add node_fun stack:make_linked_ref========= [0m
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 168061235
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 405354453 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :2========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1100544392 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1720830018 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2095664149 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1925951622 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 699733067 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 371381212
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1546045775 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1209158402 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1550305861 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2029272943 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 850910589 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1306569059 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;46m =======add node_fun stack:find_ref_by_name========= [0m
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746d798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _7 = remote_refs;
    version:7
    ptr-info 0x7f4526f906c0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1946172073
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 46219863 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1946172073
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1258669880 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1946172073
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 821724016 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

if (_4 != 0)
In function ‘main’:
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (_4 != 0)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :free_refs
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _5 = remote_refs;
free_refs (_7);
dot graph stmt end

dot graph stmt start _5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 6 have return 

======================================================================
dot graph entry main
dot graph target entry end

if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph target line desend

dot graph target loc start # .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start if (_5 == 0B)
free_refs (_7);
dot graph stmt end

dot graph stmt start if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^
dot graph stmt end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1491079346 dot graph subgraph  free_refs (_7);
_7 = remote_refs;
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1533465475 dot graph subgraph  _7 = remote_refs;
_7 = remote_refs;
dot graph subgrapend

dot graph start relate for1ID : 1689504359
from free_refs basic block 3dot graph end relate end

subgraph cluster_157859153 dot graph subgraph  start ID : 471745996 stmt(relate) ， Tree ID : 1689504359 : next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph subgrapend

dot graph start relate for1ID : 1789235835
from free_ref basic block 3dot graph end relate end

subgraph cluster_379047012 dot graph subgraph  start ID : 1444859483 stmt(relate) ， Tree ID : 1789235835 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 274795594
from match_refs basic block 14dot graph end relate end

subgraph cluster_2145667317 dot graph subgraph  start ID : 849603414 stmt(relate) ， Tree ID : 274795594 : src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph subgrapend

dot graph start relate for1ID : 168061235
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_534788272 dot graph subgraph  start ID : 405354453 stmt(relate) ， Tree ID : 168061235 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 371381212
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_45770305 dot graph subgraph  start ID : 1546045775 stmt(relate) ， Tree ID : 371381212 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1557526947
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_321098887 dot graph subgraph  start ID : 1306569059 stmt(relate) ， Tree ID : 1557526947 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1946172073
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_354135191 dot graph subgraph  start ID : 821724016 stmt(relate) ， Tree ID : 1946172073 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_20 = VDEF <.MEM_19>
free_refs (_7);
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_19>
_7 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:232:5: warning: use location
  232 |     free_refs(remote_refs); /* double free */
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_4 != 0)
./benchmarks/git/double_free_4/git_df_4.c:218:7: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_13>
free_refs (local_refs_12);
./benchmarks/git/double_free_4/git_df_4.c:231:5: warning: use location
  231 |     free_refs(local_refs);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
# VUSE <.MEM_17>
_5 = remote_refs;
./benchmarks/git/double_free_4/git_df_4.c:224:9: warning: use location
  224 |     if (!remote_refs) {
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: free in this location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^

===== possiable asias =====
if (_5 == 0B)
./benchmarks/git/double_free_4/git_df_4.c:224:8: warning: use location
  224 |     if (!remote_refs) {
      |        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m
_1
./benchmarks/git/double_free_4/git_df_4.c:215:22: warning: use location
  215 |         local_refs = get_local_heads();
      |                      ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
  218 |    if (match_refs(local_refs, remote_refs, &remote_tail,
      |        ^
[40;31m   memory leak and alloc new memory [0m

./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_4
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
free_refs (local_refs_12);
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:218:8: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:225:17: warning: use location
  225 |                 fprintf(stderr, "No refs in common and none specified; doing nothing.\n");
      |                 ^
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;31m   fuck [0m
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
[40;44m =======print_function_path match_refs  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:hashcpy========= [0m
[40;42m =======pre add _ fucntion:make_linked_ref========= [0m
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_307396711 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1170702301 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_522196426 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_712751165 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1542083513 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1622740819 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_286097535 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1490264015 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1401208793 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_985830603 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_888826142 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1262010295 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_395873902 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2097984544 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_664832509 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_277663197 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_801411486 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1971401568 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_76351622 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_847631349 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1082587801 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_898075638 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_191227047 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_468569628 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1055934791 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_570274060 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_466753297 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1590723063 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_616044365 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_787852184 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1944858254 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_923441076 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1958554485 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_319571033 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1636192241 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1353154350 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f4526f90540
    type <array_type 0x7f4526f80e70
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        QI size <integer_cst 0x7f4527465ca8 8> unit-size <integer_cst 0x7f4527465cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f4526f80dc8 type <integer_type 0x7f452747a000 sizetype>
            DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465be8 0> max <integer_cst 0x7f4527465be8 0>>
        pointer_to_this <pointer_type 0x7f4526f85348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1922289777 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 695934717 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1196036997 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 760636732 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1584760860 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1156510634 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1535261756 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 975396153 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1434173831 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 189189594 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_799314074 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1510525453 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1036820943 dot graph subgraph  start ID : 1463944854 stmt(relate) ， Tree ID : 1682425410 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1881901875 dot graph subgraph  start ID : 763010950 stmt(relate) ， Tree ID : 135851772 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_261117443 dot graph subgraph  start ID : 1584760860 stmt(relate) ， Tree ID : 1942311852 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1228047991 dot graph subgraph  start ID : 189189594 stmt(relate) ， Tree ID : 310563644 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1317052234 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1798322051 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 669741152 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 760291649 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 266882768 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 557666255 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1190323844 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1268664173 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 877237288 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 679032438 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_474334875 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_672065492 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_453838567 dot graph subgraph  start ID : 1809818461 stmt(relate) ， Tree ID : 780581306 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1170269593 dot graph subgraph  start ID : 1562116767 stmt(relate) ， Tree ID : 1611112724 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1868102489 dot graph subgraph  start ID : 266882768 stmt(relate) ， Tree ID : 202987855 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1214475299 dot graph subgraph  start ID : 679032438 stmt(relate) ， Tree ID : 1457593336 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 223502285 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2142808561 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1006578639 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1657676116 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 184514508 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1020717921 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1221335451 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1540310940 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1281835364 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 301899794 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1805892713
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1743298795 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_451403950 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2100221845 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_265556299 dot graph subgraph  start ID : 1246263305 stmt(relate) ， Tree ID : 893366488 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1224083629
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1211695599 dot graph subgraph  start ID : 1633034741 stmt(relate) ， Tree ID : 1224083629 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_219620965 dot graph subgraph  start ID : 184514508 stmt(relate) ， Tree ID : 31182486 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1805892713
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1723149635 dot graph subgraph  start ID : 1743298795 stmt(relate) ， Tree ID : 1805892713 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 844330160 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 499115495 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2088977248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1318665036 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1171180987 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 341450981 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 891799829 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1609807466 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 948997786 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 922982315 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1833309751 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1343502219 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1128837207 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1587970020 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 216736492 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 202689011 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_980797312 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1498571856 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_504588805 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_576612460 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1949975806 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_457327003 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_842168759 dot graph subgraph  start ID : 1577613551 stmt(relate) ， Tree ID : 974641566 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1014187757 dot graph subgraph  start ID : 294777314 stmt(relate) ， Tree ID : 1696736121 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_676947968 dot graph subgraph  start ID : 1051589754 stmt(relate) ， Tree ID : 423786798 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_417834747 dot graph subgraph  start ID : 1171180987 stmt(relate) ， Tree ID : 1409944810 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_636065963 dot graph subgraph  start ID : 1833309751 stmt(relate) ， Tree ID : 395332167 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2086892778 dot graph subgraph  start ID : 202689011 stmt(relate) ， Tree ID : 1929560954 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 2028386378 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 433346295 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 158878798 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 276234897 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 774797276 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1886042363 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1723795062 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1973660942 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1571868466 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 520634114 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1050678627
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1755738248 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1196224620 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 984623529 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1852160332 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 29538285 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 335711737 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_209265490 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_606150745 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_138203895 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_666592493 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1448319504 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1152391652 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1343540461 dot graph subgraph  start ID : 1577613551 stmt(relate) ， Tree ID : 974641566 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1866154251 dot graph subgraph  start ID : 294777314 stmt(relate) ， Tree ID : 1696736121 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1788457616 dot graph subgraph  start ID : 1051589754 stmt(relate) ， Tree ID : 423786798 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1282949592 dot graph subgraph  start ID : 1171180987 stmt(relate) ， Tree ID : 1409944810 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_980835511 dot graph subgraph  start ID : 1833309751 stmt(relate) ， Tree ID : 395332167 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_776155426 dot graph subgraph  start ID : 202689011 stmt(relate) ， Tree ID : 1929560954 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1163852322 dot graph subgraph  start ID : 774797276 stmt(relate) ， Tree ID : 1135181458 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1050678627
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1414181806 dot graph subgraph  start ID : 1755738248 stmt(relate) ， Tree ID : 1050678627 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_935034224 dot graph subgraph  start ID : 335711737 stmt(relate) ， Tree ID : 1649471321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1440087220
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 41495435 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1440087220
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1985712851 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1440087220
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1178645935 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1440087220
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1765290497 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1440087220
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1811890145 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 603030754
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 138440963 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 603030754
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1420144746 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 603030754
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1370917791 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 603030754
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1787912285 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 603030754
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 468885718 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_208057673 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1492588969 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 226846465
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_498424003 dot graph subgraph  start ID : 1689306672 stmt(relate) ， Tree ID : 226846465 : *tail_6(D) = _3;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 688011709
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_543769410 dot graph subgraph  start ID : 1291969654 stmt(relate) ， Tree ID : 688011709 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1440087220
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1701854459 dot graph subgraph  start ID : 1811890145 stmt(relate) ， Tree ID : 1440087220 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 603030754
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1104574748 dot graph subgraph  start ID : 468885718 stmt(relate) ， Tree ID : 603030754 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;42m =======pre add _ fucntion:find_ref_by_name========= [0m
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_681973306 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_220963304 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_405410605 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1834364958 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1564503766 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_124081208 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:match_refs========= [0m
[40;42m =======start_check_funciton:match_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1475338926
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 699969710 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1475338926
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1104916719 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1475338926
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 104010705 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1863822032
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 371614878 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 371614878 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1863822032
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1039044929 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1039044929 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1863822032
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1156425604 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1156425604 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863822032
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 413110313 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863822032
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 877274133 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1863822032
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 187587892 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 30917162
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 541680630 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 541680630 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 30917162
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 790618646 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 790618646 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 30917162
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 169358126 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 169358126 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 30917162
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1961825376 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 30917162
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 14052789 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 30917162
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1957270411 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 283227447
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 222110462 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 781651450 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 765879873 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 856746544 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1886226199 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1447853179 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1302375732
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1077709848 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746de58
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8a400 dst>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4526f907c8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst ========= [0m
dot graph arrowdot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 494729966 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 268234364 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 462589768 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1194699676 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1373151084 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_566600473 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_911038061 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1744765962 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1605645402 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 749749314
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2067463665 dot graph subgraph  start ID : 922806887 stmt(relate) ， Tree ID : 749749314 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 481809639
from free_ref basic block 3dot graph end relate end

subgraph cluster_10392627 dot graph subgraph  start ID : 840313307 stmt(relate) ， Tree ID : 481809639 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1629008405
from free_ref basic block 3dot graph end relate end

subgraph cluster_335435887 dot graph subgraph  start ID : 261906927 stmt(relate) ， Tree ID : 1629008405 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1778978470
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_107567909 dot graph subgraph  start ID : 2099999402 stmt(relate) ， Tree ID : 1778978470 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1553876581
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_41309789 dot graph subgraph  start ID : 240697873 stmt(relate) ， Tree ID : 1553876581 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 502335728
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_877116518 dot graph subgraph  start ID : 961154376 stmt(relate) ， Tree ID : 502335728 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1475338926
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_898186555 dot graph subgraph  start ID : 104010705 stmt(relate) ， Tree ID : 1475338926 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1863822032
from free_ref basic block 3dot graph end relate end

subgraph cluster_210667915 dot graph subgraph  start ID : 187587892 stmt(relate) ， Tree ID : 1863822032 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 30917162
from free_ref basic block 3dot graph end relate end

subgraph cluster_691458246 dot graph subgraph  start ID : 1957270411 stmt(relate) ， Tree ID : 30917162 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 283227447
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_912239345 dot graph subgraph  start ID : 222110462 stmt(relate) ， Tree ID : 283227447 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1302375732
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_20454678 dot graph subgraph  start ID : 1077709848 stmt(relate) ， Tree ID : 1302375732 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1134734489
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_974685693 dot graph subgraph  start ID : 1373151084 stmt(relate) ， Tree ID : 1134734489 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1134349807
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1322830411 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1134349807
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1756337144 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1134349807
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1900229680 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 32093307
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1495079695 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1495079695 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 32093307
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1200599211 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1200599211 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 32093307
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1109803155 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1109803155 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 32093307
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1639232851 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 32093307
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 187850053 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 32093307
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1604533122 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1907467215
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 650439821 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 650439821 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1907467215
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 651749150 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 651749150 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1907467215
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1133134651 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1133134651 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746de10
    type <pointer_type 0x7f4526f80000
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
        pointer_to_this <pointer_type 0x7f4526f800a8>>
    var <var_decl 0x7f4526f94000 dst_name>
    def_stmt dst_name_18 = &src_9->name;
    version:18
    ptr-info 0x7f4526f907b0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_name ========= [0m
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1907467215
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1217040294 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1907467215
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1562787211 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1907467215
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 730416965 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 
dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_675202048 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1482767229 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_740809592 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1010637936 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 794035358
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1590335138 dot graph subgraph  start ID : 816336461 stmt(relate) ， Tree ID : 794035358 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 483069645
from free_ref basic block 3dot graph end relate end

subgraph cluster_782119382 dot graph subgraph  start ID : 882602479 stmt(relate) ， Tree ID : 483069645 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 610668612
from free_ref basic block 3dot graph end relate end

subgraph cluster_1887754454 dot graph subgraph  start ID : 265203436 stmt(relate) ， Tree ID : 610668612 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1134349807
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_341038046 dot graph subgraph  start ID : 1900229680 stmt(relate) ， Tree ID : 1134349807 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 32093307
from free_ref basic block 3dot graph end relate end

subgraph cluster_992787297 dot graph subgraph  start ID : 1604533122 stmt(relate) ， Tree ID : 32093307 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1907467215
from free_ref basic block 3dot graph end relate end

subgraph cluster_431729052 dot graph subgraph  start ID : 730416965 stmt(relate) ， Tree ID : 1907467215 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>

 ================== pre trace ptable ================== 
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_9(D)>
return _4;
lto1: warning: use location
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1253277391
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1013241976 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1253277391
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1406414746 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1253277391
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 240143550 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
is Other function find_ref_by_name
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 188588739
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1015268242 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1015268242 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 188588739
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2140373231 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2140373231 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 188588739
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 220682046 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 220682046 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 188588739
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 362864289 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 188588739
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1193488794 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 188588739
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1330485201 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2002097140
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1381338847 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1381338847 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2002097140
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 787534675 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 787534675 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2002097140
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1762080707 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1762080707 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2002097140
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 2031778668 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2002097140
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1439283826 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2002097140
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 747731711 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1101335314
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 854587389 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1101335314
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1478148676 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1101335314
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1776537363 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 189870970
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 71474621 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1780206109 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 853594003 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 379962457 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 2121244155 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1846381300 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 639691651
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 811691509 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746dea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
    version:20
    ptr-info 0x7f4526f907e0>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 70622607 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1467181448 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 900728367 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1085890849 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1460071031 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_32>
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1121410413 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1448755138 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_506076178 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_304411967 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 601820318
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1303368630 dot graph subgraph  start ID : 679613423 stmt(relate) ， Tree ID : 601820318 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1091951600
from free_ref basic block 3dot graph end relate end

subgraph cluster_1887415025 dot graph subgraph  start ID : 1796183964 stmt(relate) ， Tree ID : 1091951600 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1448038580
from free_ref basic block 3dot graph end relate end

subgraph cluster_1091946642 dot graph subgraph  start ID : 496617204 stmt(relate) ， Tree ID : 1448038580 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 940059236
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_917965690 dot graph subgraph  start ID : 1734186598 stmt(relate) ， Tree ID : 940059236 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1055890551
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1771710046 dot graph subgraph  start ID : 1631057143 stmt(relate) ， Tree ID : 1055890551 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1632915356
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_383746820 dot graph subgraph  start ID : 1818839254 stmt(relate) ， Tree ID : 1632915356 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 929398102
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1665697401 dot graph subgraph  start ID : 1077524154 stmt(relate) ， Tree ID : 929398102 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1253277391
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_725561712 dot graph subgraph  start ID : 240143550 stmt(relate) ， Tree ID : 1253277391 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 188588739
from free_ref basic block 3dot graph end relate end

subgraph cluster_1238334210 dot graph subgraph  start ID : 1330485201 stmt(relate) ， Tree ID : 188588739 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 2002097140
from free_ref basic block 3dot graph end relate end

subgraph cluster_996362429 dot graph subgraph  start ID : 747731711 stmt(relate) ， Tree ID : 2002097140 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1101335314
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_354615427 dot graph subgraph  start ID : 1776537363 stmt(relate) ， Tree ID : 1101335314 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 189870970
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1428205180 dot graph subgraph  start ID : 71474621 stmt(relate) ， Tree ID : 189870970 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 639691651
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1067837050 dot graph subgraph  start ID : 811691509 stmt(relate) ， Tree ID : 639691651 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 712139628
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_994307078 dot graph subgraph  start ID : 1460071031 stmt(relate) ， Tree ID : 712139628 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1060927641
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1921431053 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374269535
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1034688148 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1374269535
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1620328706 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374269535
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 38477397 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374269535
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 114242398 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1374269535
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 184984686 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
dot graph arrowdot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1085713054 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1194990854 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 894011230 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 59639819 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 496262344 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1400087408
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 364051786 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 364051786 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1400087408
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1799630975 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1799630975 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1400087408
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1140018786 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1140018786 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1400087408
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1455998429 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1400087408
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 570113017 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1400087408
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 764245184 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1839745249
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 88326770 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 88326770 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1839745249
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1489806896 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1489806896 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1839745249
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 930595811 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 930595811 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839745249
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1084689199 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839745249
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1844422324 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1839745249
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 211317344 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746dee8
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a480 dst_tail>
    def_stmt GIMPLE_NOP
    version:21
    ptr-info 0x7f4526f907f8>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_tail ========= [0m
[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 5042602
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 691245754 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 5042602
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1272244985 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_tail========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 5042602
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1926473655 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_2065515290 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_159449486 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1399318713 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_2103992687 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1572222750
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_273691884 dot graph subgraph  start ID : 191191035 stmt(relate) ， Tree ID : 1572222750 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 464187710
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1584303400 dot graph subgraph  start ID : 352666344 stmt(relate) ， Tree ID : 464187710 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 55926157
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_65609043 dot graph subgraph  start ID : 474868406 stmt(relate) ， Tree ID : 55926157 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 525162048
from free_ref basic block 3dot graph end relate end

subgraph cluster_1855115731 dot graph subgraph  start ID : 2074274545 stmt(relate) ， Tree ID : 525162048 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1648278846
from free_ref basic block 3dot graph end relate end

subgraph cluster_522532806 dot graph subgraph  start ID : 116854625 stmt(relate) ， Tree ID : 1648278846 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1392364413
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1260599897 dot graph subgraph  start ID : 1583555448 stmt(relate) ， Tree ID : 1392364413 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1060927641
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_601643314 dot graph subgraph  start ID : 1921431053 stmt(relate) ， Tree ID : 1060927641 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1374269535
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_582172625 dot graph subgraph  start ID : 184984686 stmt(relate) ， Tree ID : 1374269535 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1581423847
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1756862242 dot graph subgraph  start ID : 496262344 stmt(relate) ， Tree ID : 1581423847 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1400087408
from free_ref basic block 3dot graph end relate end

subgraph cluster_2001730722 dot graph subgraph  start ID : 764245184 stmt(relate) ， Tree ID : 1400087408 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1839745249
from free_ref basic block 3dot graph end relate end

subgraph cluster_946224412 dot graph subgraph  start ID : 211317344 stmt(relate) ， Tree ID : 1839745249 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 5042602
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_1409009569 dot graph subgraph  start ID : 1926473655 stmt(relate) ， Tree ID : 5042602 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>

 ================== pre trace ptable ================== 
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 994265860
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 254739193 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :889========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1758511044 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 2094484442 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 2067449356 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1100834293 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 877596606 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1979122586
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1004654907 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :890========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1009697509 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1489018723 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 213675287 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 788687517 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1407050365 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
is Other function make_linked_ref
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
In function ‘match_refs’:
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->force = _8;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->force = _8;
./benchmarks/git/double_free_4/git_df_4.c:190:33: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _8 = MEM[(const struct refspec *)0B].force;
./benchmarks/git/double_free_4/git_df_4.c:190:38: warning: use location
  190 |                 dst_peer->force = pat->force;
      |                                      ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 12: dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 12dot graph target basicblock en1

dot graph stmt start dst_peer_10->peer_ref = src_9;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_10->peer_ref = src_9;
./benchmarks/git/double_free_4/git_df_4.c:189:36: warning: use location
  189 |                 dst_peer->peer_ref = src;
      |                                    ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start if (src_9 != 0B)
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 14: src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 14dot graph target basicblock en1

dot graph stmt start src_28 = src_9->next;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 16 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 15: src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _6 = &src_9->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _6 = &src_9->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:56: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start _1 = src_9->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = src_9->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:167:24: warning: use location
  167 |                 if (src->peer_ref)
      |                        ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 6: _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 6dot graph target basicblock en1

dot graph stmt start _2 = dst_peer_20->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _2 = dst_peer_20->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:172:37: warning: use location
  172 |                         if (dst_peer->peer_ref)
      |                                     ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start _1 = ref_5(D)->peer_ref;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

dot graph entry match_refs
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from free_ref basic block 3dot graph target basicblock end

dot graph stmt start free_ref (_1);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 373124773
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 40522582 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 40522582 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 373124773
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1363559404 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1363559404 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 373124773
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 646816658 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 646816658 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 373124773
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1624825982 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 373124773
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1429168448 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 373124773
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 354448741 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2147358788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 542284697 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 542284697 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2147358788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 956092055 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 956092055 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2147358788
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 582047766 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 582047766 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2147358788
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 151663291 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2147358788
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 810339130 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2147358788
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1528272178 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_name_18 = &src_9->name;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 3: dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 3dot graph target basicblock en1

dot graph stmt start dst_name_18 = &src_9->name;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_name_18 = &src_9->name;
./benchmarks/git/double_free_4/git_df_4.c:166:23: warning: use location
  166 |                 char *dst_name = src->name;
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 5dot graph target basicblock en1

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:170:28: warning: use location
  170 |                 dst_peer = find_ref_by_name(dst, dst_name);
      |                            ^
dot graph stmt end

this stmt call this function :find_ref_by_name
trace fucntion name:find_ref_by_name 
[40;44m =======trace_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:find_ref_by_name========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1560672860
from find_ref_by_name basic block 3dot graph end relate end

In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
   81 |         if (!strcmp(list->name, name))
      |                         ^
_1 = &list_3->name;
dot graph relate stmt start ID : 1804604990 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:81:25: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1560672860
from find_ref_by_name basic block 3dot graph end relate end

dot graph relate stmt start ID : 1783011371 stmt(call) :_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
_1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:list========= [0m
dot graph arrowdot graph start relate for1ID : 1560672860
from find_ref_by_name basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
list_8 = list_3->next;
dot graph relate stmt start ID : 1392311798 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
list_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;46m =======add node_fun stack:strcmp========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

free (dst_name_18);
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 13: free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 13dot graph target basicblock en1

dot graph stmt start free (dst_name_18);
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
[40;32m    HAS FREE STMT count:7 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph entry match_refs
dot graph target entry end

dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
dot graph stmt end

this stmt call this function :make_linked_ref
trace fucntion name:make_linked_ref 
[40;44m =======trace_function_path make_linked_ref  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:make_linked_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1415632387
from make_linked_ref basic block 2dot graph end relate end

dot graph relate stmt start ID : 1730012165 stmt(call) :ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
name_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;46m =======add node_fun stack:tail_link_ref========= [0m
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 368983032 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 460125123 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 169448766 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1166756001 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1549039073 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1312277506
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1179146275 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;46m =======add node_fun stack:alloc_ref========= [0m
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
 <ssa_name 0x7f452746df30
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94090 dst_peer>
    def_stmt dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
    version:23
    ptr-info 0x7f4526f90810>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with dst_peer ========= [0m
dot graph arrowdot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1967833792 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1915341442 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 2135839134 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2008356375 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:dst_peer========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1131417198 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:7 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry match_refs
dot graph target entry end

_7 = &dst_peer_23->new_sha1;
In function ‘match_refs’:
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc en1

dot graph target line desc form basic block 11: _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph target line desend

dot graph target loc start # .MEM_34 = VDEF <.MEM_32>
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
./benchmarks/git/double_free_4/git_df_4.c:186:36: warning: use location
  186 |                         dst_peer = make_linked_ref(dst_name, dst_tail);
      |                                    ^
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start _7 = &dst_peer_23->new_sha1;
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
dot graph stmt end

dot graph stmt start _7 = &dst_peer_23->new_sha1;
./benchmarks/git/double_free_4/git_df_4.c:187:41: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                                         ^
dot graph stmt end

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_635172144 dot graph subgraph  if (src_9 != 0B)
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 15dot graph target basicblock en1

dot graph arrowsubgraph cluster_1485698709 dot graph subgraph  src_9 = PHI <src_16(D)(2), src_28(14)>
src_28 = src_9->next;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_413101998 dot graph subgraph  _1 = ref_5(D)->peer_ref;
src_9 = PHI <src_16(D)(2), src_28(14)>
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_989620886 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 1128084758
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1485573850 dot graph subgraph  start ID : 1605264924 stmt(relate) ， Tree ID : 1128084758 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1727557340
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_955386696 dot graph subgraph  start ID : 1464522984 stmt(relate) ， Tree ID : 1727557340 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 885042161
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1945712941 dot graph subgraph  start ID : 125933979 stmt(relate) ， Tree ID : 885042161 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 486587896
from free_ref basic block 3dot graph end relate end

subgraph cluster_2067621616 dot graph subgraph  start ID : 728701052 stmt(relate) ， Tree ID : 486587896 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1650296266
from free_ref basic block 3dot graph end relate end

subgraph cluster_1107049987 dot graph subgraph  start ID : 249560055 stmt(relate) ， Tree ID : 1650296266 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1579742478
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_608568423 dot graph subgraph  start ID : 1159816170 stmt(relate) ， Tree ID : 1579742478 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1960745152
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1448410146 dot graph subgraph  start ID : 663335198 stmt(relate) ， Tree ID : 1960745152 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1088624322
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_520239200 dot graph subgraph  start ID : 2094098516 stmt(relate) ， Tree ID : 1088624322 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1154873945
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_265689766 dot graph subgraph  start ID : 1398353552 stmt(relate) ， Tree ID : 1154873945 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 994265860
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1083937869 dot graph subgraph  start ID : 254739193 stmt(relate) ， Tree ID : 994265860 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1979122586
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1912550998 dot graph subgraph  start ID : 1004654907 stmt(relate) ， Tree ID : 1979122586 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1088913950
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1681322153 dot graph subgraph  start ID : 1407050365 stmt(relate) ， Tree ID : 1088913950 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 373124773
from free_ref basic block 3dot graph end relate end

subgraph cluster_666466386 dot graph subgraph  start ID : 354448741 stmt(relate) ， Tree ID : 373124773 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 2147358788
from free_ref basic block 3dot graph end relate end

subgraph cluster_1077344857 dot graph subgraph  start ID : 1528272178 stmt(relate) ， Tree ID : 2147358788 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1560672860
from find_ref_by_name basic block 4dot graph end relate end

subgraph cluster_2050305185 dot graph subgraph  start ID : 1392311798 stmt(relate) ， Tree ID : 1560672860 : list_8 = list_3->next;
./benchmarks/git/double_free_4/git_df_4.c:80:24: warning: use location
   80 |     for ( ; list; list = list->next)
      |                        ^
dot graph subgrapend

dot graph start relate for1ID : 1415632387
from make_linked_ref basic block 2dot graph end relate end

subgraph cluster_1126591510 dot graph subgraph  start ID : 1730012165 stmt(relate) ， Tree ID : 1415632387 : ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph subgrapend

dot graph start relate for1ID : 1312277506
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1246793623 dot graph subgraph  start ID : 1179146275 stmt(relate) ， Tree ID : 1312277506 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1762714361
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1069577538 dot graph subgraph  start ID : 1131417198 stmt(relate) ， Tree ID : 1762714361 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
if (src_9 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:163:17: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_31>
src_28 = src_9->next;
./benchmarks/git/double_free_4/git_df_4.c:163:26: warning: use location
  163 |         for ( ; src; src = src->next) {
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
src_9 = PHI <src_16(D)(2), src_28(14)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_7(D)>
_1 = ref_5(D)->peer_ref;
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: free in this location
  192 |                 free(dst_name);
      |                 ^

===== possiable asias =====
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:7 [0m
[40;31m  	possible double free [rigorous]:7 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dc60
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = &dst_peer_23->new_sha1;
    version:7
    ptr-info 0x7f4526f90750>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_528146935 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_278456250 dot graph subgraph  hashcpy (_7, _6);
_7 = &dst_peer_23->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f452746dc18
    type <pointer_type 0x7f4526f855e8
        type <array_type 0x7f4526f80540 type <integer_type 0x7f452747a348 unsigned char>
            BLK
            size <integer_cst 0x7f4526f6f840 constant 160>
            unit-size <integer_cst 0x7f4526f6f828 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f80498>
            pointer_to_this <pointer_type 0x7f4526f855e8>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _6 = &src_9->new_sha1;
    version:6
    ptr-info 0x7f4526f90738>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
dot graph entry match_refs
dot graph target entry end

hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_35 = VDEF <.MEM_34>
hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph target loc end

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph stmt start hashcpy (_7, _6);
hashcpy (_7, _6);
dot graph stmt end

dot graph stmt start hashcpy (_7, _6);
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
dot graph stmt end

this stmt call this function :hashcpy
trace fucntion name:hashcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1577868614 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend

dot graph target basicblock start from match_refs basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_143377648 dot graph subgraph  hashcpy (_7, _6);
_6 = &src_9->new_sha1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_38 = VDEF <.MEM_30>
free (dst_name_18);
./benchmarks/git/double_free_4/git_df_4.c:192:17: warning: use location
  192 |                 free(dst_name);
      |                 ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
  187 |                         hashcpy(dst_peer->new_sha1, src->new_sha1);
      |                         ^
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   fuck [0m
free (dst_name_18);
[40;31m   malloc def-leak warring [0m
_6
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;31m   memory leak and alloc new memory [0m
_7
./benchmarks/git/double_free_4/git_df_4.c:187:25: warning: use location
[40;44m =======print_function_path make_linked_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:tail_link_ref========= [0m
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;42m =======pre add _ fucntion:alloc_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_98806395 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1345726408 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_131733135 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2107162770 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_329659959 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_766905279 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1445377831 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_742761957 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1756526165 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_783468033 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1698148653 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1554755459 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_703606001 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_657714993 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_15840234 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_4532499 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1177954193 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_281530000 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1088470368 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_943021543 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1962852153 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1754936755 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2020366400 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1865673690 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_734044617 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1119676375 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_787767580 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1262191552 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1398132626 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_218152547 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1405569201 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1496939021 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1563878955 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1537302336 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1456618143 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1893538914 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f4526f90540
    type <array_type 0x7f4526f80e70
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        QI size <integer_cst 0x7f4527465ca8 8> unit-size <integer_cst 0x7f4527465cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f4526f80dc8 type <integer_type 0x7f452747a000 sizetype>
            DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465be8 0> max <integer_cst 0x7f4527465be8 0>>
        pointer_to_this <pointer_type 0x7f4526f85348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 754512326 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 488817224 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1913250133 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1537980360 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 39482229 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 94102713 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 697197222 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1336362178 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 98635213 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1875151415 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1617892179 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1187105581 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_670689311 dot graph subgraph  start ID : 1463944854 stmt(relate) ， Tree ID : 1682425410 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1433260684 dot graph subgraph  start ID : 763010950 stmt(relate) ， Tree ID : 135851772 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_794558688 dot graph subgraph  start ID : 1584760860 stmt(relate) ， Tree ID : 1942311852 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_543572063 dot graph subgraph  start ID : 189189594 stmt(relate) ， Tree ID : 310563644 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1151450727 dot graph subgraph  start ID : 39482229 stmt(relate) ， Tree ID : 156723967 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1528603305 dot graph subgraph  start ID : 1875151415 stmt(relate) ， Tree ID : 1320521944 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1939218307 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 643311210 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 913897417 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 9887206 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 2048880411 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1573766162 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1438699099 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1719970933 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1319821428 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1595423066 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_326999611 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1808638652 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1361189551 dot graph subgraph  start ID : 1809818461 stmt(relate) ， Tree ID : 780581306 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1864979971 dot graph subgraph  start ID : 1562116767 stmt(relate) ， Tree ID : 1611112724 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1848120882 dot graph subgraph  start ID : 266882768 stmt(relate) ， Tree ID : 202987855 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_534227847 dot graph subgraph  start ID : 679032438 stmt(relate) ， Tree ID : 1457593336 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1959082685 dot graph subgraph  start ID : 2048880411 stmt(relate) ， Tree ID : 1663248439 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_397834456 dot graph subgraph  start ID : 1595423066 stmt(relate) ， Tree ID : 263352790 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:make_linked_ref========= [0m
[40;42m =======start_check_funciton:make_linked_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 125502224 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1340998557 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1097339831 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 796191535 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 626775593 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f982d0
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a700 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90840>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 1339763598 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1778226320 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1273018177 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 855528389 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1569960980 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1891898520
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 1916329387 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1769425806 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1579848186 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 893366488
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1817726150 dot graph subgraph  start ID : 1246263305 stmt(relate) ， Tree ID : 893366488 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1224083629
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_2032778596 dot graph subgraph  start ID : 1633034741 stmt(relate) ， Tree ID : 1224083629 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 31182486
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1006130700 dot graph subgraph  start ID : 184514508 stmt(relate) ， Tree ID : 31182486 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1805892713
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1108941601 dot graph subgraph  start ID : 1743298795 stmt(relate) ， Tree ID : 1805892713 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 2057717898
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1605265881 dot graph subgraph  start ID : 626775593 stmt(relate) ， Tree ID : 2057717898 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1891898520
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_178468481 dot graph subgraph  start ID : 1916329387 stmt(relate) ， Tree ID : 1891898520 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1987107133 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1918070571 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1649761816 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1687744367 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 304814771 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2085578824 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 27921149 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1371595103 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 63597400 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1368919706 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1461360853
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 321451287 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_7 = VDEF <.MEM_6(D)>
ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 65866159 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 52068885 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1626437972 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1338884336 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 907597275 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1048915304 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1107730076 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_529539433 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_481279842 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_777972578 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_414834382 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1487410543 dot graph subgraph  start ID : 1577613551 stmt(relate) ， Tree ID : 974641566 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1886914180 dot graph subgraph  start ID : 294777314 stmt(relate) ， Tree ID : 1696736121 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2020100263 dot graph subgraph  start ID : 1051589754 stmt(relate) ， Tree ID : 423786798 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1665879024 dot graph subgraph  start ID : 1171180987 stmt(relate) ， Tree ID : 1409944810 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_296311552 dot graph subgraph  start ID : 1833309751 stmt(relate) ， Tree ID : 395332167 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1804882108 dot graph subgraph  start ID : 202689011 stmt(relate) ， Tree ID : 1929560954 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1505502509 dot graph subgraph  start ID : 774797276 stmt(relate) ， Tree ID : 1135181458 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1050678627
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_66898475 dot graph subgraph  start ID : 1755738248 stmt(relate) ， Tree ID : 1050678627 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1307160277 dot graph subgraph  start ID : 335711737 stmt(relate) ， Tree ID : 1649471321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1045763229 dot graph subgraph  start ID : 304814771 stmt(relate) ， Tree ID : 1932265493 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1461360853
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_371713246 dot graph subgraph  start ID : 321451287 stmt(relate) ， Tree ID : 1461360853 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_621037482 dot graph subgraph  start ID : 907597275 stmt(relate) ， Tree ID : 1995695299 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_6>
return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :889========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1992632586 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1047455805 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1768554101 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 166600225 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1907244740 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
is Other function alloc_ref
 
 Start check Pointer Collect  

======================================================================
dot graph entry make_linked_ref
dot graph target entry end

return ret_4;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start return ret_4;
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start return ret_4;
./benchmarks/git/double_free_4/git_df_4.c:146:16: warning: use location
  146 |         return ret;
      |                ^
dot graph stmt end

# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 232466384 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
  136 |         **tail = ref;
      |                ^
*_1 = ref_7(D);
dot graph relate stmt start ID : 1959313625 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:16: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 1095720077 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1571350720 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 719427252 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1616765753
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2144635381 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph entry make_linked_ref
dot graph target entry end

ret_4 = alloc_ref (name_2(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start ret_4 = alloc_ref (name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
dot graph stmt end

this stmt call this function :alloc_ref
trace fucntion name:alloc_ref 
[40;44m =======trace_function_path alloc_ref  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
alloc_ref_with_prefix this fucntion return value is heap-object 
alloc_ref this fucntion return value is heap-object alloc_ref_with_prefix
[40;46m =======add node_fun stack:alloc_ref_with_prefix========= [0m
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f4526f98318
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f943f0 ret>
    def_stmt ret_4 = alloc_ref (name_2(D));
    version:4
    ptr-info 0x7f4526f90858>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with ret ========= [0m
dot graph arrowdot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 478431575 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1309569727 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1663801068 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1965842118 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ret========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1049000259 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1536417683 dot graph subgraph  return ret_4;
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1484237494 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1345311811 dot graph subgraph  ret_4 = alloc_ref (name_2(D));
ret_4 = alloc_ref (name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 1148037647
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1193816144 dot graph subgraph  start ID : 504158035 stmt(relate) ， Tree ID : 1148037647 : _5 = _4 + prefixlen_9(D);
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 421216324
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_842256356 dot graph subgraph  start ID : 544673851 stmt(relate) ， Tree ID : 421216324 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1239457623
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1412210286 dot graph subgraph  start ID : 1518249792 stmt(relate) ， Tree ID : 1239457623 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 974641566
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_353492773 dot graph subgraph  start ID : 1577613551 stmt(relate) ， Tree ID : 974641566 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1696736121
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1888019585 dot graph subgraph  start ID : 294777314 stmt(relate) ， Tree ID : 1696736121 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 423786798
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1783923533 dot graph subgraph  start ID : 1051589754 stmt(relate) ， Tree ID : 423786798 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1409944810
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_974530255 dot graph subgraph  start ID : 1171180987 stmt(relate) ， Tree ID : 1409944810 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 395332167
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_724394342 dot graph subgraph  start ID : 1833309751 stmt(relate) ， Tree ID : 395332167 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1929560954
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_36074280 dot graph subgraph  start ID : 202689011 stmt(relate) ， Tree ID : 1929560954 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1135181458
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_819679193 dot graph subgraph  start ID : 774797276 stmt(relate) ， Tree ID : 1135181458 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1050678627
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1771850147 dot graph subgraph  start ID : 1755738248 stmt(relate) ， Tree ID : 1050678627 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1649471321
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1804628382 dot graph subgraph  start ID : 335711737 stmt(relate) ， Tree ID : 1649471321 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 1932265493
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_986279418 dot graph subgraph  start ID : 304814771 stmt(relate) ， Tree ID : 1932265493 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1461360853
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1531611239 dot graph subgraph  start ID : 321451287 stmt(relate) ， Tree ID : 1461360853 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1995695299
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1273910487 dot graph subgraph  start ID : 907597275 stmt(relate) ， Tree ID : 1995695299 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend

dot graph start relate for1ID : 399634395
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1218745802 dot graph subgraph  start ID : 1907244740 stmt(relate) ， Tree ID : 399634395 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1616765753
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1343441216 dot graph subgraph  start ID : 2144635381 stmt(relate) ， Tree ID : 1616765753 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
dot graph subgrapend

dot graph start relate for1ID : 1248966686
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_222146916 dot graph subgraph  start ID : 1049000259 stmt(relate) ， Tree ID : 1248966686 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^

dot graph START

======================================================================
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 642612875
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 2062868469 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 642612875
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 219298649 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 642612875
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1174210023 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 642612875
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 1164351507 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 642612875
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 697730224 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
dot graph entry make_linked_ref
dot graph target entry end

tail_link_ref (ret_4, tail_5(D));
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7>
tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph target loc end

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
tail_link_ref (ret_4, tail_5(D));
dot graph stmt end

dot graph stmt start tail_link_ref (ret_4, tail_5(D));
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
dot graph stmt end

this stmt call this function :tail_link_ref
trace fucntion name:tail_link_ref 
[40;44m =======trace_function_path tail_link_ref  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f4526f98360
    type <pointer_type 0x7f4526f853f0
        type <pointer_type 0x7f4526f80738 type <pointer_type 0x7f4526f80690>
            public unsigned DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4526f853f0>>
        public unsigned DI size <integer_cst 0x7f4527465bb8 64> unit-size <integer_cst 0x7f4527465bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4526f8a780 tail>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4526f90870>
[40;36m ======= node_fun:tail_link_ref========= [0m
[40;36m ======= find relate stmt with tail ========= [0m
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 336296102
from tail_link_ref basic block 2dot graph end relate end

In function ‘tail_link_ref’:
./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
  136 |         **tail = ref;
      |          ^
_1 = *tail_6(D);
dot graph relate stmt start ID : 680668927 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:136:10: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:ref========= [0m
dot graph arrowdot graph start relate for1ID : 336296102
from tail_link_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
  138 |                 ref = ref->next;
      |                     ^
ref_10 = ref_4->next;
dot graph relate stmt start ID : 516088695 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:138:21: warning: use location
ref_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 336296102
from tail_link_ref basic block 4dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
  137 |         while (ref->next)
      |                   ^
_2 = ref_4->next;
dot graph relate stmt start ID : 1385296361 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:137:19: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 336296102
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
  139 |         *tail = &ref->next;
      |                 ^
_3 = &ref_4->next;
dot graph relate stmt start ID : 69602962 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tail========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 336296102
from tail_link_ref basic block 5dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
  139 |         *tail = &ref->next;
      |               ^
*tail_6(D) = _3;
dot graph relate stmt start ID : 2000326189 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
*tail_6(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_583124524 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from make_linked_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1263419106 dot graph subgraph  tail_link_ref (ret_4, tail_5(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 226846465
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_695098897 dot graph subgraph  start ID : 1689306672 stmt(relate) ， Tree ID : 226846465 : *tail_6(D) = _3;
In function ‘make_linked_ref’:
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 688011709
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1995334811 dot graph subgraph  start ID : 1291969654 stmt(relate) ， Tree ID : 688011709 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1440087220
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1616911879 dot graph subgraph  start ID : 1811890145 stmt(relate) ， Tree ID : 1440087220 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 603030754
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_435634834 dot graph subgraph  start ID : 468885718 stmt(relate) ， Tree ID : 603030754 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 642612875
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_1631774696 dot graph subgraph  start ID : 697730224 stmt(relate) ， Tree ID : 642612875 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 336296102
from tail_link_ref basic block 5dot graph end relate end

subgraph cluster_443958487 dot graph subgraph  start ID : 2000326189 stmt(relate) ， Tree ID : 336296102 : *tail_6(D) = _3;
./benchmarks/git/double_free_4/git_df_4.c:139:15: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
  145 |         tail_link_ref(ret, tail);
      |         ^
[40;31m   malloc def-leak warring [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:145:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
ret_4
./benchmarks/git/double_free_4/git_df_4.c:144:27: warning: use location
  144 |         struct ref *ret = alloc_ref(name);
      |                           ^
[40;44m =======print_function_path tail_link_ref  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:tail_link_ref========= [0m
[40;42m =======start_check_funciton:tail_link_ref========= [0m
[40;44m =======print_function_path alloc_ref  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:alloc_ref_with_prefix========= [0m
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1160029176 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1667848976 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1263637680 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_784395675 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1324993710 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_102433451 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_168523266 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_451420549 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1321179253 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1511964483 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_673567465 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1963792128 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1427349304 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_892866114 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_990518504 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_444217163 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1590596339 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1326814606 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1124886090 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2106685034 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_564627320 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1194489052 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1959527575 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1147751844 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_310424511 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_507142825 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_995603007 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1927336390 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_942777659 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_479894055 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_223811229 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2102806836 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_259384 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1487448910 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_739718863 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1325253094 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;42m =======pre_check_funciton:alloc_ref========= [0m
[40;42m =======start_check_funciton:alloc_ref========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7f4526f90540
    type <array_type 0x7f4526f80e70
        type <integer_type 0x7f4526f78bd0 char public QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f80000>>
        QI size <integer_cst 0x7f4527465ca8 8> unit-size <integer_cst 0x7f4527465cc0 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7f4526f80dc8 type <integer_type 0x7f452747a000 sizetype>
            DI
            size <integer_cst 0x7f4527465bb8 constant 64>
            unit-size <integer_cst 0x7f4527465bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465be8 0> max <integer_cst 0x7f4527465be8 0>>
        pointer_to_this <pointer_type 0x7f4526f85348>>
    readonly constant static "\000">

dot graph START

======================================================================
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 908242130 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1776673644 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 763577966 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 272722965 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 302757461 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98750
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a900 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4526f90930>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with name ========= [0m
dot graph arrowdot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1700072269 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1195623576 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1570404951 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 2144289432 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 638736267 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_749735909 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1121691874 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
GIMPLE_NOP
dot graph subgrapend

dot graph start relate for1ID : 1682425410
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_597937653 dot graph subgraph  start ID : 1463944854 stmt(relate) ， Tree ID : 1682425410 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 135851772
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1314363229 dot graph subgraph  start ID : 763010950 stmt(relate) ， Tree ID : 135851772 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1942311852
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_168697278 dot graph subgraph  start ID : 1584760860 stmt(relate) ， Tree ID : 1942311852 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 310563644
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_409981580 dot graph subgraph  start ID : 189189594 stmt(relate) ， Tree ID : 310563644 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 156723967
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_314631426 dot graph subgraph  start ID : 39482229 stmt(relate) ， Tree ID : 156723967 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1320521944
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_479121789 dot graph subgraph  start ID : 1875151415 stmt(relate) ， Tree ID : 1320521944 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1589882361
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_917124405 dot graph subgraph  start ID : 302757461 stmt(relate) ， Tree ID : 1589882361 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 579886447
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1310234433 dot graph subgraph  start ID : 638736267 stmt(relate) ， Tree ID : 579886447 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_16>
return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1859902065 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 1790128489 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 482785761 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1815225253 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 1790387873 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
is Other function alloc_ref_with_prefix
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref
dot graph target entry end

return _4;
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc en1

dot graph target line desc form basic block 2: return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start return _4;
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph stmt end

# .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph entry alloc_ref
dot graph target entry end

_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
   98 |         return alloc_ref_with_prefix("", 0, name);
      |                ^
dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_6 = VDEF <.MEM_5(D)>
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph stmt end

dot graph stmt start _4 = alloc_ref_with_prefix ("", 0, name_2(D));
./benchmarks/git/double_free_4/git_df_4.c:98:16: warning: use location
dot graph stmt end

this stmt call this function :alloc_ref_with_prefix
trace fucntion name:alloc_ref_with_prefix 
[40;44m =======trace_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f4526f98798
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _4 = alloc_ref_with_prefix ("", 0, name_2(D));
    version:4
    ptr-info 0x7f4526f90948>
[40;36m ======= node_fun:alloc_ref_with_prefix========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 407460468 stmt(call) :len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
name_7(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

dot graph relate stmt start ID : 968157319 stmt(call) :ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
1
dot graph relate end

[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
_3 = &ref_11->name;
dot graph relate stmt start ID : 1412633384 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
_4 = &ref_11->name;
dot graph relate stmt start ID : 1315702598 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
_5 = _4 + prefixlen_9(D);
dot graph relate stmt start ID : 597347315 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;46m =======add node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_28727703 dot graph subgraph  return _4;
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1588425563 dot graph subgraph  _4 = alloc_ref_with_prefix ("", 0, name_2(D));
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
dot graph subgrapend

dot graph start relate for1ID : 780581306
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_900104777 dot graph subgraph  start ID : 1809818461 stmt(relate) ， Tree ID : 780581306 : _5 = _4 + prefixlen_9(D);
In function ‘alloc_ref’:
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1611112724
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_608614150 dot graph subgraph  start ID : 1562116767 stmt(relate) ， Tree ID : 1611112724 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 202987855
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1141014184 dot graph subgraph  start ID : 266882768 stmt(relate) ， Tree ID : 202987855 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1457593336
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_2095728353 dot graph subgraph  start ID : 679032438 stmt(relate) ， Tree ID : 1457593336 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1663248439
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_31535453 dot graph subgraph  start ID : 2048880411 stmt(relate) ， Tree ID : 1663248439 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 263352790
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_1137819968 dot graph subgraph  start ID : 1595423066 stmt(relate) ， Tree ID : 263352790 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 258974532
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_586980972 dot graph subgraph  start ID : 1790387873 stmt(relate) ， Tree ID : 258974532 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1970234671
from alloc_ref_with_prefix basic block 2dot graph end relate end

subgraph cluster_781271362 dot graph subgraph  start ID : 597347315 stmt(relate) ， Tree ID : 1970234671 : _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path alloc_ref_with_prefix  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;42m =======pre_check_funciton:alloc_ref_with_prefix========= [0m
[40;42m =======start_check_funciton:alloc_ref_with_prefix========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f989d8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8aa80 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f909a8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
In function ‘alloc_ref_with_prefix’:
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_112028194 dot graph subgraph  len_8 = strlen (name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1184918625 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2095634592 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_280725473 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1594900205 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_262782370 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_759847262 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_364540963 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>

 ================== pre trace ptable ================== 
trace fucntion name:strlen 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a20
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <var_decl 0x7f4526f947e0 len>
    def_stmt len_8 = strlen (name_7(D));
    version:8>
is Other function strlen
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
   89 |         size_t len = strlen(name);
      |                      ^
dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_13(D)>
len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph stmt end

dot graph stmt start len_8 = strlen (name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:89:22: warning: use location
dot graph stmt end

this stmt call this function :strlen
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1573016803 dot graph subgraph  memcpy (_5, name_7(D), len_8);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1018821794 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
len_8 = strlen (name_7(D));
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_76959380 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1215661644 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1501607556 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1892184633 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_858565869 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1324358579 dot graph subgraph  len_8 = strlen (name_7(D));
len_8 = strlen (name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>
 <ssa_name 0x7f4526f98ab0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <var_decl 0x7f4526f94750 ref>
    def_stmt ref_11 = calloc (1, _2);
    version:11
    ptr-info 0x7f4526f909c0>

 ================== pre trace ptable ================== 
trace fucntion name:calloc 

 ================== pre trace ptable finish================== 
is Reserved word function :calloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start return ref_11;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start return ref_11;
./benchmarks/git/double_free_4/git_df_4.c:93:16: warning: use location
   93 |         return ref;
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph stmt end

this stmt call this function :calloc
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_152161453 dot graph subgraph  return ref_11;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1826723189 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_589508316 dot graph subgraph  _5 = _4 + prefixlen_9(D);
_4 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1467864052 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_276586856 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_618236019 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_908805967 dot graph subgraph  ref_11 = calloc (1, _2);
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98900
    type <pointer_type 0x7f4526f85000
        type <array_type 0x7f4526f802a0 type <integer_type 0x7f4526f78bd0 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f85000>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _3 = &ref_11->name;
    version:3
    ptr-info 0x7f4526f90960>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1176691633 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1226850169 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
_3 = &ref_11->name;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98af8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8a980 prefix>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4526f909d8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2049820152 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1124936338 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98a68
    type <integer_type 0x7f4526f78348 size_t public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a738 precision:64 min <integer_cst 0x7f4527465e88 0> max <integer_cst 0x7f4527466500 18446744073709551615> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>>
    var <parm_decl 0x7f4526f8aa00 prefixlen>
    def_stmt GIMPLE_NOP
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _5 = _4 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _5 = _4 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph stmt end


======================================================================

 Expand conflict 
 The same function may have multiple branches :memcpy
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
# .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _1 = len_8 + prefixlen_9(D);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _1 = len_8 + prefixlen_9(D);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _2 = _1 + 81;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _2 = _1 + 81;
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start ref_11 = calloc (1, _2);
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start ref_11 = calloc (1, _2);
./benchmarks/git/double_free_4/git_df_4.c:90:27: warning: use location
   90 |         struct ref *ref = xcalloc(1, sizeof(struct ref) + prefixlen + len + 1);
      |                           ^
dot graph stmt end

this stmt call this function :calloc
dot graph entry alloc_ref_with_prefix
dot graph target entry end

_4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _4 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _4 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:92:16: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |                ^
dot graph stmt end

dot graph entry alloc_ref_with_prefix
dot graph target entry end

_3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
memcpy (_3, prefix_12(D), prefixlen_9(D));
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start _3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
dot graph stmt end

dot graph stmt start _3 = &ref_11->name;
./benchmarks/git/double_free_4/git_df_4.c:91:19: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |                   ^
dot graph stmt end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1258385622 dot graph subgraph  _5 = _4 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1040156472 dot graph subgraph  memcpy (_3, prefix_12(D), prefixlen_9(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1711917310 dot graph subgraph  _1 = len_8 + prefixlen_9(D);
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2039656984 dot graph subgraph  _2 = _1 + 81;
_1 = len_8 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1152184667 dot graph subgraph  ref_11 = calloc (1, _2);
_2 = _1 + 81;
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_749352287 dot graph subgraph  _4 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1987807928 dot graph subgraph  _3 = &ref_11->name;
ref_11 = calloc (1, _2);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98990
    type <pointer_type 0x7f4527481000
        type <void_type 0x7f452747af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4527481000>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f45274869d8>>
   
    def_stmt _5 = _4 + prefixlen_9(D);
    version:5
    ptr-info 0x7f4526f90990>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
dot graph entry alloc_ref_with_prefix
dot graph target entry end

memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_16 = VDEF <.MEM_15>
memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph stmt start memcpy (_5, name_7(D), len_8);
memcpy (_5, name_7(D), len_8);
dot graph stmt end

dot graph stmt start memcpy (_5, name_7(D), len_8);
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
dot graph stmt end

this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1432910140 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend

dot graph target basicblock start from alloc_ref_with_prefix basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_196768845 dot graph subgraph  memcpy (_5, name_7(D), len_8);
_5 = _4 + prefixlen_9(D);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;31m   malloc def-leak warring [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
   92 |         memcpy(ref->name + prefixlen, name, len);
      |         ^
[40;31m   malloc def-leak warring [0m
_5
./benchmarks/git/double_free_4/git_df_4.c:92:9: warning: use location
[40;31m   memory leak and alloc new memory [0m
_3
./benchmarks/git/double_free_4/git_df_4.c:91:9: warning: use location
   91 |         memcpy(ref->name, prefix, prefixlen);
      |         ^
[40;44m =======print_function_path find_ref_by_name  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;42m =======pre_check_funciton:find_ref_by_name========= [0m
[40;42m =======start_check_funciton:find_ref_by_name========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98c60
    type <pointer_type 0x7f4526f82c78
        type <array_type 0x7f4526f82bd0 type <integer_type 0x7f4526f78c78 char>
            BLK
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4526f801f8>
            pointer_to_this <pointer_type 0x7f4526f82c78>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = &list_3->name;
    version:1
    ptr-info 0x7f4526f909f0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
In function ‘find_ref_by_name’:
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_103106650 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_1 = &list_3->name;
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_45273754 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98dc8
    type <pointer_type 0x7f4526f78d20
        type <integer_type 0x7f4526f78c78 char readonly QI
            size <integer_cst 0x7f4527465ca8 constant 8>
            unit-size <integer_cst 0x7f4527465cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a3f0 precision:8 min <integer_cst 0x7f4526f6f738 -128> max <integer_cst 0x7f4526f6f720 127>
            pointer_to_this <pointer_type 0x7f4526f78d20>>
        unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f78888>>
    var <parm_decl 0x7f4526f8ac00 name>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7f4526f90a50>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_561309808 dot graph subgraph  _2 = strcmp (_1, name_7(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1676123454 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>

 ================== pre trace ptable ================== 
trace fucntion name:strcmp 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98ca8
    type <integer_type 0x7f452747a5e8 int public SI
        size <integer_cst 0x7f4527465df8 constant 32>
        unit-size <integer_cst 0x7f4527465e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f452747a5e8 precision:32 min <integer_cst 0x7f4527465db0 -2147483648> max <integer_cst 0x7f4527465dc8 2147483647>
        pointer_to_this <pointer_type 0x7f45274819d8>>
   
    def_stmt _2 = strcmp (_1, name_7(D));
    version:2>
is Other function strcmp
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry find_ref_by_name
dot graph target entry end

if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 3: if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start if (_2 == 0)
./benchmarks/git/double_free_4/git_df_4.c:81:12: warning: use location
   81 |         if (!strcmp(list->name, name))
      |            ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
   81 |         if (!strcmp(list->name, name))
      |              ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
dot graph entry find_ref_by_name
dot graph target entry end

_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_9(D)>
_2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph target loc end

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph stmt start _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph stmt end

dot graph stmt start _2 = strcmp (_1, name_7(D));
./benchmarks/git/double_free_4/git_df_4.c:81:14: warning: use location
dot graph stmt end

this stmt call this function :strcmp
trace fucntion name:strcmp 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1064095549 dot graph subgraph  if (_2 == 0)
_2 = strcmp (_1, name_7(D));
dot graph subgrapend

dot graph target basicblock start from find_ref_by_name basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_638269188 dot graph subgraph  _2 = strcmp (_1, name_7(D));
_2 = strcmp (_1, name_7(D));
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;44m =======print_function_path free_refs  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;44m =======print_function_path free_ref  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 744301450
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 418219457 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 418219457 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 744301450
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 382970173 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 382970173 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 744301450
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1602867320 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1602867320 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 744301450
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1742578036 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 744301450
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 535131626 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 744301450
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1282106861 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 184602704
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2002995678 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2002995678 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 184602704
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1558693717 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1558693717 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 184602704
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 802838723 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 802838723 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 184602704
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 764317998 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 184602704
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 587901703 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 184602704
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2029688892 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 666654502
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1712838041 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1712838041 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 666654502
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1140590866 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1140590866 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 666654502
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1706810974 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1706810974 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 666654502
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1277271704 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 666654502
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1032764203 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 666654502
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 711511993 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2026623991
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 873088483 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 873088483 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2026623991
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2144422133 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2144422133 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2026623991
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 75909188 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 75909188 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2026623991
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 976195134 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2026623991
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 42212240 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2026623991
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 637218996 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_504834940 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1106307789 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

subgraph cluster_1275488184 dot graph subgraph  start ID : 1948507834 stmt(relate) ， Tree ID : 78954043 : _3 = ref_5(D)->symref;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

subgraph cluster_1249136390 dot graph subgraph  start ID : 486047268 stmt(relate) ， Tree ID : 70614627 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

subgraph cluster_1524527246 dot graph subgraph  start ID : 301889336 stmt(relate) ， Tree ID : 441818598 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

subgraph cluster_1658458357 dot graph subgraph  start ID : 1172907320 stmt(relate) ， Tree ID : 1930062124 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 744301450
from free_ref basic block 3dot graph end relate end

subgraph cluster_704520062 dot graph subgraph  start ID : 1282106861 stmt(relate) ， Tree ID : 744301450 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 184602704
from free_ref basic block 3dot graph end relate end

subgraph cluster_1119621634 dot graph subgraph  start ID : 2029688892 stmt(relate) ， Tree ID : 184602704 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 666654502
from free_ref basic block 3dot graph end relate end

subgraph cluster_46106336 dot graph subgraph  start ID : 711511993 stmt(relate) ， Tree ID : 666654502 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2026623991
from free_ref basic block 3dot graph end relate end

subgraph cluster_1986626923 dot graph subgraph  start ID : 637218996 stmt(relate) ， Tree ID : 2026623991 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;42m =======pre_check_funciton:free_refs========= [0m
[40;42m =======start_check_funciton:free_refs========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start if (ref_1 != 0B)
free_ref (ref_1);
dot graph stmt end

dot graph stmt start if (ref_1 != 0B)
./benchmarks/git/double_free_4/git_df_4.c:71:16: warning: use location
   71 |         while (ref) {
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
dot graph entry free_refs
dot graph target entry end

free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (ref_1);
free_ref (ref_1);
dot graph stmt end

dot graph stmt start free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1304224339
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2049102014 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2049102014 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1304224339
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1397836993 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1397836993 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1304224339
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2107063062 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2107063062 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1304224339
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 665936364 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1304224339
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1985738696 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1304224339
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1989268307 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1332590866
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1551093089 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1551093089 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1332590866
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 982375525 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 982375525 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1332590866
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 891918193 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 891918193 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526f98ea0
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
    var <parm_decl 0x7f4526f8ac80 ref>
    def_stmt ref_1 = PHI <ref_3(D)(2), next_5(3)>
    version:1
    ptr-info 0x7f4526f90a80>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with ref ========= [0m
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1332590866
from free_ref basic block 3dot graph end relate end

In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 680881145 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1332590866
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2015139728 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ref========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1332590866
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1603430186 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

next_5 = ref_1->next;
In function ‘free_refs’:
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 3: next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc end

dot graph target basicblock start from free_refs basic block 3dot graph target basicblock en1

dot graph stmt start next_5 = ref_1->next;
free_ref (ref_1);
dot graph stmt end

dot graph stmt start next_5 = ref_1->next;
./benchmarks/git/double_free_4/git_df_4.c:72:22: warning: use location
   72 |                 next = ref->next;
      |                      ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
[40;31m    branch possiable have return in bb:4 [0m
beacuse in succ := 5 have return 

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry free_refs
dot graph target entry end

ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
   73 |                 free_ref(ref);
      |                 ^
dot graph target loc en1

dot graph target line desc form basic block 4: ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_6>
free_ref (ref_1);
./benchmarks/git/double_free_4/git_df_4.c:73:17: warning: use location
dot graph target loc end

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph stmt start ref_1 = PHI <ref_3(D)(2), next_5(3)>
free_ref (ref_1);
dot graph stmt end

dot graph stmt start ref_1 = PHI <ref_3(D)(2), next_5(3)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch --------
dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_560021489 dot graph subgraph  if (ref_1 != 0B)
ref_1 = PHI <ref_3(D)(2), next_5(3)>
dot graph subgrapend

dot graph target basicblock start from free_refs basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_740744564 dot graph subgraph  ref_1 = PHI <ref_3(D)(2), next_5(3)>
next_5 = ref_1->next;
dot graph subgrapend

dot graph start relate for1ID : 397419751
from free_ref basic block 3dot graph end relate end

subgraph cluster_1600368672 dot graph subgraph  start ID : 1281657842 stmt(relate) ， Tree ID : 397419751 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
dot graph subgrapend

dot graph start relate for1ID : 1419906025
from free_ref basic block 3dot graph end relate end

subgraph cluster_635930677 dot graph subgraph  start ID : 2009982427 stmt(relate) ， Tree ID : 1419906025 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1304224339
from free_ref basic block 3dot graph end relate end

subgraph cluster_1716939698 dot graph subgraph  start ID : 1989268307 stmt(relate) ， Tree ID : 1304224339 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1332590866
from free_ref basic block 3dot graph end relate end

subgraph cluster_1642580912 dot graph subgraph  start ID : 1603430186 stmt(relate) ， Tree ID : 1332590866 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;44m =======print_function_path free_ref  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;42m =======pre_check_funciton:free_ref========= [0m
[40;42m =======start_check_funciton:free_ref========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
In function ‘free_ref’:
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 1273149674
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 74290990 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 74290990 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 1273149674
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 601405053 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 601405053 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 1273149674
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 401154210 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 401154210 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1273149674
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1323427380 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1273149674
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2125932299 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 1273149674
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 2059612568 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 2027947443
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1098070285 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1098070285 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 2027947443
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 2105718904 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2105718904 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 2027947443
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1867090718 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1867090718 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2027947443
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 254810976 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2027947443
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 2007337270 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 2027947443
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1117444063 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 4 have return 

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
dot graph entry free_ref
dot graph target entry end

free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph target loc end

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph stmt start free_ref (_1);
free_ref (_1);
dot graph stmt end

dot graph stmt start free_ref (_1);
./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
dot graph stmt end

this stmt call this function :free_ref
trace fucntion name:free_ref 
[40;44m =======trace_function_path free_ref  function_call count: 2 level :0========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 214390391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 525789987 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 525789987 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 214390391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 955699111 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 955699111 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 214390391
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 56175050 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 56175050 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 214390391
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1858380853 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 214390391
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 359308553 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 214390391
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1038550575 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;46m =======add node_fun stack:free_ref========= [0m
[40;44m =======trace_function_path free_ref  function_call count: 2 level :1========  [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
dot graph start relate form ID : 602815398
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 1040189698 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1040189698 stmt(free) :free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
dot graph relate end

# .MEM_10 = VDEF <.MEM_9>
free (_3);
[40;31m  find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
dot graph start relate form ID : 602815398
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 906206656 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 906206656 stmt(free) :free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
dot graph relate end

# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^
dot graph start relate form ID : 602815398
from free_ref basic block 3dot graph end relate end

dot graph relate stmt start ID : 58761937 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 58761937 stmt(free) :free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
dot graph relate end

 <ssa_name 0x7f4526fa2090
    type <pointer_type 0x7f4526f80690
        type <record_type 0x7f4526f805e8 ref BLK
            size <integer_cst 0x7f452753a0a8 constant 640>
            unit-size <integer_cst 0x7f4526f6f768 constant 80>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4526f805e8 fields <field_decl 0x7f4526f7b850 next> context <translation_unit_decl 0x7f4527470168 ./benchmarks/git/double_free_4/git_df_4.c>
            pointer_to_this <pointer_type 0x7f4526f80690>>
        public unsigned DI
        size <integer_cst 0x7f4527465bb8 constant 64>
        unit-size <integer_cst 0x7f4527465bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4526f80738>>
   
    def_stmt _1 = ref_5(D)->peer_ref;
    version:1
    ptr-info 0x7f4526f90ac8>
[40;36m ======= node_fun:free_ref========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 602815398
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
   62 |         free_ref(ref->peer_ref);
      |         ^
_1 = ref_5(D)->peer_ref;
dot graph relate stmt start ID : 1600211187 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:62:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 602815398
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
   63 |         free(ref->remote_status);
      |                 ^
_2 = ref_5(D)->remote_status;
dot graph relate stmt start ID : 1646951220 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:63:17: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 602815398
from free_ref basic block 3dot graph end relate end

./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
   64 |         free(ref->symref);
      |                 ^
_3 = ref_5(D)->symref;
dot graph relate stmt start ID : 1659130609 stmt(LHS) :./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free_ref========= [0m
[40;41m =======recursive_fun2:free_ref========= [0m

 ================== trace ================== 
trace fucntion free:12 
dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_88658217 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph target basicblock start from free_ref basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1216407270 dot graph subgraph  free_ref (_1);
_1 = ref_5(D)->peer_ref;
dot graph subgrapend

dot graph start relate for1ID : 78954043
from free_ref basic block 3dot graph end relate end

subgraph cluster_1154227873 dot graph subgraph  start ID : 1948507834 stmt(relate) ， Tree ID : 78954043 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 70614627
from free_ref basic block 3dot graph end relate end

subgraph cluster_1361807891 dot graph subgraph  start ID : 486047268 stmt(relate) ， Tree ID : 70614627 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 441818598
from free_ref basic block 3dot graph end relate end

subgraph cluster_1290698260 dot graph subgraph  start ID : 301889336 stmt(relate) ， Tree ID : 441818598 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1930062124
from free_ref basic block 3dot graph end relate end

subgraph cluster_1755632926 dot graph subgraph  start ID : 1172907320 stmt(relate) ， Tree ID : 1930062124 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 744301450
from free_ref basic block 3dot graph end relate end

subgraph cluster_1762962101 dot graph subgraph  start ID : 1282106861 stmt(relate) ， Tree ID : 744301450 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 184602704
from free_ref basic block 3dot graph end relate end

subgraph cluster_466641992 dot graph subgraph  start ID : 2029688892 stmt(relate) ， Tree ID : 184602704 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 666654502
from free_ref basic block 3dot graph end relate end

subgraph cluster_1734081577 dot graph subgraph  start ID : 711511993 stmt(relate) ， Tree ID : 666654502 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2026623991
from free_ref basic block 3dot graph end relate end

subgraph cluster_1675091021 dot graph subgraph  start ID : 637218996 stmt(relate) ， Tree ID : 2026623991 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 1273149674
from free_ref basic block 3dot graph end relate end

subgraph cluster_347105787 dot graph subgraph  start ID : 2059612568 stmt(relate) ， Tree ID : 1273149674 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 2027947443
from free_ref basic block 3dot graph end relate end

subgraph cluster_684668214 dot graph subgraph  start ID : 1117444063 stmt(relate) ， Tree ID : 2027947443 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 214390391
from free_ref basic block 3dot graph end relate end

subgraph cluster_1633326277 dot graph subgraph  start ID : 1038550575 stmt(relate) ， Tree ID : 214390391 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 602815398
from free_ref basic block 3dot graph end relate end

subgraph cluster_66712858 dot graph subgraph  start ID : 1659130609 stmt(relate) ， Tree ID : 602815398 : _3 = ref_5(D)->symref;
./benchmarks/git/double_free_4/git_df_4.c:64:17: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (_2);
./benchmarks/git/double_free_4/git_df_4.c:63:9: warning: use location
   63 |         free(ref->remote_status);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_10 = VDEF <.MEM_9>
free (_3);
./benchmarks/git/double_free_4/git_df_4.c:64:9: warning: use location
   64 |         free(ref->symref);
      |         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ref_5(D));
./benchmarks/git/double_free_4/git_df_4.c:65:9: warning: use location
   65 |         free(ref);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:12 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:12 [0m

======================================================================

======================================================================
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = get_local_heads ();
_2 = (long int) _1;
local_refs_12 = (struct ref *) _2;
remote_tail = &remote_refs;
_3 = remote_refs;
_4 = match_refs (local_refs_12, _3, &remote_tail, 0, argv_9(D), 1);
if (_4 != 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 4>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
// predicted unlikely by goto predictor.
goto <bb 6>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 708669601]:
_5 = remote_refs;
if (_5 == 0B)
  goto <bb 5>; [9.81%]
else
  goto <bb 6>; [90.19%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 69520487]:
_6 = stderr;
__builtin_fwrite ("No refs in common and none specified; doing nothing.\n", 1, 53, _6);
// predicted unlikely by goto predictor.

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073741824]:
cleanup:
free_refs (local_refs_12);
_7 = remote_refs;
free_refs (_7);
return 0;

=======Mapping node_fun:match_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
dst_name_18 = &src_9->name;
_1 = src_9->peer_ref;
if (_1 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
// predicted unlikely by continue predictor.
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 286689065]:
dst_peer_20 = find_ref_by_name (dst_19(D), dst_name_18);
if (dst_peer_20 != 0B)
  goto <bb 6>; [70.00%]
else
  goto <bb 8>; [30.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 200682346]:
_2 = dst_peer_20->peer_ref;
if (_2 != 0B)
  goto <bb 7>; [54.59%]
else
  goto <bb 12>; [45.41%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 109552493]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 86006719]:
_3 = BIT_FIELD_REF <MEM[(const struct refspec *)0B], 8, 0>;
_4 = _3 & 4;
if (_4 != 0)
  goto <bb 9>; [67.00%]
else
  goto <bb 11>; [33.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 57624502]:
_5 = flags_15(D) & 3;
if (_5 == 0)
  goto <bb 10>; [34.00%]
else
  goto <bb 11>; [66.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 19592331]:
// predicted unlikely by goto predictor.
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 66414388]:
dst_peer_23 = make_linked_ref (dst_name_18, dst_tail_21(D));
_6 = &src_9->new_sha1;
_7 = &dst_peer_23->new_sha1;
hashcpy (_7, _6);

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 157544241]:
# dst_peer_10 = PHI <dst_peer_20(6), dst_peer_23(11)>
dst_peer_10->peer_ref = src_9;
_8 = MEM[(const struct refspec *)0B].force;
dst_peer_10->force = _8;

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 286689065]:
free_name:
free (dst_name_18);

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 955630227]:
src_28 = src_9->next;

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 1073741824]:
# src_9 = PHI <src_16(D)(2), src_28(14)>
if (src_9 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 16>; [11.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 118111600]:
return 0;

=======Mapping node_fun:make_linked_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_4 = alloc_ref (name_2(D));
tail_link_ref (ret_4, tail_5(D));
return ret_4;

=======Mapping node_fun:tail_link_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
_1 = *tail_6(D);
*_1 = ref_7(D);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
ref_10 = ref_4->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_4 = PHI <ref_7(D)(2), ref_10(3)>
_2 = ref_4->next;
if (_2 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
_3 = &ref_4->next;
*tail_6(D) = _3;
return;

=======Mapping node_fun:alloc_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_4 = alloc_ref_with_prefix ("", 0, name_2(D));
return _4;

=======Mapping node_fun:alloc_ref_with_prefix=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
len_8 = strlen (name_7(D));
_1 = len_8 + prefixlen_9(D);
_2 = _1 + 81;
ref_11 = calloc (1, _2);
_3 = &ref_11->name;
memcpy (_3, prefix_12(D), prefixlen_9(D));
_4 = &ref_11->name;
_5 = _4 + prefixlen_9(D);
memcpy (_5, name_7(D), len_8);
return ref_11;

=======Mapping node_fun:find_ref_by_name=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 114863530]:
goto <bb 5>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1014686026]:
_1 = &list_3->name;
_2 = strcmp (_1, name_7(D));
if (_2 == 0)
  goto <bb 6>; [5.50%]
else
  goto <bb 4>; [94.50%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 958878296]:
list_8 = list_3->next;

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# list_3 = PHI <list_5(D)(2), list_8(4)>
if (list_3 != 0B)
  goto <bb 3>; [94.50%]
else
  goto <bb 6>; [5.50%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863531]:
# _4 = PHI <list_3(3), 0B(5)>
return _4;

=======Mapping node_fun:free_refs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
next_5 = ref_1->next;
free_ref (ref_1);

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ref_1 = PHI <ref_3(D)(2), next_5(3)>
if (ref_1 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return;

=======Mapping node_fun:free_ref=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (ref_5(D) == 0B)
  goto <bb 4>; [30.95%]
else
  goto <bb 3>; [69.05%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 741418729]:
_1 = ref_5(D)->peer_ref;
free_ref (_1);
_2 = ref_5(D)->remote_status;
free (_2);
_3 = ref_5(D)->symref;
free (_3);
free (ref_5(D));

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 40 [0m
[40;34m    analyzable ptable point : 34 [0m
[40;34m    analyzable ptable all point stmt : 102 [0m
[40;34m    used_stmt array stack totalsize of : 0.003080 mb[0m
[40;34m    collect time: : 0.044004 s [0m
[40;34m    algorithm time: 0.380929 s [0m
[40;34m    gimple stmt count : : 87 [0m
[40;34m    this report analysis in Fri Feb 25 17:52:31 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  2157k ( 76%)
 phase opt and generate             :   0.15 (100%)   0.26 (100%)   0.41 ( 98%)   626k ( 22%)
 callgraph functions expansion      :   0.02 ( 13%)   0.00 (  0%)   0.03 (  7%)   521k ( 18%)
 dominator optimization             :   0.01 (  7%)   0.00 (  0%)   0.00 (  0%)    10k (  0%)
 tree iv optimization               :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    80  (  0%)
 plugin execution                   :   0.13 ( 87%)   0.26 (100%)   0.38 ( 90%)  1728  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    12k (  0%)
 rest of compilation                :   0.01 (  7%)   0.00 (  0%)   0.01 (  2%)    29k (  1%)
 TOTAL                              :   0.15          0.26          0.42         2845k
/usr/bin/ld: /tmp/cc2qr7yz.ltrans0.ltrans.o: in function `match_refs':
<artificial>:(.text+0x19c): undefined reference to `hashcpy'
/usr/bin/ld: /tmp/cc2qr7yz.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x21b): undefined reference to `get_local_heads'
collect2: error: ld returned 1 exit status
