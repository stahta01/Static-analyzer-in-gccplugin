In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_2/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_2/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_2/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_2/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_2/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_2/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_2/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:10:
./benchmarks/git/double_free_2/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/../git.h: At top level:
./benchmarks/git/double_free_2/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_2/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_2/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_2/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:12:1: note: include ‘<string.h>’ or provide a declaration of ‘memset’
   11 | #include "../git.h"
  +++ |+#include <string.h>
   12 | 
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: incompatible implicit declaration of built-in function ‘memset’ [-Wbuiltin-declaration-mismatch]
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:16:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:112:29: warning: implicit declaration of function ‘alloc_nr’; did you mean ‘alloca’? [-Wimplicit-function-declaration]
  112 |                         if (alloc_nr(alloc) < (nr)) \
      |                             ^~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:23:9: note: in expansion of macro ‘ALLOC_GROW’
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_reset’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: implicit declaration of function ‘strbuf_setlen’; did you mean ‘strbuf_reset’? [-Wimplicit-function-declaration]
   29 |                 strbuf_setlen(sb, 0);
      |                 ^~~~~~~~~~~~~
      |                 strbuf_reset
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:35:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: assignment discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
   62 |     *endptr = str + base;
      |             ^
./benchmarks/git/double_free_2/git_df_2.c: In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: implicit declaration of function ‘strcspn’ [-Wimplicit-function-declaration]
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:87:23: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: incompatible implicit declaration of built-in function ‘strcspn’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/git_df_2.c:87:23: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: implicit declaration of function ‘strbuf_addch’; did you mean ‘strbuf_add’? [-Wimplicit-function-declaration]
  128 |                 strbuf_addch(sb, ch);
      |                 ^~~~~~~~~~~~
      |                 strbuf_add
./benchmarks/git/double_free_2/git_df_2.c: In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:141:9: warning: implicit declaration of function ‘strbuf_init’ [-Wimplicit-function-declaration]
  141 |         strbuf_init(&buf, 0);
      |         ^~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: implicit declaration of function ‘strchr’ [-Wimplicit-function-declaration]
  174 |                 tab = strchr(ptr, '\t');
      |                       ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:174:23: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: incompatible implicit declaration of built-in function ‘strchr’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/git_df_2.c:174:23: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: implicit declaration of function ‘get_sha1_hex’ [-Wimplicit-function-declaration]
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: implicit declaration of function ‘verify_path’ [-Wimplicit-function-declaration]
  200 |                 if (!verify_path(path_name)) {
      |                      ^~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: implicit declaration of function ‘remove_file_from_cache’ [-Wimplicit-function-declaration]
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: implicit declaration of function ‘add_cacheinfo’ [-Wimplicit-function-declaration]
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^~~~~~~~~~~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -0.9%|          |
nothrow                          |      |      |      |      |     -0.9%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -1.3%|          |
ethread                          |      |      |      |      |     -1.3%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                            |      |      |      |      |     -0.1%|          |
phiopt                           |      |      |      |      |     -0.1%|          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========

=======node_fun:read_index_info=========

--------GIMPLE Cond -------
succs:= 3
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 3
succs:= 4
succs:= 5
succs:= 6
succs:= 6
succs:= 7
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 8
succs:= 9
succs:= 9
succs:= 10
--------GIMPLE Cond -------
succs:= 11
--------GIMPLE Cond -------
succs:= 12
--------GIMPLE Cond -------
succs:= 13
succs:= 11
succs:= 12
succs:= 13
--------GIMPLE Cond -------
succs:= 16
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 16
succs:= 17
succs:= 17
succs:= 18
--------GIMPLE Cond -------
succs:= 19
--------GIMPLE Cond -------
succs:= 20
--------GIMPLE Cond -------
succs:= 21
succs:= 21
succs:= 19
succs:= 20
--------GIMPLE Cond -------
succs:= 24
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 24
succs:= 25
succs:= 26
--------GIMPLE Cond -------
succs:= 27
succs:= 26
--------GIMPLE Cond -------
succs:= 29
succs:= 27
succs:= 29
--------GIMPLE Cond -------
succs:= 31
--------GIMPLE Cond -------
succs:= 31
succs:= 33
succs:= 7
succs:= 10
succs:= 18
succs:= 25
succs:= 33
--------GIMPLE Cond -------
succs:= 36
=======node_fun:unquote_c_style=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE_SWITCH -------
succs:= 36
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
--------GIMPLE_SWITCH -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 15
--------GIMPLE Cond -------
succs:= 15
succs:= 16
succs:= 16
succs:= 17
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 18
--------GIMPLE Cond -------
succs:= 18
succs:= 19
succs:= 19
succs:= 20
--------GIMPLE Cond -------
succs:= 6
succs:= 17
succs:= 20
succs:= 22
succs:= 2
succs:= 4
succs:= 6
=======node_fun:strtoul=========
 <tree_list 0x7fcb148ce6b8
    purpose <identifier_node 0x7fcb14ddde38 leaf>
    chain <tree_list 0x7fcb148ce690
        purpose <identifier_node 0x7fcb14ddde10 nothrow>>>
=======node_fun:strbuf_getline=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 4
succs:= 6
succs:= 7
--------GIMPLE Cond -------
succs:= 7
succs:= 8
succs:= 2
succs:= 8
=======node_fun:strbuf_add=========

=======node_fun:strbuf_reset=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:strbuf_grow=========

--------GIMPLE Cond -------
succs:= 6
succs:= 2
succs:= 2
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
succs:= 5
succs:= 4
=======node_fun:strbuf_release=========

=======node_fun:xrealloc=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 2
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 5
succs:= 7
succs:= 4
succs:= 7
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
# .MEM_78 = VDEF <.MEM_77(D)>
strbuf_init (&buf, 0);
# .MEM_79 = VDEF <.MEM_78>
strbuf_init (&uq, 0);
_1 = __errno_location ();
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
_7 = __errno_location ();
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
# .MEM_90 = VDEF <.MEM_89>
strbuf_reset (&uq);
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
# .MEM_92 = VDEF <.MEM_91>
printf ("git-update-index: bad quoting of path name%s", "");
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
# .MEM_107 = VDEF <.MEM_74>
printf ("malformed index info %s", _33);
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
# .MEM_29 = VDEF <.MEM_23>
ch_21 = fgetc (fp_17(D));
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
# .MEM_41 = VDEF <.MEM_33(D)>
printf ("you want to use way too much memory %s", "");
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
# .MEM_32 = VDEF <.MEM_25>
printf ("Out of memory, realloc failed%s", "");
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:read_index_info========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path read_index_info  function_call count: 16 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt is child function---free-----

 ================== find ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
   15 |     free(sb->buf);
      |     ^
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_9 = sb_15(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_10 = _8 + _9;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
*_10 = 0;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_8 = sb_15(D)->buf;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
_7 = sb_15(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
if (_7 == 0)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^
if (_7 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
Cond in fucntion strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
=======================Path Constaint===========================

=succs:= 4
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
	relate logic:= 0
=succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
=succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
=succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
strbuf_reset (sb_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt is child function---strbuf_reset-----

 ================== trace ================== 
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;33m =======POP node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;33m =======POP node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;33m =======POP node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;33m =======POP node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :5========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>
_3 = _1 + _2;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>
quoted_11 = PHI <quoted_21(2), quoted_12(23)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_22 = strcspn (quoted_11, "\"\\");
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt is child function---strcspn-----

 ================== trace ================== 
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^
if (ch_31 > 55)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
Cond in fucntion unquote_c_style basic block 19
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 21
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^
if (ch_31 <= 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
Cond in fucntion unquote_c_style basic block 18
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
*endp_34(D) = _3;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;33m =======POP node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre_check_funciton:read_index_info========= [0m
[40;42m =======start_check_funciton:read_index_info========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fba0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:141:2 start: ./benchmarks/git/double_free_2/git_df_2.c:141:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:141:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fbe0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:142:2 start: ./benchmarks/git/double_free_2/git_df_2.c:142:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:142:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab708
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fcb148e4a98>
_1 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = __errno_location ();
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:167:17: warning: use location
  167 |                 errno = 0;
      |                 ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab708
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fcb148e4a98>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab750
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fcb148e4ab0>
# VUSE <.MEM_85>
_2 = buf.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
if (ul_57 != _63)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
Cond in fucntion read_index_info basic block 6
 ================== possible direct basic block ================= 
from read_index_info basic block 7
 ================== possible direct basic block ================= 
from read_index_info basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab750
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fcb148e4ab0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab8b8
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fcb148e4b10>
_7 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = *_7;
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
if (_8 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
Cond in fucntion read_index_info basic block 5
 ================== possible direct basic block ================= 
from read_index_info basic block 7
 ================== possible direct basic block ================= 
from read_index_info basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab8b8
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fcb148e4b10>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab948
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fcb148e4b28>
# VUSE <.MEM_86>
_9 = ptr;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt is child function---strchr-----

 ================== trace ================== 
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
if (_21 != 32)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
Cond in fucntion read_index_info basic block 17
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
if (_20 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
Cond in fucntion read_index_info basic block 16
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 17
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
if (_11 <= 40)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
Cond in fucntion read_index_info basic block 9
 ================== possible direct basic block ================= 
from read_index_info basic block 10
 ================== possible direct basic block ================= 
from read_index_info basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt is child function---unquote_c_style-----

 ================== trace ================== 
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
if (_22 == 34)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
Cond in fucntion read_index_info basic block 20
 ================== possible direct basic block ================= 
from read_index_info basic block 21
 ================== possible direct basic block ================= 
from read_index_info basic block 24
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^
if (_14 <= 51)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
Cond in fucntion read_index_info basic block 13
 ================== possible direct basic block ================= 
from read_index_info basic block 14
 ================== possible direct basic block ================= 
from read_index_info basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^
if (_13 > 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
Cond in fucntion read_index_info basic block 12
 ================== possible direct basic block ================= 
from read_index_info basic block 13
 ================== possible direct basic block ================= 
from read_index_info basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
if (tab_59 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
Cond in fucntion read_index_info basic block 8
 ================== possible direct basic block ================= 
from read_index_info basic block 10
 ================== possible direct basic block ================= 
from read_index_info basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab948
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fcb148e4b28>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dabc18
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fcb148e4b88>
_19 = tab_36 + 18446744073709551576;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
if (_20 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
Cond in fucntion read_index_info basic block 16
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 17
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dabc18
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fcb148e4b88>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fda0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:193:4 start: ./benchmarks/git/double_free_2/git_df_2.c:193:4 finish: ./benchmarks/git/double_free_2/git_df_2.c:193:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fde0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fe20
    type <pointer_type 0x7fcb148da0a8
        type <array_type 0x7fcb148da000 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3930 constant 360>
            unit-size <integer_cst 0x7fcb148c3978 constant 45>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d9f18>
            pointer_to_this <pointer_type 0x7fcb148da0a8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb148f0480 type <array_type 0x7fcb148da000>
        readonly constant static "git-update-index: bad quoting of path name%s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:195:5 start: ./benchmarks/git/double_free_2/git_df_2.c:195:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:195:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f0168
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
    var <var_decl 0x7fcb148ea2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fcb148e4c60>
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
if (_32 != path_name_37)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
Cond in fucntion read_index_info basic block 31
 ================== possible direct basic block ================= 
from read_index_info basic block 32
 ================== possible direct basic block ================= 
from read_index_info basic block 33
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f0168
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
    var <var_decl 0x7fcb148ea2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fcb148e4c60>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fcb14dabdc8
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fcb148e4ba0>
# VUSE <.MEM_94>
_25 = stderr;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dabdc8
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fcb148e4ba0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9ff40
    type <pointer_type 0x7fcb148da5e8
        type <array_type 0x7fcb148da540 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3990 constant 304>
            unit-size <integer_cst 0x7fcb148c3900 constant 38>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da498>
            pointer_to_this <pointer_type 0x7fcb148da5e8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6080 type <array_type 0x7fcb148da540>
        readonly constant static "git-update-index: unable to remove %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:208:5 start: ./benchmarks/git/double_free_2/git_df_2.c:208:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:208:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f0288
    type <integer_type 0x7fcb14db8690 unsigned int public unsigned SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8690 precision:32 min <integer_cst 0x7fcb14da3e28 0> max <integer_cst 0x7fcb14da3de0 4294967295>
        pointer_to_this <pointer_type 0x7fcb14dc4690>>
    var <var_decl 0x7fcb148ea1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
mode_58 = (unsigned int) ul_57;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f0288
    type <integer_type 0x7fcb14db8690 unsigned int public unsigned SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8690 precision:32 min <integer_cst 0x7fcb14da3e28 0> max <integer_cst 0x7fcb14da3de0 4294967295>
        pointer_to_this <pointer_type 0x7fcb14dc4690>>
    var <var_decl 0x7fcb148ea1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9f9a0
    type <pointer_type 0x7fcb148da5e8
        type <array_type 0x7fcb148da540 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3990 constant 304>
            unit-size <integer_cst 0x7fcb148c3900 constant 38>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da498>
            pointer_to_this <pointer_type 0x7fcb148da5e8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db60c0 type <array_type 0x7fcb148da540>
        readonly constant static "git-update-index: unable to update %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:218:5 start: ./benchmarks/git/double_free_2/git_df_2.c:218:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:218:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2060
    type <pointer_type 0x7fcb148da7e0
        type <array_type 0x7fcb148da738 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da690>
            pointer_to_this <pointer_type 0x7fcb148da7e0>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb148ee2d0 type <array_type 0x7fcb148da738>
        readonly constant static "malformed index info %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:226:3 start: ./benchmarks/git/double_free_2/git_df_2.c:226:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:226:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f20e0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:143:9 start: ./benchmarks/git/double_free_2/git_df_2.c:143:9 finish: ./benchmarks/git/double_free_2/git_df_2.c:143:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2120
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:228:2 start: ./benchmarks/git/double_free_2/git_df_2.c:228:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:228:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2160
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:229:2 start: ./benchmarks/git/double_free_2/git_df_2.c:229:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:229:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:read_index_info========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab5e8
    type <integer_type 0x7fcb14db85e8 int public SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
        pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
    var <var_decl 0x7fcb1564bcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
read_index_info (line_2(D));
./benchmarks/git/double_free_2/git_df_2.c:235:5: warning: use location
  235 |     read_index_info(line);
      |     ^
this stmt is child function---read_index_info-----

 ================== trace ================== 
trace fucntion name:read_index_info 
[40;44m =======trace_function_path read_index_info  function_call count: 16 level :0========  [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
[40;31m  find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;46m =======add node_fun stack:strbuf_release========= [0m
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :1========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;46m =======add node_fun stack:strbuf_getline========= [0m
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;46m =======add node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;46m =======add node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;46m =======add node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;46m =======add node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;46m =======add node_fun stack:unquote_c_style========= [0m
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :2========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :4========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;46m =======add node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;46m =======add node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;46m =======add node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;46m =======add node_fun stack:strtoul========= [0m
[40;44m =======trace_function_path strtoul  function_call count: 0 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;46m =======add node_fun stack:strbuf_init========= [0m

 ================== trace ================== 
trace fucntion free:10 
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
read_index_info (line_2(D));
./benchmarks/git/double_free_2/git_df_2.c:235:5: warning: use location
  235 |     read_index_info(line);
      |     ^
this stmt is child function---read_index_info-----

 ================== trace ================== 
trace fucntion name:read_index_info 
[40;44m =======trace_function_path read_index_info  function_call count: 16 level :0========  [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
[40;31m  find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;46m =======add node_fun stack:strbuf_release========= [0m
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :1========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;46m =======add node_fun stack:strbuf_getline========= [0m
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;46m =======add node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;46m =======add node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;46m =======add node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;46m =======add node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;46m =======add node_fun stack:unquote_c_style========= [0m
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :2========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :4========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;46m =======add node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;46m =======add node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;46m =======add node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;46m =======add node_fun stack:strtoul========= [0m
[40;44m =======trace_function_path strtoul  function_call count: 0 level :1========  [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;46m =======add node_fun stack:strbuf_init========= [0m

 ================== trace ================== 
trace fucntion free:20 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab5e8
    type <integer_type 0x7fcb14db85e8 int public SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
        pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
    var <var_decl 0x7fcb1564bcf0 line>
    def_stmt GIMPLE_NOP
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:20 [0m
[40;31m  	possible double free [rigorous]:20 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:20 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:read_index_info========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path read_index_info  function_call count: 16 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt is child function---free-----

 ================== find ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
   15 |     free(sb->buf);
      |     ^
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_9 = sb_15(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_10 = _8 + _9;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
*_10 = 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_8 = sb_15(D)->buf;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
_7 = sb_15(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
if (_7 == 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^
if (_7 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
Cond in fucntion strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
=======================Path Constaint===========================

=succs:= 4
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
	relate logic:= 0
=succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
=succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
=succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
strbuf_reset (sb_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt is child function---strbuf_reset-----

 ================== trace ================== 
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_getline’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;33m =======POP node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;33m =======POP node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;33m =======POP node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;33m =======POP node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>
_3 = _1 + _2;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>
quoted_11 = PHI <quoted_21(2), quoted_12(23)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_22 = strcspn (quoted_11, "\"\\");
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt is child function---strcspn-----

 ================== trace ================== 
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^
if (ch_31 > 55)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
Cond in fucntion unquote_c_style basic block 19
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 21
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^
if (ch_31 <= 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
Cond in fucntion unquote_c_style basic block 18
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
In function ‘read_index_info’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
*endp_34(D) = _3;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘unquote_c_style’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;33m =======POP node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre_check_funciton:read_index_info========= [0m
[40;42m =======start_check_funciton:read_index_info========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fba0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:141:2 start: ./benchmarks/git/double_free_2/git_df_2.c:141:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:141:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fbe0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:142:2 start: ./benchmarks/git/double_free_2/git_df_2.c:142:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:142:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab708
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fcb148e4a98>
_1 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_85 = VDEF <.MEM_80>
*_1 = 0;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = __errno_location ();
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:167:17: warning: use location
  167 |                 errno = 0;
      |                 ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab708
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fcb148e4a98>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab750
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fcb148e4ab0>
# VUSE <.MEM_85>
_2 = buf.buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
if (ul_57 != _63)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
Cond in fucntion read_index_info basic block 6
 ================== possible direct basic block ================= 
from read_index_info basic block 7
 ================== possible direct basic block ================= 
from read_index_info basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab750
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fcb148e4ab0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab8b8
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fcb148e4b10>
_7 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = *_7;
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
if (_8 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
Cond in fucntion read_index_info basic block 5
 ================== possible direct basic block ================= 
from read_index_info basic block 7
 ================== possible direct basic block ================= 
from read_index_info basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab8b8
    type <pointer_type 0x7fcb14dbf9d8
        type <integer_type 0x7fcb14db85e8 int public SI
            size <integer_cst 0x7fcb14da3df8 constant 32>
            unit-size <integer_cst 0x7fcb14da3e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db85e8 precision:32 min <integer_cst 0x7fcb14da3db0 -2147483648> max <integer_cst 0x7fcb14da3dc8 2147483647>
            pointer_to_this <pointer_type 0x7fcb14dbf9d8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fcb148e4b10>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dab948
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fcb148e4b28>
# VUSE <.MEM_86>
_9 = ptr;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt is child function---strchr-----

 ================== trace ================== 
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
if (_21 != 32)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
Cond in fucntion read_index_info basic block 17
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
if (_20 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
Cond in fucntion read_index_info basic block 16
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 17
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt is child function---strtoul-----

 ================== trace ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_86>
_4 = ptr;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
if (_11 <= 40)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
Cond in fucntion read_index_info basic block 9
 ================== possible direct basic block ================= 
from read_index_info basic block 10
 ================== possible direct basic block ================= 
from read_index_info basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt is child function---unquote_c_style-----

 ================== trace ================== 
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
if (_22 == 34)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
Cond in fucntion read_index_info basic block 20
 ================== possible direct basic block ================= 
from read_index_info basic block 21
 ================== possible direct basic block ================= 
from read_index_info basic block 24
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^
if (_14 <= 51)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
Cond in fucntion read_index_info basic block 13
 ================== possible direct basic block ================= 
from read_index_info basic block 14
 ================== possible direct basic block ================= 
from read_index_info basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^
if (_13 > 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
Cond in fucntion read_index_info basic block 12
 ================== possible direct basic block ================= 
from read_index_info basic block 13
 ================== possible direct basic block ================= 
from read_index_info basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
if (tab_59 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
Cond in fucntion read_index_info basic block 8
 ================== possible direct basic block ================= 
from read_index_info basic block 10
 ================== possible direct basic block ================= 
from read_index_info basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dab948
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fcb148e4b28>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: Use after free error!: free location 
  222 |                         free(path_name);
      |                         ^
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 31
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
	relate logic:= 1
succs:= 29
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
	relate logic:= 0
succs:= 26
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
	relate logic:= 0
succs:= 25
// predicted unlikely by continue predictor.
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 1
succs:= 24
if (_24 == 0)
./benchmarks/git/double_free_2/git_df_2.c:200:20: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                    ^
	relate logic:= 0
succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: Use after free error!: free location 
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 20
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
	relate logic:= 1
succs:= 19
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^
	relate logic:= 0
succs:= 18
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:189:25: warning: use location
  189 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 17
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^
	relate logic:= 0
succs:= 16
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
	relate logic:= 0
succs:= 10
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:176:25: warning: use location
  176 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 9
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^
	relate logic:= 0
succs:= 8
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^
	relate logic:= 0
succs:= 7
// predicted unlikely by goto predictor.
./benchmarks/git/double_free_2/git_df_2.c:171:25: warning: use location
  171 |                         goto bad_line;
      |                         ^
	relate logic:= 1
succs:= 6
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^
	relate logic:= 0
succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14dabc18
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fcb148e4b88>
_19 = tab_36 + 18446744073709551576;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^
if (_20 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
Cond in fucntion read_index_info basic block 16
 ================== possible direct basic block ================= 
from read_index_info basic block 18
 ================== possible direct basic block ================= 
from read_index_info basic block 17
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dabc18
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fcb148e4b88>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fda0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:193:4 start: ./benchmarks/git/double_free_2/git_df_2.c:193:4 finish: ./benchmarks/git/double_free_2/git_df_2.c:193:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fde0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9fe20
    type <pointer_type 0x7fcb148da0a8
        type <array_type 0x7fcb148da000 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3930 constant 360>
            unit-size <integer_cst 0x7fcb148c3978 constant 45>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d9f18>
            pointer_to_this <pointer_type 0x7fcb148da0a8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb148f0480 type <array_type 0x7fcb148da000>
        readonly constant static "git-update-index: bad quoting of path name%s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:195:5 start: ./benchmarks/git/double_free_2/git_df_2.c:195:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:195:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f0168
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
    var <var_decl 0x7fcb148ea2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fcb148e4c60>
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
if (_32 != path_name_37)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
Cond in fucntion read_index_info basic block 31
 ================== possible direct basic block ================= 
from read_index_info basic block 32
 ================== possible direct basic block ================= 
from read_index_info basic block 33
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f0168
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
    var <var_decl 0x7fcb148ea2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fcb148e4c60>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fcb14dabdc8
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fcb148e4ba0>
# VUSE <.MEM_94>
_25 = stderr;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14dabdc8
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fcb148e4ba0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9ff40
    type <pointer_type 0x7fcb148da5e8
        type <array_type 0x7fcb148da540 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3990 constant 304>
            unit-size <integer_cst 0x7fcb148c3900 constant 38>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da498>
            pointer_to_this <pointer_type 0x7fcb148da5e8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6080 type <array_type 0x7fcb148da540>
        readonly constant static "git-update-index: unable to remove %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:208:5 start: ./benchmarks/git/double_free_2/git_df_2.c:208:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:208:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f0288
    type <integer_type 0x7fcb14db8690 unsigned int public unsigned SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8690 precision:32 min <integer_cst 0x7fcb14da3e28 0> max <integer_cst 0x7fcb14da3de0 4294967295>
        pointer_to_this <pointer_type 0x7fcb14dc4690>>
    var <var_decl 0x7fcb148ea1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
mode_58 = (unsigned int) ul_57;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^
if (_31 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
Cond in fucntion read_index_info basic block 29
 ================== possible direct basic block ================= 
from read_index_info basic block 30
 ================== possible direct basic block ================= 
from read_index_info basic block 31
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt is child function---printf-----

 ================== trace ================== 
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt is child function---fprintf-----

 ================== trace ================== 
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt is child function---verify_path-----

 ================== trace ================== 
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^
if (mode_58 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
Cond in fucntion read_index_info basic block 26
 ================== possible direct basic block ================= 
from read_index_info basic block 27
 ================== possible direct basic block ================= 
from read_index_info basic block 29
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f0288
    type <integer_type 0x7fcb14db8690 unsigned int public unsigned SI
        size <integer_cst 0x7fcb14da3df8 constant 32>
        unit-size <integer_cst 0x7fcb14da3e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8690 precision:32 min <integer_cst 0x7fcb14da3e28 0> max <integer_cst 0x7fcb14da3de0 4294967295>
        pointer_to_this <pointer_type 0x7fcb14dc4690>>
    var <var_decl 0x7fcb148ea1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb14f9f9a0
    type <pointer_type 0x7fcb148da5e8
        type <array_type 0x7fcb148da540 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3990 constant 304>
            unit-size <integer_cst 0x7fcb148c3900 constant 38>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da498>
            pointer_to_this <pointer_type 0x7fcb148da5e8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db60c0 type <array_type 0x7fcb148da540>
        readonly constant static "git-update-index: unable to update %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:218:5 start: ./benchmarks/git/double_free_2/git_df_2.c:218:5 finish: ./benchmarks/git/double_free_2/git_df_2.c:218:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2060
    type <pointer_type 0x7fcb148da7e0
        type <array_type 0x7fcb148da738 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148da690>
            pointer_to_this <pointer_type 0x7fcb148da7e0>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb148ee2d0 type <array_type 0x7fcb148da738>
        readonly constant static "malformed index info %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:226:3 start: ./benchmarks/git/double_free_2/git_df_2.c:226:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:226:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f20e0
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:143:9 start: ./benchmarks/git/double_free_2/git_df_2.c:143:9 finish: ./benchmarks/git/double_free_2/git_df_2.c:143:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2120
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb148ea000 buf type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
            addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
            align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> chain <label_decl 0x7fcb148de180 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:228:2 start: ./benchmarks/git/double_free_2/git_df_2.c:228:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:228:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2160
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fcb1564bf30 uq type <record_type 0x7fcb148d6dc8 strbuf>
        addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fcb14dc1078 192> unit-size <integer_cst 0x7fcb14dc1048 24>
        align:64 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info>
        chain <label_decl 0x7fcb148de180 bad_line type <void_type 0x7fcb14db8f18 void>
            VOID ./benchmarks/git/double_free_2/git_df_2.c:225:2
            align:1 warn_if_not_align:0 context <function_decl 0x7fcb148d4200 read_index_info> initial <error_mark 0x7fcb14da3ba0>>>
    ./benchmarks/git/double_free_2/git_df_2.c:229:2 start: ./benchmarks/git/double_free_2/git_df_2.c:229:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:229:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:read_index_info========= [0m
[40;44m =======node_fun:unquote_c_style========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘unquote_c_style’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>
_3 = _1 + _2;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>
quoted_11 = PHI <quoted_21(2), quoted_12(23)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt is child function---strcspn-----

 ================== trace ================== 
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_24 = quoted_11 + len_22;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^
if (ch_31 > 55)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
Cond in fucntion unquote_c_style basic block 19
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 21
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^
if (ch_31 <= 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
Cond in fucntion unquote_c_style basic block 18
 ================== possible direct basic block ================= 
from unquote_c_style basic block 20
 ================== possible direct basic block ================= 
from unquote_c_style basic block 19
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
bb index := 5
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_38>
_2 = *quoted_24;
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6360
    type <pointer_type 0x7fcb148cc888
        type <integer_type 0x7fcb148cc7e0 char readonly public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc888>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148d30a8>>
    var <parm_decl 0x7fcb148de380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fcb148e4cf0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt is child function---strbuf_addch-----

 ================== trace ================== 
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt is child function---strbuf_add-----

 ================== trace ================== 
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_37(D)>
oldlen_19 = sb_18(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6480
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148de300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fcb148e4d20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: Use after free error!: free location 
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 2
if (_1 != 34)
./benchmarks/git/double_free_2/git_df_2.c:83:12: warning: use location
   83 |         if (*quoted++ != '"')
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;44m =======node_fun:strtoul========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;44m =======node_fun:strbuf_getline========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_getline’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_10 = _8 + _9;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
bb index := 9
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 == 0)
bb index := 8
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^
if (_7 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
Cond in fucntion strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
=======================Path Constaint===========================

=succs:= 4
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
	relate logic:= 0
=succs:= 5
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^
	relate logic:= 0
=succs:= 4
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^
	relate logic:= 0
=succs:= 3
if (_3 == _4)
./benchmarks/git/double_free_2/git_df_2.c:169:20: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                    ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt is child function---strbuf_reset-----

 ================== trace ================== 
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148f6048
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148ded00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fcb148e4e70>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: Use after free error!: free location 
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt is child function---fgetc-----

 ================== trace ================== 
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^
if (ch_21 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
Cond in fucntion strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 8
 ================== possible direct basic block ================= 
from strbuf_getline basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
if (ch_21 == term_22(D))

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
Cond in fucntion strbuf_getline basic block 4
 ================== possible direct basic block ================= 
from strbuf_getline basic block 7
 ================== possible direct basic block ================= 
from strbuf_getline basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt is child function---feof-----

 ================== trace ================== 
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
Cond in fucntion strbuf_getline basic block 2
 ================== possible direct basic block ================= 
from strbuf_getline basic block 10
 ================== possible direct basic block ================= 
from strbuf_getline basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc000
    type <pointer_type 0x7fcb148d3dc8
        type <record_type 0x7fcb148d3d20 FILE BLK
            size <integer_cst 0x7fcb14e780a8 constant 1728>
            unit-size <integer_cst 0x7fcb148c3840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d3c78 fields <field_decl 0x7fcb148d5260 _flags> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d3dc8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb148da150>>
    var <parm_decl 0x7fcb148ded80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fcb148e4e88>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;44m =======node_fun:strbuf_add========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_add’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate stmt argument:sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc558
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb148dee80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fcb148e4ed0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: Use after free error!: free location 
   34 |         strbuf_grow(sb, len);
      |         ^
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>
_3 = _1 + _2;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc480
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fcb148e4eb8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;44m =======node_fun:strbuf_reset========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_36>
return _14;
In function ‘strbuf_reset’:
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_6(D)>
_1 = sb_4(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_1 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
Cond in fucntion strbuf_reset basic block 2
 ================== possible direct basic block ================= 
from strbuf_reset basic block 3
 ================== possible direct basic block ================= 
from strbuf_reset basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fc798
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fcb148e4f00>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;44m =======node_fun:strbuf_grow========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘strbuf_grow’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
In function ‘xrealloc’:
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fcb148f2580
    type <pointer_type 0x7fcb148d91f8
        type <array_type 0x7fcb148d9150 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb148c3858 constant 312>
            unit-size <integer_cst 0x7fcb148c3918 constant 39>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d90a8>
            pointer_to_this <pointer_type 0x7fcb148d91f8>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14db6100 type <array_type 0x7fcb148d9150>
        readonly constant static "you want to use way too much memory %s\000">
    ./benchmarks/git/double_free_2/git_df_2.c:22:3 start: ./benchmarks/git/double_free_2/git_df_2.c:22:3 finish: ./benchmarks/git/double_free_2/git_df_2.c:22:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcaf8
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
# VUSE <.MEM_34>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcd80
    type <integer_type 0x7fcb14db87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db8738 precision:64 min <integer_cst 0x7fcb14da3e88 0> max <integer_cst 0x7fcb14da4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fcb14dc47e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fcb148e49d8 type <integer_type 0x7fcb14db87e0 long unsigned int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>
# VUSE <.MEM_38>
_24 = sb_29(D)->buf;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_34>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_33(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb148fcf30
    type <pointer_type 0x7fcb148cc5e8
        type <integer_type 0x7fcb148cc540 char public QI
            size <integer_cst 0x7fcb14da3ca8 constant 8>
            unit-size <integer_cst 0x7fcb14da3cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb14db83f0 precision:8 min <integer_cst 0x7fcb148c3720 -128> max <integer_cst 0x7fcb148c3708 127>
            pointer_to_this <pointer_type 0x7fcb148cc5e8>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fcb148cc690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fcb148e4f18>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: Use after free error!: free location 
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;44m =======node_fun:strbuf_release========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt is child function---free-----

 ================== find ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905438
    type <pointer_type 0x7fcb148d6e70
        type <record_type 0x7fcb148d6dc8 strbuf BLK
            size <integer_cst 0x7fcb14dc1078 constant 192>
            unit-size <integer_cst 0x7fcb14dc1048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fcb148d6dc8 fields <field_decl 0x7fcb148d5428 alloc> context <translation_unit_decl 0x7fcb14dae168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fcb148d6e70>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fcb14900180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fcb148e4f78>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
   15 |     free(sb->buf);
      |     ^
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;44m =======node_fun:xrealloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘xrealloc’:
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905870
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fcb148c3b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb149058b8
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fcb148c3a50>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905900
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fcb148c3a68>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
  230 | }
      | ^
beacuse in succ := 37 have return or exit
# VUSE <.MEM_84>
return;
./benchmarks/git/double_free_2/git_df_2.c:230:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 37

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
beacuse in succ := 25 have return or exit
# VUSE <.MEM_36>
return _14;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 25

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_24>
return _11;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
   30 | }
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_5>
return;
./benchmarks/git/double_free_2/git_df_2.c:30:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
   24 | }
      | ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_32>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/double_free_2/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fcb14905948
    type <pointer_type 0x7fcb14dbf000
        type <void_type 0x7fcb14db8f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fcb14dbf000>>
        public unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fcb14dc49d8>>
    var <var_decl 0x7fcb14907240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fcb148c3a80>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/double_free_2/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/double_free_2/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fcb148f27c0
    type <pointer_type 0x7fcb148d6a80
        type <array_type 0x7fcb148d69d8 type <integer_type 0x7fcb148cc540 char>
            BLK
            size <integer_cst 0x7fcb14da3f18 constant 256>
            unit-size <integer_cst 0x7fcb14dc1018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fcb148d6930>
            pointer_to_this <pointer_type 0x7fcb148d6a80>>
        unsigned DI
        size <integer_cst 0x7fcb14da3bb8 constant 64>
        unit-size <integer_cst 0x7fcb14da3bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fcb14dad770 type <array_type 0x7fcb148d69d8>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/double_free_2/../git.h:422:4 start: ./benchmarks/git/double_free_2/../git.h:422:4 finish: ./benchmarks/git/double_free_2/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
read_index_info (line_2(D));
return 0;

=======Mapping node_fun:read_index_info=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 25231916]:
strbuf_init (&buf, 0);
strbuf_init (&uq, 0);
goto <bb 36>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1052266986]:
_1 = __errno_location ();
*_1 = 0;
_2 = buf.buf;
ul_57 = strtoul (_2, &ptr, 8);
_3 = buf.buf;
_4 = ptr;
if (_3 == _4)
  goto <bb 7>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1051846080]:
_5 = ptr;
_6 = *_5;
if (_6 != 32)
  goto <bb 7>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1051425343]:
_7 = __errno_location ();
_8 = *_7;
if (_8 != 0)
  goto <bb 7>; [0.04%]
else
  goto <bb 6>; [99.96%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1051004773]:
_63 = ul_57 & 4294967295;
if (ul_57 != _63)
  goto <bb 7>; [0.04%]
else
  goto <bb 8>; [99.96%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1682614]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 1050584373]:
mode_58 = (unsigned int) ul_57;
_9 = ptr;
tab_59 = strchr (_9, 9);
if (tab_59 == 0B)
  goto <bb 10>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 1050164139]:
_10 = ptr;
_11 = tab_59 - _10;
if (_11 <= 40)
  goto <bb 10>; [0.04%]
else
  goto <bb 11>; [99.96%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 840298]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 1049744074]:
_12 = MEM[(char *)tab_59 + -2B];
if (_12 == 32)
  goto <bb 12>; [34.00%]
else
  goto <bb 15>; [66.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 356912989]:
_13 = MEM[(char *)tab_59 + -1B];
if (_13 > 47)
  goto <bb 13>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 178456494]:
_14 = MEM[(char *)tab_59 + -1B];
if (_14 <= 51)
  goto <bb 14>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 89228247]:
_15 = MEM[(char *)tab_59 + -1B];
_16 = (int) _15;
stage_60 = _16 + -48;
_17 = tab_59 + 1;
ptr = _17;
tab_62 = tab_59 + 18446744073709551614;
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 960515828]:
_18 = tab_59 + 1;
ptr = _18;

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 1049744075]:
# tab_36 = PHI <tab_62(14), tab_59(15)>
# stage_38 = PHI <stage_60(14), 0(15)>
_19 = tab_36 + 18446744073709551576;
_20 = get_sha1_hex (_19, &sha1);
if (_20 != 0)
  goto <bb 18>; [0.04%]
else
  goto <bb 17>; [99.96%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 1049324178]:
_21 = MEM[(char *)tab_36 + -41B];
if (_21 != 32)
  goto <bb 18>; [0.04%]
else
  goto <bb 19>; [99.96%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 839626]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 1048904450]:
path_name_66 = ptr;
if (line_termination_49(D) != 0)
  goto <bb 20>; [67.00%]
else
  goto <bb 24>; [33.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 702765983]:
_22 = *path_name_66;
if (_22 == 34)
  goto <bb 21>; [20.24%]
else
  goto <bb 24>; [79.76%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 142239834]:
strbuf_reset (&uq);
_23 = unquote_c_style (&uq, path_name_66, 0B);
if (_23 != 0)
  goto <bb 22>; [0.04%]
else
  goto <bb 23>; [99.96%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 56896]:
printf ("git-update-index: bad quoting of path name%s", "");
exit (1);

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 142182938]:
path_name_69 = uq.buf;

=======is loop:1=========

 bb index 24 
<bb 24> [local count: 1048847554]:
# path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
_24 = verify_path (path_name_37);
if (_24 == 0)
  goto <bb 25>; [19.52%]
else
  goto <bb 26>; [80.48%]

=======is loop:1=========

 bb index 25 
<bb 25> [local count: 204735046]:
_25 = stderr;
fprintf (_25, "Ignoring path %s\n", path_name_37);
// predicted unlikely by continue predictor.
goto <bb 35>; [100.00%]

=======is loop:1=========

 bb index 26 
<bb 26> [local count: 844112509]:
if (mode_58 == 0)
  goto <bb 27>; [50.00%]
else
  goto <bb 29>; [50.00%]

=======is loop:1=========

 bb index 27 
<bb 27> [local count: 422056254]:
_26 = remove_file_from_cache (path_name_37);
if (_26 != 0)
  goto <bb 28>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========

 bb index 28 
<bb 28> [local count: 168822]:
_27 = ptr;
printf ("git-update-index: unable to remove %s", _27);
exit (1);

=======is loop:1=========

 bb index 29 
<bb 29> [local count: 422056254]:
_28 = ptr;
MEM[(char *)_28 + -1B] = 0;
_29 = ptr;
_30 = MEM[(char *)_28 + -1B];
MEM[(char *)_29 + -42B] = _30;
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
if (_31 != 0)
  goto <bb 30>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========

 bb index 30 
<bb 30> [local count: 168822]:
printf ("git-update-index: unable to update %s", path_name_37);
exit (1);

=======is loop:1=========

 bb index 31 
<bb 31> [local count: 843774864]:
_32 = ptr;
if (_32 != path_name_37)
  goto <bb 32>; [53.47%]
else
  goto <bb 33>; [46.53%]

=======is loop:1=========

 bb index 32 
<bb 32> [local count: 451166418]:
free (path_name_37);

=======is loop:1=========

 bb index 33 
<bb 33> [local count: 843774864]:
// predicted unlikely by continue predictor.
goto <bb 35>; [100.00%]

=======is loop:0=========

 bb index 34 
<bb 34> [local count: 3362538]:
bad_line:
_33 = buf.buf;
printf ("malformed index info %s", _33);
exit (1);

=======is loop:1=========

 bb index 35 
<bb 35> [local count: 1048509911]:
ptr ={v} {CLOBBER};
sha1 ={v} {CLOBBER};

=======is loop:1=========

 bb index 36 
<bb 36> [local count: 1073741824]:
_34 = stdin;
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
if (_35 != -1)
  goto <bb 3>; [98.00%]
else
  goto <bb 37>; [2.00%]

=======is loop:0=========

 bb index 37 
<bb 37> [local count: 21474840]:
strbuf_release (&buf);
strbuf_release (&uq);
buf ={v} {CLOBBER};
uq ={v} {CLOBBER};
return;

=======Mapping node_fun:unquote_c_style=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 769793699]:
oldlen_19 = sb_18(D)->len;
quoted_21 = quoted_20(D) + 1;
_1 = *quoted_20(D);
if (_1 != 34)
  goto <bb 25>; [2.00%]
else
  goto <bb 3>; [98.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1073741824]:
# quoted_11 = PHI <quoted_21(2), quoted_12(23)>
len_22 = strcspn (quoted_11, "\"\\");
strbuf_add (sb_18(D), quoted_11, len_22);
quoted_24 = quoted_11 + len_22;
_2 = *quoted_24;
switch (_2) <default: <L1> [33.33%], case 34: <L0> [33.33%], case 92: <L2> [33.33%]>

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 357913944]:
<L0>:
if (endp_34(D) != 0B)
  goto <bb 5>; [70.00%]
else
  goto <bb 25>; [30.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 250539762]:
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
*endp_34(D) = _3;
goto <bb 25>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 357913944]:
<L1>:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 357913944]:
<L2>:
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
_4 = MEM[(const char *)quoted_24 + 1B];
ch_26 = (int) _4;
switch (_4) <default: <L11> [10.00%], case 34: <L12> [10.00%], case 48 ... 51: <L10> [10.00%], case 92: <L12> [10.00%], case 97: <L3> [10.00%], case 98: <L4> [10.00%], case 102: <L5> [10.00%], case 110: <L6> [10.00%], case 114: <L7> [10.00%], case 116: <L8> [10.00%], case 118: <L9> [10.00%]>

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 35791395]:
<L3>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 35791395]:
<L4>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 35791395]:
<L5>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 35791395]:
<L6>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 35791395]:
<L7>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 35791395]:
<L8>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 35791395]:
<L9>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 35791395]:
<L10>:
_5 = ch_26 + -48;
ac_27 = _5 << 6;
_6 = MEM[(const char *)quoted_24 + 2B];
ch_28 = (int) _6;
if (ch_28 <= 47)
  goto <bb 17>; [2.00%]
else
  goto <bb 16>; [98.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 35075567]:
if (ch_28 > 55)
  goto <bb 17>; [2.00%]
else
  goto <bb 18>; [98.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 1417339]:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 34374055]:
_7 = ch_28 + -48;
_8 = _7 << 3;
ac_29 = _8 | ac_27;
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
_9 = MEM[(const char *)quoted_24 + 3B];
ch_31 = (int) _9;
if (ch_31 <= 47)
  goto <bb 20>; [2.00%]
else
  goto <bb 19>; [98.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 33686574]:
if (ch_31 > 55)
  goto <bb 20>; [2.00%]
else
  goto <bb 21>; [98.00%]

=======is loop:0=========

 bb index 20 
<bb 20> [local count: 1361213]:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 33012843]:
_10 = ch_31 + -48;
ac_32 = _10 | ac_29;
goto <bb 23>; [100.00%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 35791395]:
<L11>:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 319344003]:
# quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
# ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
<L12>:
strbuf_addch (sb_18(D), ch_13);
goto <bb 3>; [100.00%]

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 396483892]:
error:
strbuf_setlen (sb_18(D), oldlen_19);

=======is loop:0=========

 bb index 25 
<bb 25> [local count: 769793713]:
# _14 = PHI <-1(2), 0(4), 0(5), -1(24)>
return _14;

=======Mapping node_fun:strtoul=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = (sizetype) base_3(D);
_2 = str_4(D) + _1;
*endptr_6(D) = _2;
_8 = (long unsigned int) base_3(D);
return _8;

=======Mapping node_fun:strbuf_getline=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 117315423]:
strbuf_grow (sb_15(D), 0);
_1 = feof (fp_17(D));
if (_1 != 0)
  goto <bb 10>; [2.09%]
else
  goto <bb 3>; [97.91%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 114863530]:
strbuf_reset (sb_15(D));
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1014686025]:
if (ch_21 == term_22(D))
  goto <bb 7>; [5.50%]
else
  goto <bb 5>; [94.50%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 958878294]:
strbuf_grow (sb_15(D), 1);
_2 = sb_15(D)->buf;
_3 = sb_15(D)->len;
_4 = _3 + 1;
sb_15(D)->len = _4;
_5 = _2 + _3;
_6 = (char) ch_21;
*_5 = _6;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ch_21 = fgetc (fp_17(D));
if (ch_21 != -1)
  goto <bb 4>; [94.50%]
else
  goto <bb 7>; [5.50%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 114863531]:
if (ch_21 == -1)
  goto <bb 8>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 39053601]:
_7 = sb_15(D)->len;
if (_7 == 0)
  goto <bb 10>; [1.04%]
else
  goto <bb 9>; [98.96%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 114457374]:
_8 = sb_15(D)->buf;
_9 = sb_15(D)->len;
_10 = _8 + _9;
*_10 = 0;

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 117315424]:
# _11 = PHI <-1(2), -1(8), 0(9)>
return _11;

=======Mapping node_fun:strbuf_add=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
strbuf_grow (sb_7(D), len_8(D));
_1 = sb_7(D)->buf;
_2 = sb_7(D)->len;
_3 = _1 + _2;
memcpy (_3, data_10(D), len_8(D));
_4 = sb_7(D)->len;
_5 = _4 + len_8(D);
strbuf_setlen (sb_7(D), _5);
return;

=======Mapping node_fun:strbuf_reset=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_4(D)->len;
if (_1 != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
strbuf_setlen (sb_4(D), 0);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;

=======Mapping node_fun:strbuf_grow=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_29(D)->len;
_2 = _1 + extra_30(D);
_3 = _2 + 1;
_4 = sb_29(D)->len;
if (_3 <= _4)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
printf ("you want to use way too much memory %s", "");
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
_5 = sb_29(D)->len;
_6 = _5 + extra_30(D);
_7 = _6 + 1;
_8 = sb_29(D)->alloc;
if (_7 > _8)
  goto <bb 5>; [33.00%]
else
  goto <bb 9>; [67.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 354193067]:
_9 = sb_29(D)->alloc;
_10 = alloc_nr (_9);
_11 = (long unsigned int) _10;
_12 = sb_29(D)->len;
_13 = _12 + extra_30(D);
_14 = _13 + 1;
if (_11 < _14)
  goto <bb 6>; [67.00%]
else
  goto <bb 7>; [33.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 237309355]:
_15 = sb_29(D)->len;
_16 = _15 + extra_30(D);
_17 = _16 + 1;
sb_29(D)->alloc = _17;
goto <bb 8>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 116883711]:
_18 = sb_29(D)->alloc;
_19 = alloc_nr (_18);
_20 = (long unsigned int) _19;
sb_29(D)->alloc = _20;

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 354193067]:
_21 = sb_29(D)->alloc;
_22 = st_mult (1, _21);
_23 = (long unsigned int) _22;
_24 = sb_29(D)->buf;
_25 = xrealloc (_24, _23);
sb_29(D)->buf = _25;

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073312330]:
return;

=======Mapping node_fun:strbuf_release=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_3(D)->buf;
free (_1);
memset (sb_3(D), 0, 24);
return;

=======Mapping node_fun:xrealloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_17 = realloc (ptr_14(D), size_15(D));
_1 = ret_17 == 0B;
_2 = size_15(D) == 0;
_3 = _1 & _2;
if (_3 != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
ret_19 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ret_7 = PHI <ret_17(2), ret_19(3)>
if (ret_7 == 0B)
  goto <bb 5>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 429496]:
ret_21 = realloc (ptr_14(D), size_15(D));
_4 = ret_21 == 0B;
_5 = size_15(D) == 0;
_6 = _4 & _5;
if (_6 != 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 141734]:
ret_23 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 429496]:
# ret_8 = PHI <ret_21(5), ret_23(6)>
if (ret_8 == 0B)
  goto <bb 8>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 172]:
printf ("Out of memory, realloc failed%s", "");
exit (1);

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073741653]:
# ret_9 = PHI <ret_7(4), ret_8(7)>
return ret_9;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 4 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    find Entry point : 24 [0m
[40;34m    used_stmt array stack totalsize of : 0.007208 mb[0m
[40;34m    collect time: : 0.000826 s [0m
[40;34m    algorithm time: 0.709012 s [0m
[40;34m    gimple stmt count : : 245 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                              |      |      |      |      |     -0.4%|     -0.1%|
stdarg                           |      |      |      |      |     -0.4%|     -0.1%|
cdce                 ------------|      |      |      |      |          |          |
cselim                           |      |      |      |      |     -0.1%|          |
copyprop                         |      |      |      |      |     -0.1%|          |
ifcombine                        |      |      |      |      |     -0.1%|     +0.1%|
mergephi                         |      |      |      |      |     -0.1%|     +0.1%|
phiopt               ------------|      |      |      |      |          |          |
ch                   ------------|      |      |      |      |          |          |
cplxlower            ------------|      |      |      |      |          |          |
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -3.2%|     -3.1%|
copyprop                         |      |    +1|      |      |     -3.3%|     -3.2%|
reassoc                          |      |      |      |      |     +0.3%|     +0.2%|
dce                              |      |    +2|      |      |     -0.1%|     -0.1%|
forwprop                         |      |      |      |      |     -0.6%|     -0.3%|
phiopt                           |      |      |      |      |     -0.1%|     -0.0%|
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                             |      |      |      |      |     -0.4%|     -0.1%|
dce                              |      |      |      |      |     -0.4%|     -0.1%|
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -30.8%|    -39.6%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts               ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |    +44.6%|    +65.6%|
veclower2            ------------|      |      |      |      |          |          |
switchlower                      |      |      |      |      |     -0.3%|     +0.3%|
reassoc                          |      |   +12|      |      |     -0.3%|     +0.3%|
slsr                 ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -0.3%|     -0.1%|
strlen                           |      |      |      |      |     -0.3%|     -0.1%|
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |    -1|      |      |----------|----------|
vregs                            |      |      |      |      |    +72.9%|    +50.2%|
into_cfglayout                   |      |      |      |      |     -1.7%|     -0.4%|
jump                             |      |      |      |      |     -2.0%|     -0.9%|
subreg1                          |      |      |      |      |     -0.3%|     -0.5%|
dfinit               ------------|      |      |      |      |          |          |
cse1                             |      |      |      |      |     -0.1%|          |
fwprop1                          |      |      |      |      |     -0.9%|     -0.9%|
ce1                              |      |      |      |      |     -0.8%|     -0.9%|
reginfo                          |      |      |      |      |          |     +0.0%|
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant                  |      |      |      |      |     +0.1%|     -0.1%|
loop2_done                       |      |      |      |      |     +0.1%|     -0.1%|
dse1                 ------------|      |      |      |      |          |          |
fwprop2                          |      |      |      |      |     -0.1%|     -0.0%|
init-regs                        |      |      |      |      |          |     +0.1%|
combine                          |      |      |      |      |     +1.5%|     +2.0%|
ce2                              |      |      |      |      |     +1.4%|     +1.8%|
outof_cfglayout                  |      |      |      |      |     +1.7%|     +0.3%|
split1                           |      |      |      |      |     +1.7%|     +0.3%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.2%|     -0.2%|
reload                           |      |      |      |      |     -5.7%|     -6.5%|
postreload                       |      |      |      |      |     -5.9%|     -6.8%|
split2                           |      |      |      |      |     -0.1%|     +0.2%|
cmpelim                          |      |      |      |      |     -0.1%|     +0.2%|
pro_and_epilogue                 |      |      |      |      |     +8.2%|     +8.5%|
dse2                             |      |      |      |      |     +7.6%|     +7.8%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg                    |      |      |      |      |     -0.3%|     -0.5%|
rtl_dce                          |      |      |      |      |     -0.3%|     -0.5%|
bbro                             |      |      |      |      |     +0.4%|     +0.2%|
split4                           |      |      |      |      |     +0.4%|     +0.2%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
/usr/bin/ld: /tmp/ccjSNYgP.ltrans0.ltrans.o: in function `strbuf_grow':
<artificial>:(.text+0xe4): undefined reference to `alloc_nr'
/usr/bin/ld: <artificial>:(.text+0x104): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0x123): undefined reference to `alloc_nr'
/usr/bin/ld: /tmp/ccjSNYgP.ltrans0.ltrans.o: in function `strbuf_reset':
<artificial>:(.text+0x143): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/ccjSNYgP.ltrans0.ltrans.o: in function `strbuf_add':
<artificial>:(.text+0x184): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/ccjSNYgP.ltrans0.ltrans.o: in function `unquote_c_style':
<artificial>:(.text+0x2ad): undefined reference to `strbuf_addch'
/usr/bin/ld: <artificial>:(.text+0x313): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/ccjSNYgP.ltrans0.ltrans.o: in function `read_index_info':
<artificial>:(.text+0x35e): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x372): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x42a): undefined reference to `add_cacheinfo'
/usr/bin/ld: <artificial>:(.text+0x4fc): undefined reference to `get_sha1_hex'
/usr/bin/ld: <artificial>:(.text+0x532): undefined reference to `verify_path'
/usr/bin/ld: <artificial>:(.text+0x54f): undefined reference to `remove_file_from_cache'
collect2: error: ld returned 1 exit status
